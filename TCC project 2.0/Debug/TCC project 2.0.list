
TCC project 2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011210  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  080113f0  080113f0  000123f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011810  08011810  00013740  2**0
                  CONTENTS
  4 .ARM          00000008  08011810  08011810  00012810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011818  08011818  00013740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011818  08011818  00012818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801181c  0801181c  0001281c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000740  20000000  08011820  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016a4  20000740  08011f60  00013740  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001de4  08011f60  00013de4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013740  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025cdd  00000000  00000000  00013770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f2b  00000000  00000000  0003944d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fe0  00000000  00000000  0003e378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018a4  00000000  00000000  00040358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000098f0  00000000  00000000  00041bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028600  00000000  00000000  0004b4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1d6d  00000000  00000000  00073aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165859  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099d4  00000000  00000000  0016589c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0016f270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000740 	.word	0x20000740
 80001fc:	00000000 	.word	0x00000000
 8000200:	080113d8 	.word	0x080113d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000744 	.word	0x20000744
 800021c:	080113d8 	.word	0x080113d8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <PIDController_Init>:


char Tst[128] = "";


void PIDController_Init(PIController *pid){
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	pid->prevError = 0.0f;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
	pid->Phase = 0.0f;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]

	pid->prevFrequency = 0.0f;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
	pid->Frequency = 0.0f;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	61da      	str	r2, [r3, #28]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	0000      	movs	r0, r0
	...

08000fc0 <LowPassFilter_init>:

float Deg2Rad(float degree){
	return degree * (PI/180.0);
}

void LowPassFilter_init(Filter *filt){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	double dt = filt->SampleRate; //Initializes dt value
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fae3 	bl	8000598 <__aeabi_f2d>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double RC = 1.0 / (2.0 * PI * filt->cutOffFrequency); //finds the RC value
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fada 	bl	8000598 <__aeabi_f2d>
 8000fe4:	a315      	add	r3, pc, #84	@ (adr r3, 800103c <LowPassFilter_init+0x7c>)
 8000fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fea:	f7ff fb2d 	bl	8000648 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	f04f 0000 	mov.w	r0, #0
 8000ff6:	4910      	ldr	r1, [pc, #64]	@ (8001038 <LowPassFilter_init+0x78>)
 8000ff8:	f7ff fc50 	bl	800089c <__aeabi_ddiv>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	e9c7 2302 	strd	r2, r3, [r7, #8]

	filt->alpha = dt / (dt + RC); //calculates the alpha value for future calculations
 8001004:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001008:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800100c:	f7ff f966 	bl	80002dc <__adddf3>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001018:	f7ff fc40 	bl	800089c <__aeabi_ddiv>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fde8 	bl	8000bf8 <__aeabi_d2f>
 8001028:	4602      	mov	r2, r0
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	609a      	str	r2, [r3, #8]
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	3ff00000 	.word	0x3ff00000
 800103c:	54524550 	.word	0x54524550
 8001040:	401921fb 	.word	0x401921fb
 8001044:	00000000 	.word	0x00000000

08001048 <LowPassFilter2ndOrder_init>:
    filt->prevOutput = filt->output;

    return filt->output;
}

void LowPassFilter2ndOrder_init(Filter2ndOrder *filt) {
 8001048:	b5b0      	push	{r4, r5, r7, lr}
 800104a:	b092      	sub	sp, #72	@ 0x48
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    double dt = filt->SampleRate;        // Sampling time
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001056:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double omega = 2.0 * PI * filt->cutOffFrequency; // Angular frequency
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001060:	a375      	add	r3, pc, #468	@ (adr r3, 8001238 <LowPassFilter2ndOrder_init+0x1f0>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	f7ff faef 	bl	8000648 <__aeabi_dmul>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double zeta = 0.95; // Damping factor, can be adjusted
 8001072:	a373      	add	r3, pc, #460	@ (adr r3, 8001240 <LowPassFilter2ndOrder_init+0x1f8>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30


    // Calculate coefficients for the bilinear transform
    double A = omega * omega;
 800107c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001080:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001084:	f7ff fae0 	bl	8000648 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double B = 2.0 * zeta * omega;
 8001090:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	f7ff f920 	bl	80002dc <__adddf3>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80010a4:	f7ff fad0 	bl	8000648 <__aeabi_dmul>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double C = 4.0 / (dt * dt) + 2.0 * B / dt + A;
 80010b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80010b4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80010b8:	f7ff fac6 	bl	8000648 <__aeabi_dmul>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	f04f 0000 	mov.w	r0, #0
 80010c4:	495a      	ldr	r1, [pc, #360]	@ (8001230 <LowPassFilter2ndOrder_init+0x1e8>)
 80010c6:	f7ff fbe9 	bl	800089c <__aeabi_ddiv>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4614      	mov	r4, r2
 80010d0:	461d      	mov	r5, r3
 80010d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	f7ff f8ff 	bl	80002dc <__adddf3>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80010ea:	f7ff fbd7 	bl	800089c <__aeabi_ddiv>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4620      	mov	r0, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	f7ff f8f1 	bl	80002dc <__adddf3>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001102:	f7ff f8eb 	bl	80002dc <__adddf3>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double D = 2.0 * A - 8.0 / (dt * dt);
 800110e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	f7ff f8e1 	bl	80002dc <__adddf3>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4614      	mov	r4, r2
 8001120:	461d      	mov	r5, r3
 8001122:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001126:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800112a:	f7ff fa8d 	bl	8000648 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	493f      	ldr	r1, [pc, #252]	@ (8001234 <LowPassFilter2ndOrder_init+0x1ec>)
 8001138:	f7ff fbb0 	bl	800089c <__aeabi_ddiv>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4620      	mov	r0, r4
 8001142:	4629      	mov	r1, r5
 8001144:	f7ff f8c8 	bl	80002d8 <__aeabi_dsub>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double E = 4.0 / (dt * dt) - 2.0 * B / dt + A;
 8001150:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001154:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001158:	f7ff fa76 	bl	8000648 <__aeabi_dmul>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	f04f 0000 	mov.w	r0, #0
 8001164:	4932      	ldr	r1, [pc, #200]	@ (8001230 <LowPassFilter2ndOrder_init+0x1e8>)
 8001166:	f7ff fb99 	bl	800089c <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4614      	mov	r4, r2
 8001170:	461d      	mov	r5, r3
 8001172:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	f7ff f8af 	bl	80002dc <__adddf3>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800118a:	f7ff fb87 	bl	800089c <__aeabi_ddiv>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4620      	mov	r0, r4
 8001194:	4629      	mov	r1, r5
 8001196:	f7ff f89f 	bl	80002d8 <__aeabi_dsub>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80011a2:	f7ff f89b 	bl	80002dc <__adddf3>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // Normalize coefficients
    filt->a1 = A / C;
 80011ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80011b6:	f7ff fb71 	bl	800089c <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	e9c1 2300 	strd	r2, r3, [r1]
    filt->a2 = 2.0 * A / C;
 80011c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	f7ff f886 	bl	80002dc <__adddf3>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011dc:	f7ff fb5e 	bl	800089c <__aeabi_ddiv>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    filt->a3 = filt->a1;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    filt->b1 = D / C;
 80011f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011fe:	f7ff fb4d 	bl	800089c <__aeabi_ddiv>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	e9c1 2306 	strd	r2, r3, [r1, #24]
    filt->b2 = E / C;
 800120c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001210:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001214:	f7ff fb42 	bl	800089c <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8001222:	bf00      	nop
 8001224:	3748      	adds	r7, #72	@ 0x48
 8001226:	46bd      	mov	sp, r7
 8001228:	bdb0      	pop	{r4, r5, r7, pc}
 800122a:	bf00      	nop
 800122c:	f3af 8000 	nop.w
 8001230:	40100000 	.word	0x40100000
 8001234:	40200000 	.word	0x40200000
 8001238:	54524550 	.word	0x54524550
 800123c:	401921fb 	.word	0x401921fb
 8001240:	66666666 	.word	0x66666666
 8001244:	3fee6666 	.word	0x3fee6666

08001248 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001252:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001254:	4907      	ldr	r1, [pc, #28]	@ (8001274 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4313      	orrs	r3, r2
 800125a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800125c:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800125e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4013      	ands	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	40021000 	.word	0x40021000

08001278 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001282:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001284:	4907      	ldr	r1, [pc, #28]	@ (80012a4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4313      	orrs	r3, r2
 800128a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800128c:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <LL_APB1_GRP2_EnableClock+0x2c>)
 800128e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4013      	ands	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001296:	68fb      	ldr	r3, [r7, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	40021000 	.word	0x40021000

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012ac:	b08a      	sub	sp, #40	@ 0x28
 80012ae:	af08      	add	r7, sp, #32

  /* USER CODE BEGIN 1 */

	PIDController_Init(&pid);
 80012b0:	4858      	ldr	r0, [pc, #352]	@ (8001414 <main+0x16c>)
 80012b2:	f7ff fe69 	bl	8000f88 <PIDController_Init>
	LowPassFilter_init(&filt);
 80012b6:	4858      	ldr	r0, [pc, #352]	@ (8001418 <main+0x170>)
 80012b8:	f7ff fe82 	bl	8000fc0 <LowPassFilter_init>
	LowPassFilter2ndOrder_init(&filter2nd);
 80012bc:	4857      	ldr	r0, [pc, #348]	@ (800141c <main+0x174>)
 80012be:	f7ff fec3 	bl	8001048 <LowPassFilter2ndOrder_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c2:	f001 f978 	bl	80025b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c6:	f000 f8cb 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ca:	f000 fbeb 	bl	8001aa4 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ce:	f000 fbbf 	bl	8001a50 <MX_DMA_Init>
  MX_ADC1_Init();
 80012d2:	f000 f915 	bl	8001500 <MX_ADC1_Init>
  MX_I2C1_Init();
 80012d6:	f000 f9bd 	bl	8001654 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80012da:	f000 f9fb 	bl	80016d4 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 80012de:	f000 fa43 	bl	8001768 <MX_TIM3_Init>
  MX_UCPD1_Init();
 80012e2:	f000 fb87 	bl	80019f4 <MX_UCPD1_Init>
  MX_TIM7_Init();
 80012e6:	f000 fb03 	bl	80018f0 <MX_TIM7_Init>
  MX_TIM16_Init();
 80012ea:	f000 fb37 	bl	800195c <MX_TIM16_Init>
  MX_TIM6_Init();
 80012ee:	f000 fac9 	bl	8001884 <MX_TIM6_Init>
  MX_USB_Device_Init();
 80012f2:	f00c fd1f 	bl	800dd34 <MX_USB_Device_Init>
  MX_TIM17_Init();
 80012f6:	f000 fb57 	bl	80019a8 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  __HAL_RCC_TIM7_CLK_ENABLE();
 80012fa:	4b49      	ldr	r3, [pc, #292]	@ (8001420 <main+0x178>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fe:	4a48      	ldr	r2, [pc, #288]	@ (8001420 <main+0x178>)
 8001300:	f043 0320 	orr.w	r3, r3, #32
 8001304:	6593      	str	r3, [r2, #88]	@ 0x58
 8001306:	4b46      	ldr	r3, [pc, #280]	@ (8001420 <main+0x178>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130a:	f003 0320 	and.w	r3, r3, #32
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  HAL_TIM_Base_Start_IT(&htim6);
 8001312:	4844      	ldr	r0, [pc, #272]	@ (8001424 <main+0x17c>)
 8001314:	f006 faea 	bl	80078ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001318:	4843      	ldr	r0, [pc, #268]	@ (8001428 <main+0x180>)
 800131a:	f006 fae7 	bl	80078ec <HAL_TIM_Base_Start_IT>

  PeriodCounter4Bench = CounterBenchPeriod(frequency);
 800131e:	4b43      	ldr	r3, [pc, #268]	@ (800142c <main+0x184>)
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	eeb0 0a67 	vmov.f32	s0, s15
 8001328:	f000 fd6a 	bl	8001e00 <CounterBenchPeriod>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b3f      	ldr	r3, [pc, #252]	@ (8001430 <main+0x188>)
 8001332:	701a      	strb	r2, [r3, #0]
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001334:	4b3a      	ldr	r3, [pc, #232]	@ (8001420 <main+0x178>)
 8001336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001338:	4a39      	ldr	r2, [pc, #228]	@ (8001420 <main+0x178>)
 800133a:	f043 0320 	orr.w	r3, r3, #32
 800133e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001340:	4b37      	ldr	r3, [pc, #220]	@ (8001420 <main+0x178>)
 8001342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001344:	f003 0320 	and.w	r3, r3, #32
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	683b      	ldr	r3, [r7, #0]

 //HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUF_SIZE);
 800134c:	2204      	movs	r2, #4
 800134e:	4939      	ldr	r1, [pc, #228]	@ (8001434 <main+0x18c>)
 8001350:	4839      	ldr	r0, [pc, #228]	@ (8001438 <main+0x190>)
 8001352:	f001 fe21 	bl	8002f98 <HAL_ADC_Start_DMA>

  // Start PWM on Timer 3 Channels 1, 2, and 4
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // PA6 (Channel 1)
 8001356:	2100      	movs	r1, #0
 8001358:	4838      	ldr	r0, [pc, #224]	@ (800143c <main+0x194>)
 800135a:	f006 fb93 	bl	8007a84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // PA7 (Channel 2)
 800135e:	2104      	movs	r1, #4
 8001360:	4836      	ldr	r0, [pc, #216]	@ (800143c <main+0x194>)
 8001362:	f006 fb8f 	bl	8007a84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // PB1 (Channel 4)
 8001366:	210c      	movs	r1, #12
 8001368:	4834      	ldr	r0, [pc, #208]	@ (800143c <main+0x194>)
 800136a:	f006 fb8b 	bl	8007a84 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		//used for calcutaing the real frequency
		  RealFrequeny = 1000000.0f/(diff_tick);
 800136e:	4b34      	ldr	r3, [pc, #208]	@ (8001440 <main+0x198>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800137a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001444 <main+0x19c>
 800137e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001382:	4b31      	ldr	r3, [pc, #196]	@ (8001448 <main+0x1a0>)
 8001384:	edc3 7a00 	vstr	s15, [r3]


		 //sprintf(message, "%.2f \t %u \t %.2f \t %.2f \t \r\n",  pid.Phase, CurrentSample, pid.Frequency/360, frequency);
		 //sprintf(message, "%.2f\t %.2f \r\n",  pid.Phase, error);
		 //sprintf(message, "Alpha: %.2f \t Beta: %.2f \t \r\n",ClarkVal.Alpha, ClarkVal.Beta);
		 sprintf(message, "%.3f \t %.3f \t  %.3f \t  %.3f \t %lu \t \r\n", filteroutput, pid.Frequency/360.0f, RealFrequeny , pid.Phase, CurrentSample);
 8001388:	4b30      	ldr	r3, [pc, #192]	@ (800144c <main+0x1a4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f903 	bl	8000598 <__aeabi_f2d>
 8001392:	4682      	mov	sl, r0
 8001394:	468b      	mov	fp, r1
 8001396:	4b1f      	ldr	r3, [pc, #124]	@ (8001414 <main+0x16c>)
 8001398:	edd3 7a07 	vldr	s15, [r3, #28]
 800139c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001450 <main+0x1a8>
 80013a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013a4:	ee16 0a90 	vmov	r0, s13
 80013a8:	f7ff f8f6 	bl	8000598 <__aeabi_f2d>
 80013ac:	4604      	mov	r4, r0
 80013ae:	460d      	mov	r5, r1
 80013b0:	4b25      	ldr	r3, [pc, #148]	@ (8001448 <main+0x1a0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f8ef 	bl	8000598 <__aeabi_f2d>
 80013ba:	4680      	mov	r8, r0
 80013bc:	4689      	mov	r9, r1
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <main+0x16c>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8e8 	bl	8000598 <__aeabi_f2d>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4921      	ldr	r1, [pc, #132]	@ (8001454 <main+0x1ac>)
 80013ce:	8809      	ldrh	r1, [r1, #0]
 80013d0:	9106      	str	r1, [sp, #24]
 80013d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013d6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80013da:	e9cd 4500 	strd	r4, r5, [sp]
 80013de:	4652      	mov	r2, sl
 80013e0:	465b      	mov	r3, fp
 80013e2:	491d      	ldr	r1, [pc, #116]	@ (8001458 <main+0x1b0>)
 80013e4:	481d      	ldr	r0, [pc, #116]	@ (800145c <main+0x1b4>)
 80013e6:	f00d fec9 	bl	800f17c <siprintf>

		  //Voltage_ADC_offset = adc_buffer[0];

		 // sprintf(message, "%lu \t %lu \t %lu \t %lu  \t \r\n", adc_buffer[0], adc_buffer[1], adc_buffer[2], adc_buffer[3]);

		 CDC_Transmit_FS(message, strlen(message));
 80013ea:	481c      	ldr	r0, [pc, #112]	@ (800145c <main+0x1b4>)
 80013ec:	f7fe ff68 	bl	80002c0 <strlen>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4619      	mov	r1, r3
 80013f4:	4819      	ldr	r0, [pc, #100]	@ (800145c <main+0x1b4>)
 80013f6:	f00c fd5b 	bl	800deb0 <CDC_Transmit_FS>

		 PeriodCounter4Bench = CounterBenchPeriod(frequency);
 80013fa:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <main+0x184>)
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	eeb0 0a67 	vmov.f32	s0, s15
 8001404:	f000 fcfc 	bl	8001e00 <CounterBenchPeriod>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <main+0x188>)
 800140e:	701a      	strb	r2, [r3, #0]
  {
 8001410:	bf00      	nop
 8001412:	e7ac      	b.n	800136e <main+0xc6>
 8001414:	200002d0 	.word	0x200002d0
 8001418:	200002f4 	.word	0x200002f4
 800141c:	20000308 	.word	0x20000308
 8001420:	40021000 	.word	0x40021000
 8001424:	20000990 	.word	0x20000990
 8001428:	200009dc 	.word	0x200009dc
 800142c:	20000360 	.word	0x20000360
 8001430:	20000774 	.word	0x20000774
 8001434:	200003e4 	.word	0x200003e4
 8001438:	20000790 	.word	0x20000790
 800143c:	20000944 	.word	0x20000944
 8001440:	20000784 	.word	0x20000784
 8001444:	49742400 	.word	0x49742400
 8001448:	2000078c 	.word	0x2000078c
 800144c:	20000770 	.word	0x20000770
 8001450:	43b40000 	.word	0x43b40000
 8001454:	20000776 	.word	0x20000776
 8001458:	080113f0 	.word	0x080113f0
 800145c:	20000364 	.word	0x20000364

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b094      	sub	sp, #80	@ 0x50
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0318 	add.w	r3, r7, #24
 800146a:	2238      	movs	r2, #56	@ 0x38
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f00d fee7 	bl	800f242 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001482:	2000      	movs	r0, #0
 8001484:	f005 fa08 	bl	8006898 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 8001488:	2323      	movs	r3, #35	@ 0x23
 800148a:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800148c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001490:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001492:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001498:	2340      	movs	r3, #64	@ 0x40
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800149c:	2301      	movs	r3, #1
 800149e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a0:	2302      	movs	r3, #2
 80014a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a4:	2303      	movs	r3, #3
 80014a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014ac:	2355      	movs	r3, #85	@ 0x55
 80014ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b0:	2302      	movs	r3, #2
 80014b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014bc:	f107 0318 	add.w	r3, r7, #24
 80014c0:	4618      	mov	r0, r3
 80014c2:	f005 fa9d 	bl	8006a00 <HAL_RCC_OscConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80014cc:	f000 fcc4 	bl	8001e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d0:	230f      	movs	r3, #15
 80014d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d4:	2303      	movs	r3, #3
 80014d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2104      	movs	r1, #4
 80014e8:	4618      	mov	r0, r3
 80014ea:	f005 fd9b 	bl	8007024 <HAL_RCC_ClockConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014f4:	f000 fcb0 	bl	8001e58 <Error_Handler>
  }
}
 80014f8:	bf00      	nop
 80014fa:	3750      	adds	r7, #80	@ 0x50
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	@ 0x30
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2220      	movs	r2, #32
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f00d fe92 	bl	800f242 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800151e:	4b48      	ldr	r3, [pc, #288]	@ (8001640 <MX_ADC1_Init+0x140>)
 8001520:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001524:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8001526:	4b46      	ldr	r3, [pc, #280]	@ (8001640 <MX_ADC1_Init+0x140>)
 8001528:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800152c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800152e:	4b44      	ldr	r3, [pc, #272]	@ (8001640 <MX_ADC1_Init+0x140>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001534:	4b42      	ldr	r3, [pc, #264]	@ (8001640 <MX_ADC1_Init+0x140>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800153a:	4b41      	ldr	r3, [pc, #260]	@ (8001640 <MX_ADC1_Init+0x140>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001540:	4b3f      	ldr	r3, [pc, #252]	@ (8001640 <MX_ADC1_Init+0x140>)
 8001542:	2201      	movs	r2, #1
 8001544:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001546:	4b3e      	ldr	r3, [pc, #248]	@ (8001640 <MX_ADC1_Init+0x140>)
 8001548:	2204      	movs	r2, #4
 800154a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800154c:	4b3c      	ldr	r3, [pc, #240]	@ (8001640 <MX_ADC1_Init+0x140>)
 800154e:	2200      	movs	r2, #0
 8001550:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001552:	4b3b      	ldr	r3, [pc, #236]	@ (8001640 <MX_ADC1_Init+0x140>)
 8001554:	2201      	movs	r2, #1
 8001556:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8001558:	4b39      	ldr	r3, [pc, #228]	@ (8001640 <MX_ADC1_Init+0x140>)
 800155a:	2204      	movs	r2, #4
 800155c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800155e:	4b38      	ldr	r3, [pc, #224]	@ (8001640 <MX_ADC1_Init+0x140>)
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001566:	4b36      	ldr	r3, [pc, #216]	@ (8001640 <MX_ADC1_Init+0x140>)
 8001568:	2200      	movs	r2, #0
 800156a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156c:	4b34      	ldr	r3, [pc, #208]	@ (8001640 <MX_ADC1_Init+0x140>)
 800156e:	2200      	movs	r2, #0
 8001570:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001572:	4b33      	ldr	r3, [pc, #204]	@ (8001640 <MX_ADC1_Init+0x140>)
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800157a:	4b31      	ldr	r3, [pc, #196]	@ (8001640 <MX_ADC1_Init+0x140>)
 800157c:	2200      	movs	r2, #0
 800157e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001580:	4b2f      	ldr	r3, [pc, #188]	@ (8001640 <MX_ADC1_Init+0x140>)
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001588:	482d      	ldr	r0, [pc, #180]	@ (8001640 <MX_ADC1_Init+0x140>)
 800158a:	f001 fac5 	bl	8002b18 <HAL_ADC_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001594:	f000 fc60 	bl	8001e58 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800159c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	4827      	ldr	r0, [pc, #156]	@ (8001640 <MX_ADC1_Init+0x140>)
 80015a4:	f002 fd50 	bl	8004048 <HAL_ADCEx_MultiModeConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80015ae:	f000 fc53 	bl	8001e58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015b2:	4b24      	ldr	r3, [pc, #144]	@ (8001644 <MX_ADC1_Init+0x144>)
 80015b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015b6:	2306      	movs	r3, #6
 80015b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80015ba:	2302      	movs	r3, #2
 80015bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015be:	237f      	movs	r3, #127	@ 0x7f
 80015c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015c2:	2304      	movs	r3, #4
 80015c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	481c      	ldr	r0, [pc, #112]	@ (8001640 <MX_ADC1_Init+0x140>)
 80015d0:	f001 ffd8 	bl	8003584 <HAL_ADC_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80015da:	f000 fc3d 	bl	8001e58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015de:	4b1a      	ldr	r3, [pc, #104]	@ (8001648 <MX_ADC1_Init+0x148>)
 80015e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015e2:	230c      	movs	r3, #12
 80015e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	4619      	mov	r1, r3
 80015ea:	4815      	ldr	r0, [pc, #84]	@ (8001640 <MX_ADC1_Init+0x140>)
 80015ec:	f001 ffca 	bl	8003584 <HAL_ADC_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80015f6:	f000 fc2f 	bl	8001e58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015fa:	4b14      	ldr	r3, [pc, #80]	@ (800164c <MX_ADC1_Init+0x14c>)
 80015fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015fe:	2312      	movs	r3, #18
 8001600:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4619      	mov	r1, r3
 8001606:	480e      	ldr	r0, [pc, #56]	@ (8001640 <MX_ADC1_Init+0x140>)
 8001608:	f001 ffbc 	bl	8003584 <HAL_ADC_ConfigChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001612:	f000 fc21 	bl	8001e58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001616:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <MX_ADC1_Init+0x150>)
 8001618:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800161a:	2318      	movs	r3, #24
 800161c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800161e:	2303      	movs	r3, #3
 8001620:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4619      	mov	r1, r3
 8001626:	4806      	ldr	r0, [pc, #24]	@ (8001640 <MX_ADC1_Init+0x140>)
 8001628:	f001 ffac 	bl	8003584 <HAL_ADC_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8001632:	f000 fc11 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3730      	adds	r7, #48	@ 0x30
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000790 	.word	0x20000790
 8001644:	08600004 	.word	0x08600004
 8001648:	0c900008 	.word	0x0c900008
 800164c:	10c00010 	.word	0x10c00010
 8001650:	04300002 	.word	0x04300002

08001654 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001658:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <MX_I2C1_Init+0x74>)
 800165a:	4a1c      	ldr	r2, [pc, #112]	@ (80016cc <MX_I2C1_Init+0x78>)
 800165c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 800165e:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <MX_I2C1_Init+0x74>)
 8001660:	4a1b      	ldr	r2, [pc, #108]	@ (80016d0 <MX_I2C1_Init+0x7c>)
 8001662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001664:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <MX_I2C1_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166a:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <MX_I2C1_Init+0x74>)
 800166c:	2201      	movs	r2, #1
 800166e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001670:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <MX_I2C1_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001676:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <MX_I2C1_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800167c:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <MX_I2C1_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <MX_I2C1_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001688:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <MX_I2C1_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800168e:	480e      	ldr	r0, [pc, #56]	@ (80016c8 <MX_I2C1_Init+0x74>)
 8001690:	f003 fa9a 	bl	8004bc8 <HAL_I2C_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800169a:	f000 fbdd 	bl	8001e58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800169e:	2100      	movs	r1, #0
 80016a0:	4809      	ldr	r0, [pc, #36]	@ (80016c8 <MX_I2C1_Init+0x74>)
 80016a2:	f003 fb2c 	bl	8004cfe <HAL_I2CEx_ConfigAnalogFilter>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016ac:	f000 fbd4 	bl	8001e58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016b0:	2100      	movs	r1, #0
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <MX_I2C1_Init+0x74>)
 80016b4:	f003 fb6e 	bl	8004d94 <HAL_I2CEx_ConfigDigitalFilter>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016be:	f000 fbcb 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000085c 	.word	0x2000085c
 80016cc:	40005400 	.word	0x40005400
 80016d0:	40b285c2 	.word	0x40b285c2

080016d4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80016d8:	4b21      	ldr	r3, [pc, #132]	@ (8001760 <MX_LPUART1_UART_Init+0x8c>)
 80016da:	4a22      	ldr	r2, [pc, #136]	@ (8001764 <MX_LPUART1_UART_Init+0x90>)
 80016dc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80016de:	4b20      	ldr	r3, [pc, #128]	@ (8001760 <MX_LPUART1_UART_Init+0x8c>)
 80016e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <MX_LPUART1_UART_Init+0x8c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <MX_LPUART1_UART_Init+0x8c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <MX_LPUART1_UART_Init+0x8c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <MX_LPUART1_UART_Init+0x8c>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <MX_LPUART1_UART_Init+0x8c>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001704:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <MX_LPUART1_UART_Init+0x8c>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <MX_LPUART1_UART_Init+0x8c>)
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001710:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <MX_LPUART1_UART_Init+0x8c>)
 8001712:	2200      	movs	r2, #0
 8001714:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001716:	4812      	ldr	r0, [pc, #72]	@ (8001760 <MX_LPUART1_UART_Init+0x8c>)
 8001718:	f007 fb56 	bl	8008dc8 <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001722:	f000 fb99 	bl	8001e58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001726:	2100      	movs	r1, #0
 8001728:	480d      	ldr	r0, [pc, #52]	@ (8001760 <MX_LPUART1_UART_Init+0x8c>)
 800172a:	f008 f8c1 	bl	80098b0 <HAL_UARTEx_SetTxFifoThreshold>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001734:	f000 fb90 	bl	8001e58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001738:	2100      	movs	r1, #0
 800173a:	4809      	ldr	r0, [pc, #36]	@ (8001760 <MX_LPUART1_UART_Init+0x8c>)
 800173c:	f008 f8f6 	bl	800992c <HAL_UARTEx_SetRxFifoThreshold>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001746:	f000 fb87 	bl	8001e58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_LPUART1_UART_Init+0x8c>)
 800174c:	f008 f877 	bl	800983e <HAL_UARTEx_DisableFifoMode>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001756:	f000 fb7f 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200008b0 	.word	0x200008b0
 8001764:	40008000 	.word	0x40008000

08001768 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08e      	sub	sp, #56	@ 0x38
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001788:	463b      	mov	r3, r7
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
 8001796:	615a      	str	r2, [r3, #20]
 8001798:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800179a:	4b38      	ldr	r3, [pc, #224]	@ (800187c <MX_TIM3_Init+0x114>)
 800179c:	4a38      	ldr	r2, [pc, #224]	@ (8001880 <MX_TIM3_Init+0x118>)
 800179e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 80017a0:	4b36      	ldr	r3, [pc, #216]	@ (800187c <MX_TIM3_Init+0x114>)
 80017a2:	2202      	movs	r2, #2
 80017a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a6:	4b35      	ldr	r3, [pc, #212]	@ (800187c <MX_TIM3_Init+0x114>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4094;
 80017ac:	4b33      	ldr	r3, [pc, #204]	@ (800187c <MX_TIM3_Init+0x114>)
 80017ae:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80017b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b4:	4b31      	ldr	r3, [pc, #196]	@ (800187c <MX_TIM3_Init+0x114>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ba:	4b30      	ldr	r3, [pc, #192]	@ (800187c <MX_TIM3_Init+0x114>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017c0:	482e      	ldr	r0, [pc, #184]	@ (800187c <MX_TIM3_Init+0x114>)
 80017c2:	f006 f83b 	bl	800783c <HAL_TIM_Base_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80017cc:	f000 fb44 	bl	8001e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017da:	4619      	mov	r1, r3
 80017dc:	4827      	ldr	r0, [pc, #156]	@ (800187c <MX_TIM3_Init+0x114>)
 80017de:	f006 fcb5 	bl	800814c <HAL_TIM_ConfigClockSource>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80017e8:	f000 fb36 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017ec:	4823      	ldr	r0, [pc, #140]	@ (800187c <MX_TIM3_Init+0x114>)
 80017ee:	f006 f8e7 	bl	80079c0 <HAL_TIM_PWM_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80017f8:	f000 fb2e 	bl	8001e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	4619      	mov	r1, r3
 800180a:	481c      	ldr	r0, [pc, #112]	@ (800187c <MX_TIM3_Init+0x114>)
 800180c:	f007 fa14 	bl	8008c38 <HAL_TIMEx_MasterConfigSynchronization>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001816:	f000 fb1f 	bl	8001e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800181a:	2360      	movs	r3, #96	@ 0x60
 800181c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800182a:	463b      	mov	r3, r7
 800182c:	2200      	movs	r2, #0
 800182e:	4619      	mov	r1, r3
 8001830:	4812      	ldr	r0, [pc, #72]	@ (800187c <MX_TIM3_Init+0x114>)
 8001832:	f006 fb77 	bl	8007f24 <HAL_TIM_PWM_ConfigChannel>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800183c:	f000 fb0c 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001840:	463b      	mov	r3, r7
 8001842:	2204      	movs	r2, #4
 8001844:	4619      	mov	r1, r3
 8001846:	480d      	ldr	r0, [pc, #52]	@ (800187c <MX_TIM3_Init+0x114>)
 8001848:	f006 fb6c 	bl	8007f24 <HAL_TIM_PWM_ConfigChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001852:	f000 fb01 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001856:	463b      	mov	r3, r7
 8001858:	220c      	movs	r2, #12
 800185a:	4619      	mov	r1, r3
 800185c:	4807      	ldr	r0, [pc, #28]	@ (800187c <MX_TIM3_Init+0x114>)
 800185e:	f006 fb61 	bl	8007f24 <HAL_TIM_PWM_ConfigChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001868:	f000 faf6 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800186c:	4803      	ldr	r0, [pc, #12]	@ (800187c <MX_TIM3_Init+0x114>)
 800186e:	f000 fce1 	bl	8002234 <HAL_TIM_MspPostInit>

}
 8001872:	bf00      	nop
 8001874:	3738      	adds	r7, #56	@ 0x38
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000944 	.word	0x20000944
 8001880:	40000400 	.word	0x40000400

08001884 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001894:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <MX_TIM6_Init+0x64>)
 8001896:	4a15      	ldr	r2, [pc, #84]	@ (80018ec <MX_TIM6_Init+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170-1;
 800189a:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <MX_TIM6_Init+0x64>)
 800189c:	22a9      	movs	r2, #169	@ 0xa9
 800189e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <MX_TIM6_Init+0x64>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 39;
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <MX_TIM6_Init+0x64>)
 80018a8:	2227      	movs	r2, #39	@ 0x27
 80018aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <MX_TIM6_Init+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018b2:	480d      	ldr	r0, [pc, #52]	@ (80018e8 <MX_TIM6_Init+0x64>)
 80018b4:	f005 ffc2 	bl	800783c <HAL_TIM_Base_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80018be:	f000 facb 	bl	8001e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	4806      	ldr	r0, [pc, #24]	@ (80018e8 <MX_TIM6_Init+0x64>)
 80018d0:	f007 f9b2 	bl	8008c38 <HAL_TIMEx_MasterConfigSynchronization>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80018da:	f000 fabd 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000990 	.word	0x20000990
 80018ec:	40001000 	.word	0x40001000

080018f0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <MX_TIM7_Init+0x64>)
 8001902:	4a15      	ldr	r2, [pc, #84]	@ (8001958 <MX_TIM7_Init+0x68>)
 8001904:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170-1;
 8001906:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <MX_TIM7_Init+0x64>)
 8001908:	22a9      	movs	r2, #169	@ 0xa9
 800190a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <MX_TIM7_Init+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1;
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <MX_TIM7_Init+0x64>)
 8001914:	2201      	movs	r2, #1
 8001916:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001918:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <MX_TIM7_Init+0x64>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800191e:	480d      	ldr	r0, [pc, #52]	@ (8001954 <MX_TIM7_Init+0x64>)
 8001920:	f005 ff8c 	bl	800783c <HAL_TIM_Base_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800192a:	f000 fa95 	bl	8001e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	4619      	mov	r1, r3
 800193a:	4806      	ldr	r0, [pc, #24]	@ (8001954 <MX_TIM7_Init+0x64>)
 800193c:	f007 f97c 	bl	8008c38 <HAL_TIMEx_MasterConfigSynchronization>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001946:	f000 fa87 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200009dc 	.word	0x200009dc
 8001958:	40001400 	.word	0x40001400

0800195c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001960:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <MX_TIM16_Init+0x44>)
 8001962:	4a10      	ldr	r2, [pc, #64]	@ (80019a4 <MX_TIM16_Init+0x48>)
 8001964:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 85-1;
 8001966:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <MX_TIM16_Init+0x44>)
 8001968:	2254      	movs	r2, #84	@ 0x54
 800196a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196c:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <MX_TIM16_Init+0x44>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1;
 8001972:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <MX_TIM16_Init+0x44>)
 8001974:	2201      	movs	r2, #1
 8001976:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001978:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <MX_TIM16_Init+0x44>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800197e:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <MX_TIM16_Init+0x44>)
 8001980:	2200      	movs	r2, #0
 8001982:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001984:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <MX_TIM16_Init+0x44>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <MX_TIM16_Init+0x44>)
 800198c:	f005 ff56 	bl	800783c <HAL_TIM_Base_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001996:	f000 fa5f 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000a28 	.word	0x20000a28
 80019a4:	40014400 	.word	0x40014400

080019a8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <MX_TIM17_Init+0x44>)
 80019ae:	4a10      	ldr	r2, [pc, #64]	@ (80019f0 <MX_TIM17_Init+0x48>)
 80019b0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <MX_TIM17_Init+0x44>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <MX_TIM17_Init+0x44>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <MX_TIM17_Init+0x44>)
 80019c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019c4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <MX_TIM17_Init+0x44>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80019cc:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <MX_TIM17_Init+0x44>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <MX_TIM17_Init+0x44>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80019d8:	4804      	ldr	r0, [pc, #16]	@ (80019ec <MX_TIM17_Init+0x44>)
 80019da:	f005 ff2f 	bl	800783c <HAL_TIM_Base_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80019e4:	f000 fa38 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000a74 	.word	0x20000a74
 80019f0:	40014800 	.word	0x40014800

080019f4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fa:	463b      	mov	r3, r7
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
 8001a08:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001a0a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a0e:	f7ff fc33 	bl	8001278 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001a12:	2002      	movs	r0, #2
 8001a14:	f7ff fc18 	bl	8001248 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001a18:	2310      	movs	r3, #16
 8001a1a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a24:	463b      	mov	r3, r7
 8001a26:	4619      	mov	r1, r3
 8001a28:	4808      	ldr	r0, [pc, #32]	@ (8001a4c <MX_UCPD1_Init+0x58>)
 8001a2a:	f008 f956 	bl	8009cda <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001a2e:	2340      	movs	r3, #64	@ 0x40
 8001a30:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a32:	2303      	movs	r3, #3
 8001a34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4803      	ldr	r0, [pc, #12]	@ (8001a4c <MX_UCPD1_Init+0x58>)
 8001a40:	f008 f94b 	bl	8009cda <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	48000400 	.word	0x48000400

08001a50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a56:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <MX_DMA_Init+0x50>)
 8001a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a5a:	4a11      	ldr	r2, [pc, #68]	@ (8001aa0 <MX_DMA_Init+0x50>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a62:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <MX_DMA_Init+0x50>)
 8001a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <MX_DMA_Init+0x50>)
 8001a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a72:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa0 <MX_DMA_Init+0x50>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a7a:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <MX_DMA_Init+0x50>)
 8001a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	200b      	movs	r0, #11
 8001a8c:	f002 fc5b 	bl	8004346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a90:	200b      	movs	r0, #11
 8001a92:	f002 fc72 	bl	800437a <HAL_NVIC_EnableIRQ>

}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	@ 0x28
 8001aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aba:	4b59      	ldr	r3, [pc, #356]	@ (8001c20 <MX_GPIO_Init+0x17c>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abe:	4a58      	ldr	r2, [pc, #352]	@ (8001c20 <MX_GPIO_Init+0x17c>)
 8001ac0:	f043 0304 	orr.w	r3, r3, #4
 8001ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac6:	4b56      	ldr	r3, [pc, #344]	@ (8001c20 <MX_GPIO_Init+0x17c>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ad2:	4b53      	ldr	r3, [pc, #332]	@ (8001c20 <MX_GPIO_Init+0x17c>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	4a52      	ldr	r2, [pc, #328]	@ (8001c20 <MX_GPIO_Init+0x17c>)
 8001ad8:	f043 0320 	orr.w	r3, r3, #32
 8001adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ade:	4b50      	ldr	r3, [pc, #320]	@ (8001c20 <MX_GPIO_Init+0x17c>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae2:	f003 0320 	and.w	r3, r3, #32
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	4b4d      	ldr	r3, [pc, #308]	@ (8001c20 <MX_GPIO_Init+0x17c>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	4a4c      	ldr	r2, [pc, #304]	@ (8001c20 <MX_GPIO_Init+0x17c>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af6:	4b4a      	ldr	r3, [pc, #296]	@ (8001c20 <MX_GPIO_Init+0x17c>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b02:	4b47      	ldr	r3, [pc, #284]	@ (8001c20 <MX_GPIO_Init+0x17c>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b06:	4a46      	ldr	r2, [pc, #280]	@ (8001c20 <MX_GPIO_Init+0x17c>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b0e:	4b44      	ldr	r3, [pc, #272]	@ (8001c20 <MX_GPIO_Init+0x17c>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PC13_LED0_GPIO_Port, PC13_LED0_Pin, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b20:	4840      	ldr	r0, [pc, #256]	@ (8001c24 <MX_GPIO_Init+0x180>)
 8001b22:	f003 f839 	bl	8004b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b30:	f003 f832 	bl	8004b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13_LED0_Pin */
  GPIO_InitStruct.Pin = PC13_LED0_Pin;
 8001b34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PC13_LED0_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4835      	ldr	r0, [pc, #212]	@ (8001c24 <MX_GPIO_Init+0x180>)
 8001b4e:	f002 fea1 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b58:	2312      	movs	r3, #18
 8001b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b64:	2306      	movs	r3, #6
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	482e      	ldr	r0, [pc, #184]	@ (8001c28 <MX_GPIO_Init+0x184>)
 8001b70:	f002 fe90 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b86:	2306      	movs	r3, #6
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4825      	ldr	r0, [pc, #148]	@ (8001c28 <MX_GPIO_Init+0x184>)
 8001b92:	f002 fe7f 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001ba8:	2304      	movs	r3, #4
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	481d      	ldr	r0, [pc, #116]	@ (8001c28 <MX_GPIO_Init+0x184>)
 8001bb4:	f002 fe6e 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001bb8:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001bca:	2306      	movs	r3, #6
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd8:	f002 fe5c 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bf8:	f002 fe4c 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13_KEY0_Pin */
  GPIO_InitStruct.Pin = PC13_KEY0_Pin;
 8001bfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PC13_KEY0_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4804      	ldr	r0, [pc, #16]	@ (8001c24 <MX_GPIO_Init+0x180>)
 8001c12:	f002 fe3f 	bl	8004894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c16:	bf00      	nop
 8001c18:	3728      	adds	r7, #40	@ 0x28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	48000800 	.word	0x48000800
 8001c28:	48000400 	.word	0x48000400

08001c2c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

	 if(htim->Instance == TIM7){
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a61      	ldr	r2, [pc, #388]	@ (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	f040 8097 	bne.w	8001d6e <HAL_TIM_PeriodElapsedCallback+0x142>
		   Timer16CyclesCounter++;
 8001c40:	4b60      	ldr	r3, [pc, #384]	@ (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	3301      	adds	r3, #1
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b5e      	ldr	r3, [pc, #376]	@ (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001c4a:	701a      	strb	r2, [r3, #0]


		   if(Timer16CyclesCounter > PeriodCounter4Bench-1){
 8001c4c:	4b5e      	ldr	r3, [pc, #376]	@ (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4b5c      	ldr	r3, [pc, #368]	@ (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d86b      	bhi.n	8001d32 <HAL_TIM_PeriodElapsedCallback+0x106>
		      CurrentSample++;
 8001c5a:	4b5c      	ldr	r3, [pc, #368]	@ (8001dcc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b5a      	ldr	r3, [pc, #360]	@ (8001dcc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001c64:	801a      	strh	r2, [r3, #0]


		      if(CurrentSample > sine_points-1) {
 8001c66:	4b59      	ldr	r3, [pc, #356]	@ (8001dcc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8001c6e:	d32b      	bcc.n	8001cc8 <HAL_TIM_PeriodElapsedCallback+0x9c>
		    	  CurrentSample = 0;
 8001c70:	4b56      	ldr	r3, [pc, #344]	@ (8001dcc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	801a      	strh	r2, [r3, #0]

		    	  end_tick = current_tick;
 8001c76:	4b56      	ldr	r3, [pc, #344]	@ (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a56      	ldr	r2, [pc, #344]	@ (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001c7c:	6013      	str	r3, [r2, #0]
		    	  current_tick = us; //HAL_GetTick();
 8001c7e:	4b56      	ldr	r3, [pc, #344]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a53      	ldr	r2, [pc, #332]	@ (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001c84:	6013      	str	r3, [r2, #0]

		    	  if(end_tick < current_tick){
 8001c86:	4b53      	ldr	r3, [pc, #332]	@ (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4b51      	ldr	r3, [pc, #324]	@ (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d207      	bcs.n	8001ca2 <HAL_TIM_PeriodElapsedCallback+0x76>
		    		  diff_tick = current_tick - end_tick;
 8001c92:	4b4f      	ldr	r3, [pc, #316]	@ (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4b4f      	ldr	r3, [pc, #316]	@ (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	4a4f      	ldr	r2, [pc, #316]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	e012      	b.n	8001cc8 <HAL_TIM_PeriodElapsedCallback+0x9c>
		    	  }else if(end_tick == current_tick){
 8001ca2:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d104      	bne.n	8001cb8 <HAL_TIM_PeriodElapsedCallback+0x8c>
		    		  diff_tick = diff_tick;
 8001cae:	4b4b      	ldr	r3, [pc, #300]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a4a      	ldr	r2, [pc, #296]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e007      	b.n	8001cc8 <HAL_TIM_PeriodElapsedCallback+0x9c>
		    	  }else{
		    		  diff_tick = 0xffffffff - end_tick + current_tick ;
 8001cb8:	4b45      	ldr	r3, [pc, #276]	@ (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b45      	ldr	r3, [pc, #276]	@ (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	4a45      	ldr	r2, [pc, #276]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001cc6:	6013      	str	r3, [r2, #0]
		    	  }

		      }


		      Timer16CyclesCounter = 0;
 8001cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]

		      MeineBench.SineA = sine_values[CurrentSample];
 8001cce:	4b3f      	ldr	r3, [pc, #252]	@ (8001dcc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b42      	ldr	r3, [pc, #264]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001cd6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001cda:	4b42      	ldr	r3, [pc, #264]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001cdc:	801a      	strh	r2, [r3, #0]

		      if(CurrentSample+119 > sine_points-1){
 8001cde:	4b3b      	ldr	r3, [pc, #236]	@ (8001dcc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	2bf0      	cmp	r3, #240	@ 0xf0
 8001ce4:	d908      	bls.n	8001cf8 <HAL_TIM_PeriodElapsedCallback+0xcc>
		         MeineBench.SineB = sine_values[CurrentSample - 241];
 8001ce6:	4b39      	ldr	r3, [pc, #228]	@ (8001dcc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	3bf1      	subs	r3, #241	@ 0xf1
 8001cec:	4a3c      	ldr	r2, [pc, #240]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001cee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001cf2:	4b3c      	ldr	r3, [pc, #240]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001cf4:	805a      	strh	r2, [r3, #2]
 8001cf6:	e007      	b.n	8001d08 <HAL_TIM_PeriodElapsedCallback+0xdc>
		      }else{
		         MeineBench.SineB = sine_values[CurrentSample + 119];
 8001cf8:	4b34      	ldr	r3, [pc, #208]	@ (8001dcc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	3377      	adds	r3, #119	@ 0x77
 8001cfe:	4a38      	ldr	r2, [pc, #224]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001d00:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d04:	4b37      	ldr	r3, [pc, #220]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001d06:	805a      	strh	r2, [r3, #2]
		      }

		      if(CurrentSample+239 > sine_points-1){
 8001d08:	4b30      	ldr	r3, [pc, #192]	@ (8001dcc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	2b78      	cmp	r3, #120	@ 0x78
 8001d0e:	d908      	bls.n	8001d22 <HAL_TIM_PeriodElapsedCallback+0xf6>
		         MeineBench.SineC = sine_values[CurrentSample - 121];
 8001d10:	4b2e      	ldr	r3, [pc, #184]	@ (8001dcc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	3b79      	subs	r3, #121	@ 0x79
 8001d16:	4a32      	ldr	r2, [pc, #200]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001d18:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d1c:	4b31      	ldr	r3, [pc, #196]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001d1e:	809a      	strh	r2, [r3, #4]
 8001d20:	e007      	b.n	8001d32 <HAL_TIM_PeriodElapsedCallback+0x106>

		      }else{
		         MeineBench.SineC = sine_values[CurrentSample + 239];
 8001d22:	4b2a      	ldr	r3, [pc, #168]	@ (8001dcc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	33ef      	adds	r3, #239	@ 0xef
 8001d28:	4a2d      	ldr	r2, [pc, #180]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001d2a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001d30:	809a      	strh	r2, [r3, #4]
		   }
		   */



		   counter_for_DMA_activation++;
 8001d32:	4b2d      	ldr	r3, [pc, #180]	@ (8001de8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	3301      	adds	r3, #1
 8001d38:	4a2b      	ldr	r2, [pc, #172]	@ (8001de8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001d3a:	6013      	str	r3, [r2, #0]
		   if(counter_for_DMA_activation > 5){
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001de8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	dd05      	ble.n	8001d50 <HAL_TIM_PeriodElapsedCallback+0x124>
			   counter_for_DMA_activation = 0;
 8001d44:	4b28      	ldr	r3, [pc, #160]	@ (8001de8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
			   HAL_ADC_Start(&hadc1);
 8001d4a:	4828      	ldr	r0, [pc, #160]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001d4c:	f001 f868 	bl	8002e20 <HAL_ADC_Start>

		   }

			 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, MeineBench.SineA);
 8001d50:	4b24      	ldr	r3, [pc, #144]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001d52:	881a      	ldrh	r2, [r3, #0]
 8001d54:	4b26      	ldr	r3, [pc, #152]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	635a      	str	r2, [r3, #52]	@ 0x34
			 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MeineBench.SineB);
 8001d5a:	4b22      	ldr	r3, [pc, #136]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001d5c:	885a      	ldrh	r2, [r3, #2]
 8001d5e:	4b24      	ldr	r3, [pc, #144]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	639a      	str	r2, [r3, #56]	@ 0x38
			 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, MeineBench.SineC);
 8001d64:	4b1f      	ldr	r3, [pc, #124]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001d66:	889a      	ldrh	r2, [r3, #4]
 8001d68:	4b21      	ldr	r3, [pc, #132]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	641a      	str	r2, [r3, #64]	@ 0x40


	 }


	 if(htim->Instance == TIM6){
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a20      	ldr	r2, [pc, #128]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d11f      	bne.n	8001db8 <HAL_TIM_PeriodElapsedCallback+0x18c>
		 us += 40;
 8001d78:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3328      	adds	r3, #40	@ 0x28
 8001d7e:	4a16      	ldr	r2, [pc, #88]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001d80:	6013      	str	r3, [r2, #0]

		 Voltages.VoltageA =  (float)adc_buffer[0];
 8001d82:	4b1d      	ldr	r3, [pc, #116]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	ee07 3a90 	vmov	s15, r3
 8001d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001d90:	edc3 7a00 	vstr	s15, [r3]
		 Voltages.VoltageB =  (float)adc_buffer[1];
 8001d94:	4b18      	ldr	r3, [pc, #96]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	ee07 3a90 	vmov	s15, r3
 8001d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da0:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001da2:	edc3 7a01 	vstr	s15, [r3, #4]
		 Voltages.VoltageC =  (float)adc_buffer[2];
 8001da6:	4b14      	ldr	r3, [pc, #80]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db2:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001db4:	edc3 7a02 	vstr	s15, [r3, #8]
		 //filteroutput = lowPassFilter(pid.Frequency/360.0f, &filt);
		 //filteroutput = lowPassFilter2ndOrder(pid.Frequency/360.0f, &filter2nd);


	 }
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40001400 	.word	0x40001400
 8001dc4:	20000775 	.word	0x20000775
 8001dc8:	20000774 	.word	0x20000774
 8001dcc:	20000776 	.word	0x20000776
 8001dd0:	2000077c 	.word	0x2000077c
 8001dd4:	20000780 	.word	0x20000780
 8001dd8:	20000788 	.word	0x20000788
 8001ddc:	20000784 	.word	0x20000784
 8001de0:	20000000 	.word	0x20000000
 8001de4:	2000075c 	.word	0x2000075c
 8001de8:	20000778 	.word	0x20000778
 8001dec:	20000790 	.word	0x20000790
 8001df0:	20000944 	.word	0x20000944
 8001df4:	40001000 	.word	0x40001000
 8001df8:	200003e4 	.word	0x200003e4
 8001dfc:	20000764 	.word	0x20000764

08001e00 <CounterBenchPeriod>:


uint8_t CounterBenchPeriod(float frequency){
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	ed87 0a01 	vstr	s0, [r7, #4]
	float Period = 1000000.0f/frequency;
 8001e0a:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001e54 <CounterBenchPeriod+0x54>
 8001e0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e16:	edc7 7a05 	vstr	s15, [r7, #20]
	int place = 4;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	613b      	str	r3, [r7, #16]
	uint8_t PeriodCounter4 = Period/(sine_points*place);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001e24:	fb02 f303 	mul.w	r3, r2, r3
 8001e28:	ee07 3a90 	vmov	s15, r3
 8001e2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e30:	edd7 6a05 	vldr	s13, [r7, #20]
 8001e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e3c:	edc7 7a00 	vstr	s15, [r7]
 8001e40:	783b      	ldrb	r3, [r7, #0]
 8001e42:	73fb      	strb	r3, [r7, #15]

	return PeriodCounter4;
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	371c      	adds	r7, #28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	49742400 	.word	0x49742400

08001e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e5c:	b672      	cpsid	i
}
 8001e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <Error_Handler+0x8>

08001e64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea8 <HAL_MspInit+0x44>)
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea8 <HAL_MspInit+0x44>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e76:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <HAL_MspInit+0x44>)
 8001e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <HAL_MspInit+0x44>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e86:	4a08      	ldr	r2, [pc, #32]	@ (8001ea8 <HAL_MspInit+0x44>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_MspInit+0x44>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001e9a:	f004 fda1 	bl	80069e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000

08001eac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b09a      	sub	sp, #104	@ 0x68
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	2244      	movs	r2, #68	@ 0x44
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f00d f9b8 	bl	800f242 <memset>
  if(hadc->Instance==ADC1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eda:	d167      	bne.n	8001fac <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001edc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ee0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001ee2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	4618      	mov	r0, r3
 8001eee:	f005 fab5 	bl	800745c <HAL_RCCEx_PeriphCLKConfig>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001ef8:	f7ff ffae 	bl	8001e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001efc:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb4 <HAL_ADC_MspInit+0x108>)
 8001efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f00:	4a2c      	ldr	r2, [pc, #176]	@ (8001fb4 <HAL_ADC_MspInit+0x108>)
 8001f02:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f08:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb4 <HAL_ADC_MspInit+0x108>)
 8001f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b27      	ldr	r3, [pc, #156]	@ (8001fb4 <HAL_ADC_MspInit+0x108>)
 8001f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f18:	4a26      	ldr	r2, [pc, #152]	@ (8001fb4 <HAL_ADC_MspInit+0x108>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f20:	4b24      	ldr	r3, [pc, #144]	@ (8001fb4 <HAL_ADC_MspInit+0x108>)
 8001f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001f2c:	230f      	movs	r3, #15
 8001f2e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f30:	2303      	movs	r3, #3
 8001f32:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f42:	f002 fca7 	bl	8004894 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f46:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb8 <HAL_ADC_MspInit+0x10c>)
 8001f48:	4a1c      	ldr	r2, [pc, #112]	@ (8001fbc <HAL_ADC_MspInit+0x110>)
 8001f4a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb8 <HAL_ADC_MspInit+0x10c>)
 8001f4e:	2205      	movs	r2, #5
 8001f50:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f52:	4b19      	ldr	r3, [pc, #100]	@ (8001fb8 <HAL_ADC_MspInit+0x10c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f58:	4b17      	ldr	r3, [pc, #92]	@ (8001fb8 <HAL_ADC_MspInit+0x10c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f5e:	4b16      	ldr	r3, [pc, #88]	@ (8001fb8 <HAL_ADC_MspInit+0x10c>)
 8001f60:	2280      	movs	r2, #128	@ 0x80
 8001f62:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f64:	4b14      	ldr	r3, [pc, #80]	@ (8001fb8 <HAL_ADC_MspInit+0x10c>)
 8001f66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f6a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f6c:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <HAL_ADC_MspInit+0x10c>)
 8001f6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f72:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f74:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <HAL_ADC_MspInit+0x10c>)
 8001f76:	2220      	movs	r2, #32
 8001f78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb8 <HAL_ADC_MspInit+0x10c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f80:	480d      	ldr	r0, [pc, #52]	@ (8001fb8 <HAL_ADC_MspInit+0x10c>)
 8001f82:	f002 fa15 	bl	80043b0 <HAL_DMA_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001f8c:	f7ff ff64 	bl	8001e58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a09      	ldr	r2, [pc, #36]	@ (8001fb8 <HAL_ADC_MspInit+0x10c>)
 8001f94:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f96:	4a08      	ldr	r2, [pc, #32]	@ (8001fb8 <HAL_ADC_MspInit+0x10c>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2012      	movs	r0, #18
 8001fa2:	f002 f9d0 	bl	8004346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001fa6:	2012      	movs	r0, #18
 8001fa8:	f002 f9e7 	bl	800437a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001fac:	bf00      	nop
 8001fae:	3768      	adds	r7, #104	@ 0x68
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	200007fc 	.word	0x200007fc
 8001fbc:	40020008 	.word	0x40020008

08001fc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b09a      	sub	sp, #104	@ 0x68
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd8:	f107 0310 	add.w	r3, r7, #16
 8001fdc:	2244      	movs	r2, #68	@ 0x44
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f00d f92e 	bl	800f242 <memset>
  if(hi2c->Instance==I2C1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1f      	ldr	r2, [pc, #124]	@ (8002068 <HAL_I2C_MspInit+0xa8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d136      	bne.n	800205e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ff0:	2340      	movs	r3, #64	@ 0x40
 8001ff2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f005 fa2d 	bl	800745c <HAL_RCCEx_PeriphCLKConfig>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002008:	f7ff ff26 	bl	8001e58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200c:	4b17      	ldr	r3, [pc, #92]	@ (800206c <HAL_I2C_MspInit+0xac>)
 800200e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002010:	4a16      	ldr	r2, [pc, #88]	@ (800206c <HAL_I2C_MspInit+0xac>)
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002018:	4b14      	ldr	r3, [pc, #80]	@ (800206c <HAL_I2C_MspInit+0xac>)
 800201a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002024:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002028:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202a:	2312      	movs	r3, #18
 800202c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002036:	2304      	movs	r3, #4
 8002038:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800203e:	4619      	mov	r1, r3
 8002040:	480b      	ldr	r0, [pc, #44]	@ (8002070 <HAL_I2C_MspInit+0xb0>)
 8002042:	f002 fc27 	bl	8004894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002046:	4b09      	ldr	r3, [pc, #36]	@ (800206c <HAL_I2C_MspInit+0xac>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204a:	4a08      	ldr	r2, [pc, #32]	@ (800206c <HAL_I2C_MspInit+0xac>)
 800204c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002050:	6593      	str	r3, [r2, #88]	@ 0x58
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_I2C_MspInit+0xac>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002056:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800205e:	bf00      	nop
 8002060:	3768      	adds	r7, #104	@ 0x68
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40005400 	.word	0x40005400
 800206c:	40021000 	.word	0x40021000
 8002070:	48000400 	.word	0x48000400

08002074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b09a      	sub	sp, #104	@ 0x68
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	2244      	movs	r2, #68	@ 0x44
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f00d f8d4 	bl	800f242 <memset>
  if(huart->Instance==LPUART1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1f      	ldr	r2, [pc, #124]	@ (800211c <HAL_UART_MspInit+0xa8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d136      	bne.n	8002112 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80020a4:	2320      	movs	r3, #32
 80020a6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80020a8:	2300      	movs	r3, #0
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ac:	f107 0310 	add.w	r3, r7, #16
 80020b0:	4618      	mov	r0, r3
 80020b2:	f005 f9d3 	bl	800745c <HAL_RCCEx_PeriphCLKConfig>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020bc:	f7ff fecc 	bl	8001e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80020c0:	4b17      	ldr	r3, [pc, #92]	@ (8002120 <HAL_UART_MspInit+0xac>)
 80020c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c4:	4a16      	ldr	r2, [pc, #88]	@ (8002120 <HAL_UART_MspInit+0xac>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80020cc:	4b14      	ldr	r3, [pc, #80]	@ (8002120 <HAL_UART_MspInit+0xac>)
 80020ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d8:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <HAL_UART_MspInit+0xac>)
 80020da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020dc:	4a10      	ldr	r2, [pc, #64]	@ (8002120 <HAL_UART_MspInit+0xac>)
 80020de:	f043 0302 	orr.w	r3, r3, #2
 80020e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002120 <HAL_UART_MspInit+0xac>)
 80020e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020f0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80020f4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002102:	2308      	movs	r3, #8
 8002104:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002106:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800210a:	4619      	mov	r1, r3
 800210c:	4805      	ldr	r0, [pc, #20]	@ (8002124 <HAL_UART_MspInit+0xb0>)
 800210e:	f002 fbc1 	bl	8004894 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8002112:	bf00      	nop
 8002114:	3768      	adds	r7, #104	@ 0x68
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40008000 	.word	0x40008000
 8002120:	40021000 	.word	0x40021000
 8002124:	48000400 	.word	0x48000400

08002128 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a39      	ldr	r2, [pc, #228]	@ (800221c <HAL_TIM_Base_MspInit+0xf4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d10c      	bne.n	8002154 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800213a:	4b39      	ldr	r3, [pc, #228]	@ (8002220 <HAL_TIM_Base_MspInit+0xf8>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213e:	4a38      	ldr	r2, [pc, #224]	@ (8002220 <HAL_TIM_Base_MspInit+0xf8>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	6593      	str	r3, [r2, #88]	@ 0x58
 8002146:	4b36      	ldr	r3, [pc, #216]	@ (8002220 <HAL_TIM_Base_MspInit+0xf8>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002152:	e05e      	b.n	8002212 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM6)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a32      	ldr	r2, [pc, #200]	@ (8002224 <HAL_TIM_Base_MspInit+0xfc>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d114      	bne.n	8002188 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800215e:	4b30      	ldr	r3, [pc, #192]	@ (8002220 <HAL_TIM_Base_MspInit+0xf8>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002162:	4a2f      	ldr	r2, [pc, #188]	@ (8002220 <HAL_TIM_Base_MspInit+0xf8>)
 8002164:	f043 0310 	orr.w	r3, r3, #16
 8002168:	6593      	str	r3, [r2, #88]	@ 0x58
 800216a:	4b2d      	ldr	r3, [pc, #180]	@ (8002220 <HAL_TIM_Base_MspInit+0xf8>)
 800216c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	61bb      	str	r3, [r7, #24]
 8002174:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2101      	movs	r1, #1
 800217a:	2036      	movs	r0, #54	@ 0x36
 800217c:	f002 f8e3 	bl	8004346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002180:	2036      	movs	r0, #54	@ 0x36
 8002182:	f002 f8fa 	bl	800437a <HAL_NVIC_EnableIRQ>
}
 8002186:	e044      	b.n	8002212 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM7)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a26      	ldr	r2, [pc, #152]	@ (8002228 <HAL_TIM_Base_MspInit+0x100>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d114      	bne.n	80021bc <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002192:	4b23      	ldr	r3, [pc, #140]	@ (8002220 <HAL_TIM_Base_MspInit+0xf8>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002196:	4a22      	ldr	r2, [pc, #136]	@ (8002220 <HAL_TIM_Base_MspInit+0xf8>)
 8002198:	f043 0320 	orr.w	r3, r3, #32
 800219c:	6593      	str	r3, [r2, #88]	@ 0x58
 800219e:	4b20      	ldr	r3, [pc, #128]	@ (8002220 <HAL_TIM_Base_MspInit+0xf8>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2102      	movs	r1, #2
 80021ae:	2037      	movs	r0, #55	@ 0x37
 80021b0:	f002 f8c9 	bl	8004346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021b4:	2037      	movs	r0, #55	@ 0x37
 80021b6:	f002 f8e0 	bl	800437a <HAL_NVIC_EnableIRQ>
}
 80021ba:	e02a      	b.n	8002212 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1a      	ldr	r2, [pc, #104]	@ (800222c <HAL_TIM_Base_MspInit+0x104>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d114      	bne.n	80021f0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80021c6:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <HAL_TIM_Base_MspInit+0xf8>)
 80021c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ca:	4a15      	ldr	r2, [pc, #84]	@ (8002220 <HAL_TIM_Base_MspInit+0xf8>)
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80021d2:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <HAL_TIM_Base_MspInit+0xf8>)
 80021d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	2019      	movs	r0, #25
 80021e4:	f002 f8af 	bl	8004346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80021e8:	2019      	movs	r0, #25
 80021ea:	f002 f8c6 	bl	800437a <HAL_NVIC_EnableIRQ>
}
 80021ee:	e010      	b.n	8002212 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM17)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0e      	ldr	r2, [pc, #56]	@ (8002230 <HAL_TIM_Base_MspInit+0x108>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d10b      	bne.n	8002212 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <HAL_TIM_Base_MspInit+0xf8>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fe:	4a08      	ldr	r2, [pc, #32]	@ (8002220 <HAL_TIM_Base_MspInit+0xf8>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002204:	6613      	str	r3, [r2, #96]	@ 0x60
 8002206:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_TIM_Base_MspInit+0xf8>)
 8002208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800220a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
}
 8002212:	bf00      	nop
 8002214:	3720      	adds	r7, #32
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40000400 	.word	0x40000400
 8002220:	40021000 	.word	0x40021000
 8002224:	40001000 	.word	0x40001000
 8002228:	40001400 	.word	0x40001400
 800222c:	40014400 	.word	0x40014400
 8002230:	40014800 	.word	0x40014800

08002234 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	@ 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1f      	ldr	r2, [pc, #124]	@ (80022d0 <HAL_TIM_MspPostInit+0x9c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d138      	bne.n	80022c8 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <HAL_TIM_MspPostInit+0xa0>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	4a1e      	ldr	r2, [pc, #120]	@ (80022d4 <HAL_TIM_MspPostInit+0xa0>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002262:	4b1c      	ldr	r3, [pc, #112]	@ (80022d4 <HAL_TIM_MspPostInit+0xa0>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <HAL_TIM_MspPostInit+0xa0>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002272:	4a18      	ldr	r2, [pc, #96]	@ (80022d4 <HAL_TIM_MspPostInit+0xa0>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800227a:	4b16      	ldr	r3, [pc, #88]	@ (80022d4 <HAL_TIM_MspPostInit+0xa0>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002286:	23c0      	movs	r3, #192	@ 0xc0
 8002288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002296:	2302      	movs	r3, #2
 8002298:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a4:	f002 faf6 	bl	8004894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022a8:	2302      	movs	r3, #2
 80022aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022b8:	2302      	movs	r3, #2
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	4805      	ldr	r0, [pc, #20]	@ (80022d8 <HAL_TIM_MspPostInit+0xa4>)
 80022c4:	f002 fae6 	bl	8004894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022c8:	bf00      	nop
 80022ca:	3728      	adds	r7, #40	@ 0x28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40000400 	.word	0x40000400
 80022d4:	40021000 	.word	0x40021000
 80022d8:	48000400 	.word	0x48000400

080022dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <NMI_Handler+0x4>

080022e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <HardFault_Handler+0x4>

080022ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <MemManage_Handler+0x4>

080022f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f8:	bf00      	nop
 80022fa:	e7fd      	b.n	80022f8 <BusFault_Handler+0x4>

080022fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002300:	bf00      	nop
 8002302:	e7fd      	b.n	8002300 <UsageFault_Handler+0x4>

08002304 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002332:	f000 f993 	bl	800265c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <DMA1_Channel1_IRQHandler+0x10>)
 8002342:	f002 f958 	bl	80045f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200007fc 	.word	0x200007fc

08002350 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <ADC1_2_IRQHandler+0x10>)
 8002356:	f000 fed3 	bl	8003100 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000790 	.word	0x20000790

08002364 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002368:	4802      	ldr	r0, [pc, #8]	@ (8002374 <USB_LP_IRQHandler+0x10>)
 800236a:	f002 fe4f 	bl	800500c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	2000179c 	.word	0x2000179c

08002378 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800237c:	4802      	ldr	r0, [pc, #8]	@ (8002388 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800237e:	f005 fc81 	bl	8007c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000a28 	.word	0x20000a28

0800238c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002390:	4802      	ldr	r0, [pc, #8]	@ (800239c <TIM6_DAC_IRQHandler+0x10>)
 8002392:	f005 fc77 	bl	8007c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000990 	.word	0x20000990

080023a0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80023a4:	4802      	ldr	r0, [pc, #8]	@ (80023b0 <TIM7_IRQHandler+0x10>)
 80023a6:	f005 fc6d 	bl	8007c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	200009dc 	.word	0x200009dc

080023b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return 1;
 80023b8:	2301      	movs	r3, #1
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_kill>:

int _kill(int pid, int sig)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023ce:	f00c ff8b 	bl	800f2e8 <__errno>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2216      	movs	r2, #22
 80023d6:	601a      	str	r2, [r3, #0]
  return -1;
 80023d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_exit>:

void _exit (int status)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ffe7 	bl	80023c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023f6:	bf00      	nop
 80023f8:	e7fd      	b.n	80023f6 <_exit+0x12>

080023fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	e00a      	b.n	8002422 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800240c:	f3af 8000 	nop.w
 8002410:	4601      	mov	r1, r0
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	60ba      	str	r2, [r7, #8]
 8002418:	b2ca      	uxtb	r2, r1
 800241a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3301      	adds	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	429a      	cmp	r2, r3
 8002428:	dbf0      	blt.n	800240c <_read+0x12>
  }

  return len;
 800242a:	687b      	ldr	r3, [r7, #4]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	e009      	b.n	800245a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	60ba      	str	r2, [r7, #8]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3301      	adds	r3, #1
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	429a      	cmp	r2, r3
 8002460:	dbf1      	blt.n	8002446 <_write+0x12>
  }
  return len;
 8002462:	687b      	ldr	r3, [r7, #4]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <_close>:

int _close(int file)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002474:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002494:	605a      	str	r2, [r3, #4]
  return 0;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <_isatty>:

int _isatty(int file)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024ac:	2301      	movs	r3, #1
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b085      	sub	sp, #20
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024dc:	4a14      	ldr	r2, [pc, #80]	@ (8002530 <_sbrk+0x5c>)
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <_sbrk+0x60>)
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e8:	4b13      	ldr	r3, [pc, #76]	@ (8002538 <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024f0:	4b11      	ldr	r3, [pc, #68]	@ (8002538 <_sbrk+0x64>)
 80024f2:	4a12      	ldr	r2, [pc, #72]	@ (800253c <_sbrk+0x68>)
 80024f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024f6:	4b10      	ldr	r3, [pc, #64]	@ (8002538 <_sbrk+0x64>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	429a      	cmp	r2, r3
 8002502:	d207      	bcs.n	8002514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002504:	f00c fef0 	bl	800f2e8 <__errno>
 8002508:	4603      	mov	r3, r0
 800250a:	220c      	movs	r2, #12
 800250c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295
 8002512:	e009      	b.n	8002528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002514:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <_sbrk+0x64>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800251a:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <_sbrk+0x64>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	4a05      	ldr	r2, [pc, #20]	@ (8002538 <_sbrk+0x64>)
 8002524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002526:	68fb      	ldr	r3, [r7, #12]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20008000 	.word	0x20008000
 8002534:	00000400 	.word	0x00000400
 8002538:	20000ac0 	.word	0x20000ac0
 800253c:	20001de8 	.word	0x20001de8

08002540 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <SystemInit+0x20>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800254a:	4a05      	ldr	r2, [pc, #20]	@ (8002560 <SystemInit+0x20>)
 800254c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002550:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002564:	480d      	ldr	r0, [pc, #52]	@ (800259c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002566:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002568:	f7ff ffea 	bl	8002540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800256c:	480c      	ldr	r0, [pc, #48]	@ (80025a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800256e:	490d      	ldr	r1, [pc, #52]	@ (80025a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002570:	4a0d      	ldr	r2, [pc, #52]	@ (80025a8 <LoopForever+0xe>)
  movs r3, #0
 8002572:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002574:	e002      	b.n	800257c <LoopCopyDataInit>

08002576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800257a:	3304      	adds	r3, #4

0800257c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800257c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002580:	d3f9      	bcc.n	8002576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002582:	4a0a      	ldr	r2, [pc, #40]	@ (80025ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002584:	4c0a      	ldr	r4, [pc, #40]	@ (80025b0 <LoopForever+0x16>)
  movs r3, #0
 8002586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002588:	e001      	b.n	800258e <LoopFillZerobss>

0800258a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800258a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800258c:	3204      	adds	r2, #4

0800258e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002590:	d3fb      	bcc.n	800258a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002592:	f00c feaf 	bl	800f2f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002596:	f7fe fe87 	bl	80012a8 <main>

0800259a <LoopForever>:

LoopForever:
    b LoopForever
 800259a:	e7fe      	b.n	800259a <LoopForever>
  ldr   r0, =_estack
 800259c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80025a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a4:	20000740 	.word	0x20000740
  ldr r2, =_sidata
 80025a8:	08011820 	.word	0x08011820
  ldr r2, =_sbss
 80025ac:	20000740 	.word	0x20000740
  ldr r4, =_ebss
 80025b0:	20001de4 	.word	0x20001de4

080025b4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025b4:	e7fe      	b.n	80025b4 <COMP1_2_3_IRQHandler>

080025b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c0:	2003      	movs	r0, #3
 80025c2:	f001 feb5 	bl	8004330 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025c6:	200f      	movs	r0, #15
 80025c8:	f000 f80e 	bl	80025e8 <HAL_InitTick>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	71fb      	strb	r3, [r7, #7]
 80025d6:	e001      	b.n	80025dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025d8:	f7ff fc44 	bl	8001e64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025dc:	79fb      	ldrb	r3, [r7, #7]

}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80025f4:	4b16      	ldr	r3, [pc, #88]	@ (8002650 <HAL_InitTick+0x68>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d022      	beq.n	8002642 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80025fc:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <HAL_InitTick+0x6c>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b13      	ldr	r3, [pc, #76]	@ (8002650 <HAL_InitTick+0x68>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002608:	fbb1 f3f3 	udiv	r3, r1, r3
 800260c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002610:	4618      	mov	r0, r3
 8002612:	f001 fec0 	bl	8004396 <HAL_SYSTICK_Config>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10f      	bne.n	800263c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b0f      	cmp	r3, #15
 8002620:	d809      	bhi.n	8002636 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002622:	2200      	movs	r2, #0
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	f04f 30ff 	mov.w	r0, #4294967295
 800262a:	f001 fe8c 	bl	8004346 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800262e:	4a0a      	ldr	r2, [pc, #40]	@ (8002658 <HAL_InitTick+0x70>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e007      	b.n	8002646 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	e004      	b.n	8002646 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	e001      	b.n	8002646 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	200003fc 	.word	0x200003fc
 8002654:	200003f4 	.word	0x200003f4
 8002658:	200003f8 	.word	0x200003f8

0800265c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002660:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <HAL_IncTick+0x1c>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <HAL_IncTick+0x20>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4413      	add	r3, r2
 800266a:	4a03      	ldr	r2, [pc, #12]	@ (8002678 <HAL_IncTick+0x1c>)
 800266c:	6013      	str	r3, [r2, #0]
}
 800266e:	bf00      	nop
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	20000ac4 	.word	0x20000ac4
 800267c:	200003fc 	.word	0x200003fc

08002680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return uwTick;
 8002684:	4b03      	ldr	r3, [pc, #12]	@ (8002694 <HAL_GetTick+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000ac4 	.word	0x20000ac4

08002698 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	609a      	str	r2, [r3, #8]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	609a      	str	r2, [r3, #8]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	3360      	adds	r3, #96	@ 0x60
 8002712:	461a      	mov	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b08      	ldr	r3, [pc, #32]	@ (8002744 <LL_ADC_SetOffset+0x44>)
 8002722:	4013      	ands	r3, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	4313      	orrs	r3, r2
 8002730:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002738:	bf00      	nop
 800273a:	371c      	adds	r7, #28
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	03fff000 	.word	0x03fff000

08002748 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3360      	adds	r3, #96	@ 0x60
 8002756:	461a      	mov	r2, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3360      	adds	r3, #96	@ 0x60
 8002784:	461a      	mov	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	431a      	orrs	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b087      	sub	sp, #28
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3360      	adds	r3, #96	@ 0x60
 80027ba:	461a      	mov	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80027d4:	bf00      	nop
 80027d6:	371c      	adds	r7, #28
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3360      	adds	r3, #96	@ 0x60
 80027f0:	461a      	mov	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	431a      	orrs	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800280a:	bf00      	nop
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	615a      	str	r2, [r3, #20]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002862:	b480      	push	{r7}
 8002864:	b087      	sub	sp, #28
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3330      	adds	r3, #48	@ 0x30
 8002872:	461a      	mov	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	0a1b      	lsrs	r3, r3, #8
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	4413      	add	r3, r2
 8002880:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	211f      	movs	r1, #31
 800288e:	fa01 f303 	lsl.w	r3, r1, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	401a      	ands	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0e9b      	lsrs	r3, r3, #26
 800289a:	f003 011f 	and.w	r1, r3, #31
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	431a      	orrs	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3314      	adds	r3, #20
 80028f0:	461a      	mov	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	0e5b      	lsrs	r3, r3, #25
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	4413      	add	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	0d1b      	lsrs	r3, r3, #20
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	2107      	movs	r1, #7
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	401a      	ands	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	0d1b      	lsrs	r3, r3, #20
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	431a      	orrs	r2, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800292a:	bf00      	nop
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002950:	43db      	mvns	r3, r3
 8002952:	401a      	ands	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f003 0318 	and.w	r3, r3, #24
 800295a:	4908      	ldr	r1, [pc, #32]	@ (800297c <LL_ADC_SetChannelSingleDiff+0x44>)
 800295c:	40d9      	lsrs	r1, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	400b      	ands	r3, r1
 8002962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002966:	431a      	orrs	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	0007ffff 	.word	0x0007ffff

08002980 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 031f 	and.w	r3, r3, #31
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80029c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6093      	str	r3, [r2, #8]
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029f0:	d101      	bne.n	80029f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002a14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a18:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a40:	d101      	bne.n	8002a46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a68:	f043 0201 	orr.w	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <LL_ADC_IsEnabled+0x18>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <LL_ADC_IsEnabled+0x1a>
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ab2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ab6:	f043 0204 	orr.w	r2, r3, #4
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d101      	bne.n	8002ae2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d101      	bne.n	8002b08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b18:	b590      	push	{r4, r7, lr}
 8002b1a:	b089      	sub	sp, #36	@ 0x24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e167      	b.n	8002e02 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff f9b3 	bl	8001eac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff3f 	bl	80029dc <LL_ADC_IsDeepPowerDownEnabled>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff25 	bl	80029b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ff5a 	bl	8002a2c <LL_ADC_IsInternalRegulatorEnabled>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d115      	bne.n	8002baa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff ff3e 	bl	8002a04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b88:	4ba0      	ldr	r3, [pc, #640]	@ (8002e0c <HAL_ADC_Init+0x2f4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	099b      	lsrs	r3, r3, #6
 8002b8e:	4aa0      	ldr	r2, [pc, #640]	@ (8002e10 <HAL_ADC_Init+0x2f8>)
 8002b90:	fba2 2303 	umull	r2, r3, r2, r3
 8002b94:	099b      	lsrs	r3, r3, #6
 8002b96:	3301      	adds	r3, #1
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b9c:	e002      	b.n	8002ba4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f9      	bne.n	8002b9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff ff3c 	bl	8002a2c <LL_ADC_IsInternalRegulatorEnabled>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10d      	bne.n	8002bd6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bbe:	f043 0210 	orr.w	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bca:	f043 0201 	orr.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff75 	bl	8002aca <LL_ADC_REG_IsConversionOngoing>
 8002be0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 8100 	bne.w	8002df0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 80fc 	bne.w	8002df0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c00:	f043 0202 	orr.w	r2, r3, #2
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff35 	bl	8002a7c <LL_ADC_IsEnabled>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d111      	bne.n	8002c3c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c18:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c1c:	f7ff ff2e 	bl	8002a7c <LL_ADC_IsEnabled>
 8002c20:	4604      	mov	r4, r0
 8002c22:	487c      	ldr	r0, [pc, #496]	@ (8002e14 <HAL_ADC_Init+0x2fc>)
 8002c24:	f7ff ff2a 	bl	8002a7c <LL_ADC_IsEnabled>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4323      	orrs	r3, r4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4619      	mov	r1, r3
 8002c36:	4878      	ldr	r0, [pc, #480]	@ (8002e18 <HAL_ADC_Init+0x300>)
 8002c38:	f7ff fd2e 	bl	8002698 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7f5b      	ldrb	r3, [r3, #29]
 8002c40:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c46:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002c4c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002c52:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c5a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d106      	bne.n	8002c78 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	045b      	lsls	r3, r3, #17
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d009      	beq.n	8002c94 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c84:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	4b60      	ldr	r3, [pc, #384]	@ (8002e1c <HAL_ADC_Init+0x304>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	69b9      	ldr	r1, [r7, #24]
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff ff14 	bl	8002af0 <LL_ADC_INJ_IsConversionOngoing>
 8002cc8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d16d      	bne.n	8002dac <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d16a      	bne.n	8002dac <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cda:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ce2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cf2:	f023 0302 	bic.w	r3, r3, #2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	69b9      	ldr	r1, [r7, #24]
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d017      	beq.n	8002d38 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002d16:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002d20:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6911      	ldr	r1, [r2, #16]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	430b      	orrs	r3, r1
 8002d32:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002d36:	e013      	b.n	8002d60 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002d46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d5c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d118      	bne.n	8002d9c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002d74:	f023 0304 	bic.w	r3, r3, #4
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d80:	4311      	orrs	r1, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d86:	4311      	orrs	r1, r2
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0201 	orr.w	r2, r2, #1
 8002d98:	611a      	str	r2, [r3, #16]
 8002d9a:	e007      	b.n	8002dac <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0201 	bic.w	r2, r2, #1
 8002daa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d10c      	bne.n	8002dce <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dba:	f023 010f 	bic.w	r1, r3, #15
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	1e5a      	subs	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dcc:	e007      	b.n	8002dde <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 020f 	bic.w	r2, r2, #15
 8002ddc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de2:	f023 0303 	bic.w	r3, r3, #3
 8002de6:	f043 0201 	orr.w	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dee:	e007      	b.n	8002e00 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df4:	f043 0210 	orr.w	r2, r3, #16
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e00:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3724      	adds	r7, #36	@ 0x24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd90      	pop	{r4, r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	200003f4 	.word	0x200003f4
 8002e10:	053e2d63 	.word	0x053e2d63
 8002e14:	50000100 	.word	0x50000100
 8002e18:	50000300 	.word	0x50000300
 8002e1c:	fff04007 	.word	0xfff04007

08002e20 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e28:	4859      	ldr	r0, [pc, #356]	@ (8002f90 <HAL_ADC_Start+0x170>)
 8002e2a:	f7ff fda9 	bl	8002980 <LL_ADC_GetMultimode>
 8002e2e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff fe48 	bl	8002aca <LL_ADC_REG_IsConversionOngoing>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f040 809f 	bne.w	8002f80 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_Start+0x30>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e09a      	b.n	8002f86 <HAL_ADC_Start+0x166>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 ff83 	bl	8003d64 <ADC_Enable>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f040 8086 	bne.w	8002f76 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e72:	f023 0301 	bic.w	r3, r3, #1
 8002e76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a44      	ldr	r2, [pc, #272]	@ (8002f94 <HAL_ADC_Start+0x174>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d002      	beq.n	8002e8e <HAL_ADC_Start+0x6e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	e001      	b.n	8002e92 <HAL_ADC_Start+0x72>
 8002e8e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d002      	beq.n	8002ea0 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d105      	bne.n	8002eac <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eb8:	d106      	bne.n	8002ec8 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ebe:	f023 0206 	bic.w	r2, r3, #6
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ec6:	e002      	b.n	8002ece <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	221c      	movs	r2, #28
 8002ed4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8002f94 <HAL_ADC_Start+0x174>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d002      	beq.n	8002eee <HAL_ADC_Start+0xce>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	e001      	b.n	8002ef2 <HAL_ADC_Start+0xd2>
 8002eee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d008      	beq.n	8002f0c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	d002      	beq.n	8002f0c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b09      	cmp	r3, #9
 8002f0a:	d114      	bne.n	8002f36 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d007      	beq.n	8002f2a <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f22:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fdb7 	bl	8002aa2 <LL_ADC_REG_StartConversion>
 8002f34:	e026      	b.n	8002f84 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a13      	ldr	r2, [pc, #76]	@ (8002f94 <HAL_ADC_Start+0x174>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d002      	beq.n	8002f52 <HAL_ADC_Start+0x132>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	e001      	b.n	8002f56 <HAL_ADC_Start+0x136>
 8002f52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f56:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00f      	beq.n	8002f84 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f68:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f6c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f74:	e006      	b.n	8002f84 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002f7e:	e001      	b.n	8002f84 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f80:	2302      	movs	r3, #2
 8002f82:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	50000300 	.word	0x50000300
 8002f94:	50000100 	.word	0x50000100

08002f98 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fa4:	4851      	ldr	r0, [pc, #324]	@ (80030ec <HAL_ADC_Start_DMA+0x154>)
 8002fa6:	f7ff fceb 	bl	8002980 <LL_ADC_GetMultimode>
 8002faa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fd8a 	bl	8002aca <LL_ADC_REG_IsConversionOngoing>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f040 808f 	bne.w	80030dc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_ADC_Start_DMA+0x34>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e08a      	b.n	80030e2 <HAL_ADC_Start_DMA+0x14a>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b05      	cmp	r3, #5
 8002fde:	d002      	beq.n	8002fe6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	2b09      	cmp	r3, #9
 8002fe4:	d173      	bne.n	80030ce <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 febc 	bl	8003d64 <ADC_Enable>
 8002fec:	4603      	mov	r3, r0
 8002fee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d166      	bne.n	80030c4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a38      	ldr	r2, [pc, #224]	@ (80030f0 <HAL_ADC_Start_DMA+0x158>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d002      	beq.n	800301a <HAL_ADC_Start_DMA+0x82>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	e001      	b.n	800301e <HAL_ADC_Start_DMA+0x86>
 800301a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	4293      	cmp	r3, r2
 8003024:	d002      	beq.n	800302c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003030:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003048:	f023 0206 	bic.w	r2, r3, #6
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003050:	e002      	b.n	8003058 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305c:	4a25      	ldr	r2, [pc, #148]	@ (80030f4 <HAL_ADC_Start_DMA+0x15c>)
 800305e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003064:	4a24      	ldr	r2, [pc, #144]	@ (80030f8 <HAL_ADC_Start_DMA+0x160>)
 8003066:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306c:	4a23      	ldr	r2, [pc, #140]	@ (80030fc <HAL_ADC_Start_DMA+0x164>)
 800306e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	221c      	movs	r2, #28
 8003076:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0210 	orr.w	r2, r2, #16
 800308e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3340      	adds	r3, #64	@ 0x40
 80030aa:	4619      	mov	r1, r3
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f001 fa26 	bl	8004500 <HAL_DMA_Start_IT>
 80030b4:	4603      	mov	r3, r0
 80030b6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fcf0 	bl	8002aa2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80030c2:	e00d      	b.n	80030e0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80030cc:	e008      	b.n	80030e0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80030da:	e001      	b.n	80030e0 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030dc:	2302      	movs	r3, #2
 80030de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	50000300 	.word	0x50000300
 80030f0:	50000100 	.word	0x50000100
 80030f4:	08003e71 	.word	0x08003e71
 80030f8:	08003f49 	.word	0x08003f49
 80030fc:	08003f65 	.word	0x08003f65

08003100 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	@ 0x28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003108:	2300      	movs	r3, #0
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800311c:	4883      	ldr	r0, [pc, #524]	@ (800332c <HAL_ADC_IRQHandler+0x22c>)
 800311e:	f7ff fc2f 	bl	8002980 <LL_ADC_GetMultimode>
 8003122:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d017      	beq.n	800315e <HAL_ADC_IRQHandler+0x5e>
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d012      	beq.n	800315e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	d105      	bne.n	8003150 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003148:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 ff6f 	bl	8004034 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2202      	movs	r2, #2
 800315c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d004      	beq.n	8003172 <HAL_ADC_IRQHandler+0x72>
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 8085 	beq.w	8003288 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d07f      	beq.n	8003288 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b00      	cmp	r3, #0
 8003192:	d105      	bne.n	80031a0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003198:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fb49 	bl	800283c <LL_ADC_REG_IsTriggerSourceSWStart>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d064      	beq.n	800327a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a5e      	ldr	r2, [pc, #376]	@ (8003330 <HAL_ADC_IRQHandler+0x230>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d002      	beq.n	80031c0 <HAL_ADC_IRQHandler+0xc0>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	e001      	b.n	80031c4 <HAL_ADC_IRQHandler+0xc4>
 80031c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d008      	beq.n	80031de <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b05      	cmp	r3, #5
 80031d6:	d002      	beq.n	80031de <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2b09      	cmp	r3, #9
 80031dc:	d104      	bne.n	80031e8 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	623b      	str	r3, [r7, #32]
 80031e6:	e00d      	b.n	8003204 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a50      	ldr	r2, [pc, #320]	@ (8003330 <HAL_ADC_IRQHandler+0x230>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d002      	beq.n	80031f8 <HAL_ADC_IRQHandler+0xf8>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	e001      	b.n	80031fc <HAL_ADC_IRQHandler+0xfc>
 80031f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031fc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d135      	bne.n	800327a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b08      	cmp	r3, #8
 800321a:	d12e      	bne.n	800327a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fc52 	bl	8002aca <LL_ADC_REG_IsConversionOngoing>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d11a      	bne.n	8003262 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 020c 	bic.w	r2, r2, #12
 800323a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003240:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d112      	bne.n	800327a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003258:	f043 0201 	orr.w	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003260:	e00b      	b.n	800327a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003266:	f043 0210 	orr.w	r2, r3, #16
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003272:	f043 0201 	orr.w	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f95a 	bl	8003534 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	220c      	movs	r2, #12
 8003286:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d004      	beq.n	800329c <HAL_ADC_IRQHandler+0x19c>
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 809e 	beq.w	80033e4 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 8098 	beq.w	80033e4 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff faf2 	bl	80028ba <LL_ADC_INJ_IsTriggerSourceSWStart>
 80032d6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff faad 	bl	800283c <LL_ADC_REG_IsTriggerSourceSWStart>
 80032e2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a11      	ldr	r2, [pc, #68]	@ (8003330 <HAL_ADC_IRQHandler+0x230>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d002      	beq.n	80032f4 <HAL_ADC_IRQHandler+0x1f4>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	e001      	b.n	80032f8 <HAL_ADC_IRQHandler+0x1f8>
 80032f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d008      	beq.n	8003312 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b06      	cmp	r3, #6
 800330a:	d002      	beq.n	8003312 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b07      	cmp	r3, #7
 8003310:	d104      	bne.n	800331c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	623b      	str	r3, [r7, #32]
 800331a:	e011      	b.n	8003340 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a03      	ldr	r2, [pc, #12]	@ (8003330 <HAL_ADC_IRQHandler+0x230>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d006      	beq.n	8003334 <HAL_ADC_IRQHandler+0x234>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	e005      	b.n	8003338 <HAL_ADC_IRQHandler+0x238>
 800332c:	50000300 	.word	0x50000300
 8003330:	50000100 	.word	0x50000100
 8003334:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003338:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d047      	beq.n	80033d6 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d007      	beq.n	8003360 <HAL_ADC_IRQHandler+0x260>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d03f      	beq.n	80033d6 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800335c:	2b00      	cmp	r3, #0
 800335e:	d13a      	bne.n	80033d6 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336a:	2b40      	cmp	r3, #64	@ 0x40
 800336c:	d133      	bne.n	80033d6 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d12e      	bne.n	80033d6 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fbb7 	bl	8002af0 <LL_ADC_INJ_IsConversionOngoing>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d11a      	bne.n	80033be <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003396:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d112      	bne.n	80033d6 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80033bc:	e00b      	b.n	80033d6 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c2:	f043 0210 	orr.w	r2, r3, #16
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ce:	f043 0201 	orr.w	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fe04 	bl	8003fe4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2260      	movs	r2, #96	@ 0x60
 80033e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d011      	beq.n	8003412 <HAL_ADC_IRQHandler+0x312>
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00c      	beq.n	8003412 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f8a9 	bl	800355c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2280      	movs	r2, #128	@ 0x80
 8003410:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d012      	beq.n	8003442 <HAL_ADC_IRQHandler+0x342>
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fdea 	bl	800400c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003440:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003448:	2b00      	cmp	r3, #0
 800344a:	d012      	beq.n	8003472 <HAL_ADC_IRQHandler+0x372>
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00d      	beq.n	8003472 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fddc 	bl	8004020 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003470:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	d036      	beq.n	80034ea <HAL_ADC_IRQHandler+0x3ea>
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b00      	cmp	r3, #0
 8003484:	d031      	beq.n	80034ea <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d102      	bne.n	8003494 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800348e:	2301      	movs	r3, #1
 8003490:	627b      	str	r3, [r7, #36]	@ 0x24
 8003492:	e014      	b.n	80034be <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d008      	beq.n	80034ac <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800349a:	4825      	ldr	r0, [pc, #148]	@ (8003530 <HAL_ADC_IRQHandler+0x430>)
 800349c:	f7ff fa7e 	bl	800299c <LL_ADC_GetMultiDMATransfer>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00b      	beq.n	80034be <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80034a6:	2301      	movs	r3, #1
 80034a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80034aa:	e008      	b.n	80034be <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80034ba:	2301      	movs	r3, #1
 80034bc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d10e      	bne.n	80034e2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d4:	f043 0202 	orr.w	r2, r3, #2
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f847 	bl	8003570 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2210      	movs	r2, #16
 80034e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d018      	beq.n	8003526 <HAL_ADC_IRQHandler+0x426>
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d013      	beq.n	8003526 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003502:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800350e:	f043 0208 	orr.w	r2, r3, #8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800351e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fd69 	bl	8003ff8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003526:	bf00      	nop
 8003528:	3728      	adds	r7, #40	@ 0x28
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	50000300 	.word	0x50000300

08003534 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b0b6      	sub	sp, #216	@ 0xd8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x22>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e3c8      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x7b4>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fa89 	bl	8002aca <LL_ADC_REG_IsConversionOngoing>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f040 83ad 	bne.w	8003d1a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	f7ff f948 	bl	8002862 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff fa77 	bl	8002aca <LL_ADC_REG_IsConversionOngoing>
 80035dc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fa83 	bl	8002af0 <LL_ADC_INJ_IsConversionOngoing>
 80035ea:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f040 81d9 	bne.w	80039aa <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f040 81d4 	bne.w	80039aa <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800360a:	d10f      	bne.n	800362c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2200      	movs	r2, #0
 8003616:	4619      	mov	r1, r3
 8003618:	f7ff f962 	bl	80028e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff f8f6 	bl	8002816 <LL_ADC_SetSamplingTimeCommonConfig>
 800362a:	e00e      	b.n	800364a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	6819      	ldr	r1, [r3, #0]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	461a      	mov	r2, r3
 800363a:	f7ff f951 	bl	80028e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2100      	movs	r1, #0
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff f8e6 	bl	8002816 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	08db      	lsrs	r3, r3, #3
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	2b04      	cmp	r3, #4
 800366a:	d022      	beq.n	80036b2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6919      	ldr	r1, [r3, #16]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800367c:	f7ff f840 	bl	8002700 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	6919      	ldr	r1, [r3, #16]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	461a      	mov	r2, r3
 800368e:	f7ff f88c 	bl	80027aa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d102      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x124>
 80036a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036a6:	e000      	b.n	80036aa <HAL_ADC_ConfigChannel+0x126>
 80036a8:	2300      	movs	r3, #0
 80036aa:	461a      	mov	r2, r3
 80036ac:	f7ff f898 	bl	80027e0 <LL_ADC_SetOffsetSaturation>
 80036b0:	e17b      	b.n	80039aa <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2100      	movs	r1, #0
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff f845 	bl	8002748 <LL_ADC_GetOffsetChannel>
 80036be:	4603      	mov	r3, r0
 80036c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10a      	bne.n	80036de <HAL_ADC_ConfigChannel+0x15a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2100      	movs	r1, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff f83a 	bl	8002748 <LL_ADC_GetOffsetChannel>
 80036d4:	4603      	mov	r3, r0
 80036d6:	0e9b      	lsrs	r3, r3, #26
 80036d8:	f003 021f 	and.w	r2, r3, #31
 80036dc:	e01e      	b.n	800371c <HAL_ADC_ConfigChannel+0x198>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff f82f 	bl	8002748 <LL_ADC_GetOffsetChannel>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003700:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003704:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800370c:	2320      	movs	r3, #32
 800370e:	e004      	b.n	800371a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003710:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003714:	fab3 f383 	clz	r3, r3
 8003718:	b2db      	uxtb	r3, r3
 800371a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003724:	2b00      	cmp	r3, #0
 8003726:	d105      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x1b0>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	0e9b      	lsrs	r3, r3, #26
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	e018      	b.n	8003766 <HAL_ADC_ConfigChannel+0x1e2>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800374c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003750:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003758:	2320      	movs	r3, #32
 800375a:	e004      	b.n	8003766 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800375c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003760:	fab3 f383 	clz	r3, r3
 8003764:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003766:	429a      	cmp	r2, r3
 8003768:	d106      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2200      	movs	r2, #0
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fffe 	bl	8002774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2101      	movs	r1, #1
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe ffe2 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003784:	4603      	mov	r3, r0
 8003786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x220>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2101      	movs	r1, #1
 8003794:	4618      	mov	r0, r3
 8003796:	f7fe ffd7 	bl	8002748 <LL_ADC_GetOffsetChannel>
 800379a:	4603      	mov	r3, r0
 800379c:	0e9b      	lsrs	r3, r3, #26
 800379e:	f003 021f 	and.w	r2, r3, #31
 80037a2:	e01e      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x25e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2101      	movs	r1, #1
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe ffcc 	bl	8002748 <LL_ADC_GetOffsetChannel>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80037c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80037ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80037d2:	2320      	movs	r3, #32
 80037d4:	e004      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80037d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80037da:	fab3 f383 	clz	r3, r3
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d105      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x276>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	0e9b      	lsrs	r3, r3, #26
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	e018      	b.n	800382c <HAL_ADC_ConfigChannel+0x2a8>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003806:	fa93 f3a3 	rbit	r3, r3
 800380a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800380e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003812:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003816:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800381e:	2320      	movs	r3, #32
 8003820:	e004      	b.n	800382c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003822:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003826:	fab3 f383 	clz	r3, r3
 800382a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800382c:	429a      	cmp	r2, r3
 800382e:	d106      	bne.n	800383e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2200      	movs	r2, #0
 8003836:	2101      	movs	r1, #1
 8003838:	4618      	mov	r0, r3
 800383a:	f7fe ff9b 	bl	8002774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2102      	movs	r1, #2
 8003844:	4618      	mov	r0, r3
 8003846:	f7fe ff7f 	bl	8002748 <LL_ADC_GetOffsetChannel>
 800384a:	4603      	mov	r3, r0
 800384c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <HAL_ADC_ConfigChannel+0x2e6>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2102      	movs	r1, #2
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe ff74 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003860:	4603      	mov	r3, r0
 8003862:	0e9b      	lsrs	r3, r3, #26
 8003864:	f003 021f 	and.w	r2, r3, #31
 8003868:	e01e      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x324>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2102      	movs	r1, #2
 8003870:	4618      	mov	r0, r3
 8003872:	f7fe ff69 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003876:	4603      	mov	r3, r0
 8003878:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003880:	fa93 f3a3 	rbit	r3, r3
 8003884:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003888:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800388c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003890:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003898:	2320      	movs	r3, #32
 800389a:	e004      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800389c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80038a0:	fab3 f383 	clz	r3, r3
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d105      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x33c>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	0e9b      	lsrs	r3, r3, #26
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	e016      	b.n	80038ee <HAL_ADC_ConfigChannel+0x36a>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038cc:	fa93 f3a3 	rbit	r3, r3
 80038d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80038d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80038d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80038e0:	2320      	movs	r3, #32
 80038e2:	e004      	b.n	80038ee <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80038e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038e8:	fab3 f383 	clz	r3, r3
 80038ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d106      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	2102      	movs	r1, #2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe ff3a 	bl	8002774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2103      	movs	r1, #3
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe ff1e 	bl	8002748 <LL_ADC_GetOffsetChannel>
 800390c:	4603      	mov	r3, r0
 800390e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <HAL_ADC_ConfigChannel+0x3a8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2103      	movs	r1, #3
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe ff13 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003922:	4603      	mov	r3, r0
 8003924:	0e9b      	lsrs	r3, r3, #26
 8003926:	f003 021f 	and.w	r2, r3, #31
 800392a:	e017      	b.n	800395c <HAL_ADC_ConfigChannel+0x3d8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2103      	movs	r1, #3
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe ff08 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003938:	4603      	mov	r3, r0
 800393a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003944:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003946:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800394e:	2320      	movs	r3, #32
 8003950:	e003      	b.n	800395a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003952:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003954:	fab3 f383 	clz	r3, r3
 8003958:	b2db      	uxtb	r3, r3
 800395a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003964:	2b00      	cmp	r3, #0
 8003966:	d105      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x3f0>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	0e9b      	lsrs	r3, r3, #26
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	e011      	b.n	8003998 <HAL_ADC_ConfigChannel+0x414>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800397c:	fa93 f3a3 	rbit	r3, r3
 8003980:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003982:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003984:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800398c:	2320      	movs	r3, #32
 800398e:	e003      	b.n	8003998 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003992:	fab3 f383 	clz	r3, r3
 8003996:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003998:	429a      	cmp	r2, r3
 800399a:	d106      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2200      	movs	r2, #0
 80039a2:	2103      	movs	r1, #3
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe fee5 	bl	8002774 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff f864 	bl	8002a7c <LL_ADC_IsEnabled>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f040 8140 	bne.w	8003c3c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6819      	ldr	r1, [r3, #0]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	461a      	mov	r2, r3
 80039ca:	f7fe ffb5 	bl	8002938 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	4a8f      	ldr	r2, [pc, #572]	@ (8003c10 <HAL_ADC_ConfigChannel+0x68c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	f040 8131 	bne.w	8003c3c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10b      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x47e>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	0e9b      	lsrs	r3, r3, #26
 80039f0:	3301      	adds	r3, #1
 80039f2:	f003 031f 	and.w	r3, r3, #31
 80039f6:	2b09      	cmp	r3, #9
 80039f8:	bf94      	ite	ls
 80039fa:	2301      	movls	r3, #1
 80039fc:	2300      	movhi	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	e019      	b.n	8003a36 <HAL_ADC_ConfigChannel+0x4b2>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003a10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a12:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003a14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003a1a:	2320      	movs	r3, #32
 8003a1c:	e003      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003a1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	3301      	adds	r3, #1
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2b09      	cmp	r3, #9
 8003a2e:	bf94      	ite	ls
 8003a30:	2301      	movls	r3, #1
 8003a32:	2300      	movhi	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d079      	beq.n	8003b2e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d107      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x4d2>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	0e9b      	lsrs	r3, r3, #26
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	069b      	lsls	r3, r3, #26
 8003a50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a54:	e015      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x4fe>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a5e:	fa93 f3a3 	rbit	r3, r3
 8003a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a66:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003a6e:	2320      	movs	r3, #32
 8003a70:	e003      	b.n	8003a7a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a74:	fab3 f383 	clz	r3, r3
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	069b      	lsls	r3, r3, #26
 8003a7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d109      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x51e>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	0e9b      	lsrs	r3, r3, #26
 8003a94:	3301      	adds	r3, #1
 8003a96:	f003 031f 	and.w	r3, r3, #31
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa0:	e017      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x54e>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aaa:	fa93 f3a3 	rbit	r3, r3
 8003aae:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003ab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003aba:	2320      	movs	r3, #32
 8003abc:	e003      	b.n	8003ac6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003abe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ac0:	fab3 f383 	clz	r3, r3
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	2101      	movs	r1, #1
 8003ace:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad2:	ea42 0103 	orr.w	r1, r2, r3
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x574>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	0e9b      	lsrs	r3, r3, #26
 8003ae8:	3301      	adds	r3, #1
 8003aea:	f003 021f 	and.w	r2, r3, #31
 8003aee:	4613      	mov	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	051b      	lsls	r3, r3, #20
 8003af6:	e018      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x5a6>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b00:	fa93 f3a3 	rbit	r3, r3
 8003b04:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003b10:	2320      	movs	r3, #32
 8003b12:	e003      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	f003 021f 	and.w	r2, r3, #31
 8003b22:	4613      	mov	r3, r2
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	4413      	add	r3, r2
 8003b28:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	e081      	b.n	8003c32 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d107      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x5c6>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	0e9b      	lsrs	r3, r3, #26
 8003b40:	3301      	adds	r3, #1
 8003b42:	069b      	lsls	r3, r3, #26
 8003b44:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b48:	e015      	b.n	8003b76 <HAL_ADC_ConfigChannel+0x5f2>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b52:	fa93 f3a3 	rbit	r3, r3
 8003b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003b62:	2320      	movs	r3, #32
 8003b64:	e003      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b68:	fab3 f383 	clz	r3, r3
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	3301      	adds	r3, #1
 8003b70:	069b      	lsls	r3, r3, #26
 8003b72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x612>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	0e9b      	lsrs	r3, r3, #26
 8003b88:	3301      	adds	r3, #1
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	2101      	movs	r1, #1
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	e017      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x642>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	fa93 f3a3 	rbit	r3, r3
 8003ba2:	61fb      	str	r3, [r7, #28]
  return result;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003bae:	2320      	movs	r3, #32
 8003bb0:	e003      	b.n	8003bba <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb4:	fab3 f383 	clz	r3, r3
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc6:	ea42 0103 	orr.w	r1, r2, r3
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10d      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x66e>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	0e9b      	lsrs	r3, r3, #26
 8003bdc:	3301      	adds	r3, #1
 8003bde:	f003 021f 	and.w	r2, r3, #31
 8003be2:	4613      	mov	r3, r2
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	4413      	add	r3, r2
 8003be8:	3b1e      	subs	r3, #30
 8003bea:	051b      	lsls	r3, r3, #20
 8003bec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003bf0:	e01e      	b.n	8003c30 <HAL_ADC_ConfigChannel+0x6ac>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fa93 f3a3 	rbit	r3, r3
 8003bfe:	613b      	str	r3, [r7, #16]
  return result;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d104      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003c0a:	2320      	movs	r3, #32
 8003c0c:	e006      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x698>
 8003c0e:	bf00      	nop
 8003c10:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	f003 021f 	and.w	r2, r3, #31
 8003c22:	4613      	mov	r3, r2
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	4413      	add	r3, r2
 8003c28:	3b1e      	subs	r3, #30
 8003c2a:	051b      	lsls	r3, r3, #20
 8003c2c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c30:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c36:	4619      	mov	r1, r3
 8003c38:	f7fe fe52 	bl	80028e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4b3f      	ldr	r3, [pc, #252]	@ (8003d40 <HAL_ADC_ConfigChannel+0x7bc>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d071      	beq.n	8003d2c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c48:	483e      	ldr	r0, [pc, #248]	@ (8003d44 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c4a:	f7fe fd4b 	bl	80026e4 <LL_ADC_GetCommonPathInternalCh>
 8003c4e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a3c      	ldr	r2, [pc, #240]	@ (8003d48 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <HAL_ADC_ConfigChannel+0x6e2>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a3a      	ldr	r2, [pc, #232]	@ (8003d4c <HAL_ADC_ConfigChannel+0x7c8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d127      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d121      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c7a:	d157      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c84:	4619      	mov	r1, r3
 8003c86:	482f      	ldr	r0, [pc, #188]	@ (8003d44 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c88:	f7fe fd19 	bl	80026be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c8c:	4b30      	ldr	r3, [pc, #192]	@ (8003d50 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	099b      	lsrs	r3, r3, #6
 8003c92:	4a30      	ldr	r2, [pc, #192]	@ (8003d54 <HAL_ADC_ConfigChannel+0x7d0>)
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
 8003c98:	099b      	lsrs	r3, r3, #6
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ca6:	e002      	b.n	8003cae <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f9      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cb4:	e03a      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a27      	ldr	r2, [pc, #156]	@ (8003d58 <HAL_ADC_ConfigChannel+0x7d4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d113      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10d      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a22      	ldr	r2, [pc, #136]	@ (8003d5c <HAL_ADC_ConfigChannel+0x7d8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d02a      	beq.n	8003d2c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4818      	ldr	r0, [pc, #96]	@ (8003d44 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ce2:	f7fe fcec 	bl	80026be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ce6:	e021      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1c      	ldr	r2, [pc, #112]	@ (8003d60 <HAL_ADC_ConfigChannel+0x7dc>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d11c      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d116      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a16      	ldr	r2, [pc, #88]	@ (8003d5c <HAL_ADC_ConfigChannel+0x7d8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d011      	beq.n	8003d2c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d10:	4619      	mov	r1, r3
 8003d12:	480c      	ldr	r0, [pc, #48]	@ (8003d44 <HAL_ADC_ConfigChannel+0x7c0>)
 8003d14:	f7fe fcd3 	bl	80026be <LL_ADC_SetCommonPathInternalCh>
 8003d18:	e008      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1e:	f043 0220 	orr.w	r2, r3, #32
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d34:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	37d8      	adds	r7, #216	@ 0xd8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	80080000 	.word	0x80080000
 8003d44:	50000300 	.word	0x50000300
 8003d48:	c3210000 	.word	0xc3210000
 8003d4c:	90c00010 	.word	0x90c00010
 8003d50:	200003f4 	.word	0x200003f4
 8003d54:	053e2d63 	.word	0x053e2d63
 8003d58:	c7520000 	.word	0xc7520000
 8003d5c:	50000100 	.word	0x50000100
 8003d60:	cb840000 	.word	0xcb840000

08003d64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fe fe81 	bl	8002a7c <LL_ADC_IsEnabled>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d169      	bne.n	8003e54 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	4b36      	ldr	r3, [pc, #216]	@ (8003e60 <ADC_Enable+0xfc>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00d      	beq.n	8003daa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d92:	f043 0210 	orr.w	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d9e:	f043 0201 	orr.w	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e055      	b.n	8003e56 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fe50 	bl	8002a54 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003db4:	482b      	ldr	r0, [pc, #172]	@ (8003e64 <ADC_Enable+0x100>)
 8003db6:	f7fe fc95 	bl	80026e4 <LL_ADC_GetCommonPathInternalCh>
 8003dba:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003dbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d013      	beq.n	8003dec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dc4:	4b28      	ldr	r3, [pc, #160]	@ (8003e68 <ADC_Enable+0x104>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	099b      	lsrs	r3, r3, #6
 8003dca:	4a28      	ldr	r2, [pc, #160]	@ (8003e6c <ADC_Enable+0x108>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	099b      	lsrs	r3, r3, #6
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003dde:	e002      	b.n	8003de6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f9      	bne.n	8003de0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003dec:	f7fe fc48 	bl	8002680 <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003df2:	e028      	b.n	8003e46 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fe fe3f 	bl	8002a7c <LL_ADC_IsEnabled>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d104      	bne.n	8003e0e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fe fe23 	bl	8002a54 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e0e:	f7fe fc37 	bl	8002680 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d914      	bls.n	8003e46 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d00d      	beq.n	8003e46 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2e:	f043 0210 	orr.w	r2, r3, #16
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e3a:	f043 0201 	orr.w	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e007      	b.n	8003e56 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d1cf      	bne.n	8003df4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	8000003f 	.word	0x8000003f
 8003e64:	50000300 	.word	0x50000300
 8003e68:	200003f4 	.word	0x200003f4
 8003e6c:	053e2d63 	.word	0x053e2d63

08003e70 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e82:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d14b      	bne.n	8003f22 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d021      	beq.n	8003ee8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fe fcc7 	bl	800283c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d032      	beq.n	8003f1a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d12b      	bne.n	8003f1a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d11f      	bne.n	8003f1a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ede:	f043 0201 	orr.w	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ee6:	e018      	b.n	8003f1a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d111      	bne.n	8003f1a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d105      	bne.n	8003f1a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f12:	f043 0201 	orr.w	r2, r3, #1
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7ff fb0a 	bl	8003534 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f20:	e00e      	b.n	8003f40 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f7ff fb1e 	bl	8003570 <HAL_ADC_ErrorCallback>
}
 8003f34:	e004      	b.n	8003f40 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	4798      	blx	r3
}
 8003f40:	bf00      	nop
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f7ff faf6 	bl	8003548 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f5c:	bf00      	nop
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f82:	f043 0204 	orr.w	r2, r3, #4
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f7ff faf0 	bl	8003570 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <LL_ADC_IsEnabled>:
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <LL_ADC_IsEnabled+0x18>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <LL_ADC_IsEnabled+0x1a>
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <LL_ADC_REG_IsConversionOngoing>:
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d101      	bne.n	8003fd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b0a1      	sub	sp, #132	@ 0x84
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004062:	2302      	movs	r3, #2
 8004064:	e08b      	b.n	800417e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800406e:	2300      	movs	r3, #0
 8004070:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004072:	2300      	movs	r3, #0
 8004074:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800407e:	d102      	bne.n	8004086 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004080:	4b41      	ldr	r3, [pc, #260]	@ (8004188 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	e001      	b.n	800408a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10b      	bne.n	80040a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004094:	f043 0220 	orr.w	r2, r3, #32
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e06a      	b.n	800417e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff ff87 	bl	8003fbe <LL_ADC_REG_IsConversionOngoing>
 80040b0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff ff81 	bl	8003fbe <LL_ADC_REG_IsConversionOngoing>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d14c      	bne.n	800415c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80040c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d149      	bne.n	800415c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040c8:	4b30      	ldr	r3, [pc, #192]	@ (800418c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80040ca:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d028      	beq.n	8004126 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80040d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	6859      	ldr	r1, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80040e6:	035b      	lsls	r3, r3, #13
 80040e8:	430b      	orrs	r3, r1
 80040ea:	431a      	orrs	r2, r3
 80040ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80040f4:	f7ff ff50 	bl	8003f98 <LL_ADC_IsEnabled>
 80040f8:	4604      	mov	r4, r0
 80040fa:	4823      	ldr	r0, [pc, #140]	@ (8004188 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80040fc:	f7ff ff4c 	bl	8003f98 <LL_ADC_IsEnabled>
 8004100:	4603      	mov	r3, r0
 8004102:	4323      	orrs	r3, r4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d133      	bne.n	8004170 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004108:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004110:	f023 030f 	bic.w	r3, r3, #15
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	6811      	ldr	r1, [r2, #0]
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	6892      	ldr	r2, [r2, #8]
 800411c:	430a      	orrs	r2, r1
 800411e:	431a      	orrs	r2, r3
 8004120:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004122:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004124:	e024      	b.n	8004170 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004126:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800412e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004130:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004132:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004136:	f7ff ff2f 	bl	8003f98 <LL_ADC_IsEnabled>
 800413a:	4604      	mov	r4, r0
 800413c:	4812      	ldr	r0, [pc, #72]	@ (8004188 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800413e:	f7ff ff2b 	bl	8003f98 <LL_ADC_IsEnabled>
 8004142:	4603      	mov	r3, r0
 8004144:	4323      	orrs	r3, r4
 8004146:	2b00      	cmp	r3, #0
 8004148:	d112      	bne.n	8004170 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800414a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004152:	f023 030f 	bic.w	r3, r3, #15
 8004156:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004158:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800415a:	e009      	b.n	8004170 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004160:	f043 0220 	orr.w	r2, r3, #32
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800416e:	e000      	b.n	8004172 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004170:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800417a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800417e:	4618      	mov	r0, r3
 8004180:	3784      	adds	r7, #132	@ 0x84
 8004182:	46bd      	mov	sp, r7
 8004184:	bd90      	pop	{r4, r7, pc}
 8004186:	bf00      	nop
 8004188:	50000100 	.word	0x50000100
 800418c:	50000300 	.word	0x50000300

08004190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041a0:	4b0c      	ldr	r3, [pc, #48]	@ (80041d4 <__NVIC_SetPriorityGrouping+0x44>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041ac:	4013      	ands	r3, r2
 80041ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041c2:	4a04      	ldr	r2, [pc, #16]	@ (80041d4 <__NVIC_SetPriorityGrouping+0x44>)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	60d3      	str	r3, [r2, #12]
}
 80041c8:	bf00      	nop
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	e000ed00 	.word	0xe000ed00

080041d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041dc:	4b04      	ldr	r3, [pc, #16]	@ (80041f0 <__NVIC_GetPriorityGrouping+0x18>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	0a1b      	lsrs	r3, r3, #8
 80041e2:	f003 0307 	and.w	r3, r3, #7
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	e000ed00 	.word	0xe000ed00

080041f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004202:	2b00      	cmp	r3, #0
 8004204:	db0b      	blt.n	800421e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004206:	79fb      	ldrb	r3, [r7, #7]
 8004208:	f003 021f 	and.w	r2, r3, #31
 800420c:	4907      	ldr	r1, [pc, #28]	@ (800422c <__NVIC_EnableIRQ+0x38>)
 800420e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	2001      	movs	r0, #1
 8004216:	fa00 f202 	lsl.w	r2, r0, r2
 800421a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	e000e100 	.word	0xe000e100

08004230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	6039      	str	r1, [r7, #0]
 800423a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800423c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004240:	2b00      	cmp	r3, #0
 8004242:	db0a      	blt.n	800425a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	b2da      	uxtb	r2, r3
 8004248:	490c      	ldr	r1, [pc, #48]	@ (800427c <__NVIC_SetPriority+0x4c>)
 800424a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424e:	0112      	lsls	r2, r2, #4
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	440b      	add	r3, r1
 8004254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004258:	e00a      	b.n	8004270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	4908      	ldr	r1, [pc, #32]	@ (8004280 <__NVIC_SetPriority+0x50>)
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	3b04      	subs	r3, #4
 8004268:	0112      	lsls	r2, r2, #4
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	440b      	add	r3, r1
 800426e:	761a      	strb	r2, [r3, #24]
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	e000e100 	.word	0xe000e100
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004284:	b480      	push	{r7}
 8004286:	b089      	sub	sp, #36	@ 0x24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f1c3 0307 	rsb	r3, r3, #7
 800429e:	2b04      	cmp	r3, #4
 80042a0:	bf28      	it	cs
 80042a2:	2304      	movcs	r3, #4
 80042a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3304      	adds	r3, #4
 80042aa:	2b06      	cmp	r3, #6
 80042ac:	d902      	bls.n	80042b4 <NVIC_EncodePriority+0x30>
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	3b03      	subs	r3, #3
 80042b2:	e000      	b.n	80042b6 <NVIC_EncodePriority+0x32>
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b8:	f04f 32ff 	mov.w	r2, #4294967295
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	43da      	mvns	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	401a      	ands	r2, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042cc:	f04f 31ff 	mov.w	r1, #4294967295
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	fa01 f303 	lsl.w	r3, r1, r3
 80042d6:	43d9      	mvns	r1, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042dc:	4313      	orrs	r3, r2
         );
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3724      	adds	r7, #36	@ 0x24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
	...

080042ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042fc:	d301      	bcc.n	8004302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042fe:	2301      	movs	r3, #1
 8004300:	e00f      	b.n	8004322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004302:	4a0a      	ldr	r2, [pc, #40]	@ (800432c <SysTick_Config+0x40>)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3b01      	subs	r3, #1
 8004308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800430a:	210f      	movs	r1, #15
 800430c:	f04f 30ff 	mov.w	r0, #4294967295
 8004310:	f7ff ff8e 	bl	8004230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004314:	4b05      	ldr	r3, [pc, #20]	@ (800432c <SysTick_Config+0x40>)
 8004316:	2200      	movs	r2, #0
 8004318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800431a:	4b04      	ldr	r3, [pc, #16]	@ (800432c <SysTick_Config+0x40>)
 800431c:	2207      	movs	r2, #7
 800431e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	e000e010 	.word	0xe000e010

08004330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff ff29 	bl	8004190 <__NVIC_SetPriorityGrouping>
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b086      	sub	sp, #24
 800434a:	af00      	add	r7, sp, #0
 800434c:	4603      	mov	r3, r0
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
 8004352:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004354:	f7ff ff40 	bl	80041d8 <__NVIC_GetPriorityGrouping>
 8004358:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	68b9      	ldr	r1, [r7, #8]
 800435e:	6978      	ldr	r0, [r7, #20]
 8004360:	f7ff ff90 	bl	8004284 <NVIC_EncodePriority>
 8004364:	4602      	mov	r2, r0
 8004366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800436a:	4611      	mov	r1, r2
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff ff5f 	bl	8004230 <__NVIC_SetPriority>
}
 8004372:	bf00      	nop
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	4603      	mov	r3, r0
 8004382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff ff33 	bl	80041f4 <__NVIC_EnableIRQ>
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff ffa4 	bl	80042ec <SysTick_Config>
 80043a4:	4603      	mov	r3, r0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e08d      	b.n	80044de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	4b47      	ldr	r3, [pc, #284]	@ (80044e8 <HAL_DMA_Init+0x138>)
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d80f      	bhi.n	80043ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	4b45      	ldr	r3, [pc, #276]	@ (80044ec <HAL_DMA_Init+0x13c>)
 80043d6:	4413      	add	r3, r2
 80043d8:	4a45      	ldr	r2, [pc, #276]	@ (80044f0 <HAL_DMA_Init+0x140>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	009a      	lsls	r2, r3, #2
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a42      	ldr	r2, [pc, #264]	@ (80044f4 <HAL_DMA_Init+0x144>)
 80043ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80043ec:	e00e      	b.n	800440c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	4b40      	ldr	r3, [pc, #256]	@ (80044f8 <HAL_DMA_Init+0x148>)
 80043f6:	4413      	add	r3, r2
 80043f8:	4a3d      	ldr	r2, [pc, #244]	@ (80044f0 <HAL_DMA_Init+0x140>)
 80043fa:	fba2 2303 	umull	r2, r3, r2, r3
 80043fe:	091b      	lsrs	r3, r3, #4
 8004400:	009a      	lsls	r2, r3, #2
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a3c      	ldr	r2, [pc, #240]	@ (80044fc <HAL_DMA_Init+0x14c>)
 800440a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004426:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004430:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800443c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004448:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f9b6 	bl	80047d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800446c:	d102      	bne.n	8004474 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004488:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d010      	beq.n	80044b4 <HAL_DMA_Init+0x104>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b04      	cmp	r3, #4
 8004498:	d80c      	bhi.n	80044b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f9d6 	bl	800484c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	e008      	b.n	80044c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40020407 	.word	0x40020407
 80044ec:	bffdfff8 	.word	0xbffdfff8
 80044f0:	cccccccd 	.word	0xcccccccd
 80044f4:	40020000 	.word	0x40020000
 80044f8:	bffdfbf8 	.word	0xbffdfbf8
 80044fc:	40020400 	.word	0x40020400

08004500 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_DMA_Start_IT+0x20>
 800451c:	2302      	movs	r3, #2
 800451e:	e066      	b.n	80045ee <HAL_DMA_Start_IT+0xee>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b01      	cmp	r3, #1
 8004532:	d155      	bne.n	80045e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0201 	bic.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f8fb 	bl	8004754 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004562:	2b00      	cmp	r3, #0
 8004564:	d008      	beq.n	8004578 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 020e 	orr.w	r2, r2, #14
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e00f      	b.n	8004598 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0204 	bic.w	r2, r2, #4
 8004586:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 020a 	orr.w	r2, r2, #10
 8004596:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d007      	beq.n	80045b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045b4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045cc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0201 	orr.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e005      	b.n	80045ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80045e8:	2302      	movs	r3, #2
 80045ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004612:	f003 031f 	and.w	r3, r3, #31
 8004616:	2204      	movs	r2, #4
 8004618:	409a      	lsls	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4013      	ands	r3, r2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d026      	beq.n	8004670 <HAL_DMA_IRQHandler+0x7a>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d021      	beq.n	8004670 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d107      	bne.n	800464a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0204 	bic.w	r2, r2, #4
 8004648:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464e:	f003 021f 	and.w	r2, r3, #31
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004656:	2104      	movs	r1, #4
 8004658:	fa01 f202 	lsl.w	r2, r1, r2
 800465c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004662:	2b00      	cmp	r3, #0
 8004664:	d071      	beq.n	800474a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800466e:	e06c      	b.n	800474a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	2202      	movs	r2, #2
 800467a:	409a      	lsls	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4013      	ands	r3, r2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d02e      	beq.n	80046e2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d029      	beq.n	80046e2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 020a 	bic.w	r2, r2, #10
 80046aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b8:	f003 021f 	and.w	r2, r3, #31
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	2102      	movs	r1, #2
 80046c2:	fa01 f202 	lsl.w	r2, r1, r2
 80046c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d038      	beq.n	800474a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80046e0:	e033      	b.n	800474a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e6:	f003 031f 	and.w	r3, r3, #31
 80046ea:	2208      	movs	r2, #8
 80046ec:	409a      	lsls	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d02a      	beq.n	800474c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d025      	beq.n	800474c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 020e 	bic.w	r2, r2, #14
 800470e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004714:	f003 021f 	and.w	r2, r3, #31
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471c:	2101      	movs	r1, #1
 800471e:	fa01 f202 	lsl.w	r2, r1, r2
 8004722:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800473e:	2b00      	cmp	r3, #0
 8004740:	d004      	beq.n	800474c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800474a:	bf00      	nop
 800474c:	bf00      	nop
}
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800476a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004770:	2b00      	cmp	r3, #0
 8004772:	d004      	beq.n	800477e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800477c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004782:	f003 021f 	and.w	r2, r3, #31
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	2101      	movs	r1, #1
 800478c:	fa01 f202 	lsl.w	r2, r1, r2
 8004790:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d108      	bne.n	80047b4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80047b2:	e007      	b.n	80047c4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	60da      	str	r2, [r3, #12]
}
 80047c4:	bf00      	nop
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	4b16      	ldr	r3, [pc, #88]	@ (8004838 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d802      	bhi.n	80047ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80047e4:	4b15      	ldr	r3, [pc, #84]	@ (800483c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	e001      	b.n	80047ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80047ea:	4b15      	ldr	r3, [pc, #84]	@ (8004840 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80047ec:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	3b08      	subs	r3, #8
 80047fa:	4a12      	ldr	r2, [pc, #72]	@ (8004844 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80047fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004808:	089b      	lsrs	r3, r3, #2
 800480a:	009a      	lsls	r2, r3, #2
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4413      	add	r3, r2
 8004810:	461a      	mov	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a0b      	ldr	r2, [pc, #44]	@ (8004848 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800481a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	2201      	movs	r2, #1
 8004824:	409a      	lsls	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800482a:	bf00      	nop
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40020407 	.word	0x40020407
 800483c:	40020800 	.word	0x40020800
 8004840:	40020820 	.word	0x40020820
 8004844:	cccccccd 	.word	0xcccccccd
 8004848:	40020880 	.word	0x40020880

0800484c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	b2db      	uxtb	r3, r3
 800485a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4b0b      	ldr	r3, [pc, #44]	@ (800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	461a      	mov	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a08      	ldr	r2, [pc, #32]	@ (8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800486e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3b01      	subs	r3, #1
 8004874:	f003 031f 	and.w	r3, r3, #31
 8004878:	2201      	movs	r2, #1
 800487a:	409a      	lsls	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	1000823f 	.word	0x1000823f
 8004890:	40020940 	.word	0x40020940

08004894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048a2:	e15a      	b.n	8004b5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	2101      	movs	r1, #1
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	4013      	ands	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 814c 	beq.w	8004b54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d005      	beq.n	80048d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d130      	bne.n	8004936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	2203      	movs	r2, #3
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	43db      	mvns	r3, r3
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4013      	ands	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800490a:	2201      	movs	r2, #1
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43db      	mvns	r3, r3
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	4013      	ands	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	091b      	lsrs	r3, r3, #4
 8004920:	f003 0201 	and.w	r2, r3, #1
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	2b03      	cmp	r3, #3
 8004940:	d017      	beq.n	8004972 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	2203      	movs	r2, #3
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43db      	mvns	r3, r3
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4013      	ands	r3, r2
 8004958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d123      	bne.n	80049c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	08da      	lsrs	r2, r3, #3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3208      	adds	r2, #8
 8004986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800498a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	220f      	movs	r2, #15
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	43db      	mvns	r3, r3
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4013      	ands	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	691a      	ldr	r2, [r3, #16]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	08da      	lsrs	r2, r3, #3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3208      	adds	r2, #8
 80049c0:	6939      	ldr	r1, [r7, #16]
 80049c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	2203      	movs	r2, #3
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	43db      	mvns	r3, r3
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4013      	ands	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 0203 	and.w	r2, r3, #3
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 80a6 	beq.w	8004b54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a08:	4b5b      	ldr	r3, [pc, #364]	@ (8004b78 <HAL_GPIO_Init+0x2e4>)
 8004a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a0c:	4a5a      	ldr	r2, [pc, #360]	@ (8004b78 <HAL_GPIO_Init+0x2e4>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a14:	4b58      	ldr	r3, [pc, #352]	@ (8004b78 <HAL_GPIO_Init+0x2e4>)
 8004a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a20:	4a56      	ldr	r2, [pc, #344]	@ (8004b7c <HAL_GPIO_Init+0x2e8>)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	089b      	lsrs	r3, r3, #2
 8004a26:	3302      	adds	r3, #2
 8004a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	220f      	movs	r2, #15
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4013      	ands	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004a4a:	d01f      	beq.n	8004a8c <HAL_GPIO_Init+0x1f8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a4c      	ldr	r2, [pc, #304]	@ (8004b80 <HAL_GPIO_Init+0x2ec>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d019      	beq.n	8004a88 <HAL_GPIO_Init+0x1f4>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a4b      	ldr	r2, [pc, #300]	@ (8004b84 <HAL_GPIO_Init+0x2f0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d013      	beq.n	8004a84 <HAL_GPIO_Init+0x1f0>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a4a      	ldr	r2, [pc, #296]	@ (8004b88 <HAL_GPIO_Init+0x2f4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00d      	beq.n	8004a80 <HAL_GPIO_Init+0x1ec>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a49      	ldr	r2, [pc, #292]	@ (8004b8c <HAL_GPIO_Init+0x2f8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d007      	beq.n	8004a7c <HAL_GPIO_Init+0x1e8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a48      	ldr	r2, [pc, #288]	@ (8004b90 <HAL_GPIO_Init+0x2fc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d101      	bne.n	8004a78 <HAL_GPIO_Init+0x1e4>
 8004a74:	2305      	movs	r3, #5
 8004a76:	e00a      	b.n	8004a8e <HAL_GPIO_Init+0x1fa>
 8004a78:	2306      	movs	r3, #6
 8004a7a:	e008      	b.n	8004a8e <HAL_GPIO_Init+0x1fa>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	e006      	b.n	8004a8e <HAL_GPIO_Init+0x1fa>
 8004a80:	2303      	movs	r3, #3
 8004a82:	e004      	b.n	8004a8e <HAL_GPIO_Init+0x1fa>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e002      	b.n	8004a8e <HAL_GPIO_Init+0x1fa>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <HAL_GPIO_Init+0x1fa>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	f002 0203 	and.w	r2, r2, #3
 8004a94:	0092      	lsls	r2, r2, #2
 8004a96:	4093      	lsls	r3, r2
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a9e:	4937      	ldr	r1, [pc, #220]	@ (8004b7c <HAL_GPIO_Init+0x2e8>)
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	089b      	lsrs	r3, r3, #2
 8004aa4:	3302      	adds	r3, #2
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004aac:	4b39      	ldr	r3, [pc, #228]	@ (8004b94 <HAL_GPIO_Init+0x300>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ad0:	4a30      	ldr	r2, [pc, #192]	@ (8004b94 <HAL_GPIO_Init+0x300>)
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8004b94 <HAL_GPIO_Init+0x300>)
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004afa:	4a26      	ldr	r2, [pc, #152]	@ (8004b94 <HAL_GPIO_Init+0x300>)
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004b00:	4b24      	ldr	r3, [pc, #144]	@ (8004b94 <HAL_GPIO_Init+0x300>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b24:	4a1b      	ldr	r2, [pc, #108]	@ (8004b94 <HAL_GPIO_Init+0x300>)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8004b94 <HAL_GPIO_Init+0x300>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	43db      	mvns	r3, r3
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4013      	ands	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b4e:	4a11      	ldr	r2, [pc, #68]	@ (8004b94 <HAL_GPIO_Init+0x300>)
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	3301      	adds	r3, #1
 8004b58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	fa22 f303 	lsr.w	r3, r2, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f47f ae9d 	bne.w	80048a4 <HAL_GPIO_Init+0x10>
  }
}
 8004b6a:	bf00      	nop
 8004b6c:	bf00      	nop
 8004b6e:	371c      	adds	r7, #28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	40010000 	.word	0x40010000
 8004b80:	48000400 	.word	0x48000400
 8004b84:	48000800 	.word	0x48000800
 8004b88:	48000c00 	.word	0x48000c00
 8004b8c:	48001000 	.word	0x48001000
 8004b90:	48001400 	.word	0x48001400
 8004b94:	40010400 	.word	0x40010400

08004b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	807b      	strh	r3, [r7, #2]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ba8:	787b      	ldrb	r3, [r7, #1]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bae:	887a      	ldrh	r2, [r7, #2]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bb4:	e002      	b.n	8004bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bb6:	887a      	ldrh	r2, [r7, #2]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e08d      	b.n	8004cf6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fd f9e6 	bl	8001fc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2224      	movs	r2, #36	@ 0x24
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d107      	bne.n	8004c42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c3e:	609a      	str	r2, [r3, #8]
 8004c40:	e006      	b.n	8004c50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004c4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d108      	bne.n	8004c6a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	e007      	b.n	8004c7a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6812      	ldr	r2, [r2, #0]
 8004c84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	69d9      	ldr	r1, [r3, #28]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a1a      	ldr	r2, [r3, #32]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d138      	bne.n	8004d86 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e032      	b.n	8004d88 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2224      	movs	r2, #36	@ 0x24
 8004d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0201 	bic.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d50:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6819      	ldr	r1, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	e000      	b.n	8004d88 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d86:	2302      	movs	r3, #2
  }
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	d139      	bne.n	8004e1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e033      	b.n	8004e20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2224      	movs	r2, #36	@ 0x24
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0201 	bic.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004de6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0201 	orr.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e000      	b.n	8004e20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e1e:	2302      	movs	r3, #2
  }
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e0c0      	b.n	8004fc0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f009 f974 	bl	800e140 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f004 ffbd 	bl	8009de4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]
 8004e6e:	e03e      	b.n	8004eee <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e70:	7bfa      	ldrb	r2, [r7, #15]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	440b      	add	r3, r1
 8004e7e:	3311      	adds	r3, #17
 8004e80:	2201      	movs	r2, #1
 8004e82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e84:	7bfa      	ldrb	r2, [r7, #15]
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	440b      	add	r3, r1
 8004e92:	3310      	adds	r3, #16
 8004e94:	7bfa      	ldrb	r2, [r7, #15]
 8004e96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e98:	7bfa      	ldrb	r2, [r7, #15]
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	440b      	add	r3, r1
 8004ea6:	3313      	adds	r3, #19
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004eac:	7bfa      	ldrb	r2, [r7, #15]
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	440b      	add	r3, r1
 8004eba:	3320      	adds	r3, #32
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ec0:	7bfa      	ldrb	r2, [r7, #15]
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	440b      	add	r3, r1
 8004ece:	3324      	adds	r3, #36	@ 0x24
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	440b      	add	r3, r1
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	3301      	adds	r3, #1
 8004eec:	73fb      	strb	r3, [r7, #15]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	791b      	ldrb	r3, [r3, #4]
 8004ef2:	7bfa      	ldrb	r2, [r7, #15]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d3bb      	bcc.n	8004e70 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	73fb      	strb	r3, [r7, #15]
 8004efc:	e044      	b.n	8004f88 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004efe:	7bfa      	ldrb	r2, [r7, #15]
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	440b      	add	r3, r1
 8004f0c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f14:	7bfa      	ldrb	r2, [r7, #15]
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	440b      	add	r3, r1
 8004f22:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f26:	7bfa      	ldrb	r2, [r7, #15]
 8004f28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f2a:	7bfa      	ldrb	r2, [r7, #15]
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	440b      	add	r3, r1
 8004f38:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f40:	7bfa      	ldrb	r2, [r7, #15]
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	440b      	add	r3, r1
 8004f4e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f56:	7bfa      	ldrb	r2, [r7, #15]
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	440b      	add	r3, r1
 8004f64:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f6c:	7bfa      	ldrb	r2, [r7, #15]
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	440b      	add	r3, r1
 8004f7a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
 8004f84:	3301      	adds	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	791b      	ldrb	r3, [r3, #4]
 8004f8c:	7bfa      	ldrb	r2, [r7, #15]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d3b5      	bcc.n	8004efe <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004f9e:	f004 ff3c 	bl	8009e1a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	7a9b      	ldrb	r3, [r3, #10]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d102      	bne.n	8004fbe <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f001 fc42 	bl	8006842 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <HAL_PCD_Start+0x16>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	e012      	b.n	8005004 <HAL_PCD_Start+0x3c>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f004 fee3 	bl	8009db6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f007 f9a5 	bl	800c344 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f007 f9aa 	bl	800c372 <USB_ReadInterrupts>
 800501e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fb06 	bl	800563c <PCD_EP_ISR_Handler>

    return;
 8005030:	e110      	b.n	8005254 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005038:	2b00      	cmp	r3, #0
 800503a:	d013      	beq.n	8005064 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005044:	b29a      	uxth	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800504e:	b292      	uxth	r2, r2
 8005050:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f009 f904 	bl	800e262 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800505a:	2100      	movs	r1, #0
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f8fc 	bl	800525a <HAL_PCD_SetAddress>

    return;
 8005062:	e0f7      	b.n	8005254 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00c      	beq.n	8005088 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005076:	b29a      	uxth	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005080:	b292      	uxth	r2, r2
 8005082:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005086:	e0e5      	b.n	8005254 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00c      	beq.n	80050ac <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800509a:	b29a      	uxth	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050a4:	b292      	uxth	r2, r2
 80050a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80050aa:	e0d3      	b.n	8005254 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d034      	beq.n	8005120 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80050be:	b29a      	uxth	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0204 	bic.w	r2, r2, #4
 80050c8:	b292      	uxth	r2, r2
 80050ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0208 	bic.w	r2, r2, #8
 80050e0:	b292      	uxth	r2, r2
 80050e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d107      	bne.n	8005100 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80050f8:	2100      	movs	r1, #0
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f009 faa4 	bl	800e648 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f009 f8e7 	bl	800e2d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800510e:	b29a      	uxth	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005118:	b292      	uxth	r2, r2
 800511a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800511e:	e099      	b.n	8005254 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005126:	2b00      	cmp	r3, #0
 8005128:	d027      	beq.n	800517a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005132:	b29a      	uxth	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0208 	orr.w	r2, r2, #8
 800513c:	b292      	uxth	r2, r2
 800513e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800514a:	b29a      	uxth	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005154:	b292      	uxth	r2, r2
 8005156:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005162:	b29a      	uxth	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0204 	orr.w	r2, r2, #4
 800516c:	b292      	uxth	r2, r2
 800516e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f009 f894 	bl	800e2a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005178:	e06c      	b.n	8005254 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005180:	2b00      	cmp	r3, #0
 8005182:	d040      	beq.n	8005206 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800518c:	b29a      	uxth	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005196:	b292      	uxth	r2, r2
 8005198:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d12b      	bne.n	80051fe <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0204 	orr.w	r2, r2, #4
 80051b8:	b292      	uxth	r2, r2
 80051ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0208 	orr.w	r2, r2, #8
 80051d0:	b292      	uxth	r2, r2
 80051d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	089b      	lsrs	r3, r3, #2
 80051ea:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80051f4:	2101      	movs	r1, #1
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f009 fa26 	bl	800e648 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80051fc:	e02a      	b.n	8005254 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f009 f84e 	bl	800e2a0 <HAL_PCD_SuspendCallback>
    return;
 8005204:	e026      	b.n	8005254 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00f      	beq.n	8005230 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005218:	b29a      	uxth	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005222:	b292      	uxth	r2, r2
 8005224:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f009 f80c 	bl	800e246 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800522e:	e011      	b.n	8005254 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00c      	beq.n	8005254 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005242:	b29a      	uxth	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800524c:	b292      	uxth	r2, r2
 800524e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005252:	bf00      	nop
  }
}
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b082      	sub	sp, #8
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	460b      	mov	r3, r1
 8005264:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_PCD_SetAddress+0x1a>
 8005270:	2302      	movs	r3, #2
 8005272:	e012      	b.n	800529a <HAL_PCD_SetAddress+0x40>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	78fa      	ldrb	r2, [r7, #3]
 8005280:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	4611      	mov	r1, r2
 800528a:	4618      	mov	r0, r3
 800528c:	f007 f846 	bl	800c31c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b084      	sub	sp, #16
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	4608      	mov	r0, r1
 80052ac:	4611      	mov	r1, r2
 80052ae:	461a      	mov	r2, r3
 80052b0:	4603      	mov	r3, r0
 80052b2:	70fb      	strb	r3, [r7, #3]
 80052b4:	460b      	mov	r3, r1
 80052b6:	803b      	strh	r3, [r7, #0]
 80052b8:	4613      	mov	r3, r2
 80052ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80052c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	da0e      	bge.n	80052e6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	f003 0207 	and.w	r2, r3, #7
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	3310      	adds	r3, #16
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	4413      	add	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	705a      	strb	r2, [r3, #1]
 80052e4:	e00e      	b.n	8005304 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	f003 0207 	and.w	r2, r3, #7
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4413      	add	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	b2da      	uxtb	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005310:	883b      	ldrh	r3, [r7, #0]
 8005312:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	78ba      	ldrb	r2, [r7, #2]
 800531e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005320:	78bb      	ldrb	r3, [r7, #2]
 8005322:	2b02      	cmp	r3, #2
 8005324:	d102      	bne.n	800532c <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_PCD_EP_Open+0x98>
 8005336:	2302      	movs	r3, #2
 8005338:	e00e      	b.n	8005358 <HAL_PCD_EP_Open+0xb6>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68f9      	ldr	r1, [r7, #12]
 8005348:	4618      	mov	r0, r3
 800534a:	f004 fd85 	bl	8009e58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005356:	7afb      	ldrb	r3, [r7, #11]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800536c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005370:	2b00      	cmp	r3, #0
 8005372:	da0e      	bge.n	8005392 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	f003 0207 	and.w	r2, r3, #7
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	3310      	adds	r3, #16
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	4413      	add	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	705a      	strb	r2, [r3, #1]
 8005390:	e00e      	b.n	80053b0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005392:	78fb      	ldrb	r3, [r7, #3]
 8005394:	f003 0207 	and.w	r2, r3, #7
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	4413      	add	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_PCD_EP_Close+0x6a>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e00e      	b.n	80053e8 <HAL_PCD_EP_Close+0x88>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	4618      	mov	r0, r3
 80053da:	f005 f901 	bl	800a5e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	607a      	str	r2, [r7, #4]
 80053fa:	603b      	str	r3, [r7, #0]
 80053fc:	460b      	mov	r3, r1
 80053fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005400:	7afb      	ldrb	r3, [r7, #11]
 8005402:	f003 0207 	and.w	r2, r3, #7
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4413      	add	r3, r2
 8005416:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2200      	movs	r2, #0
 8005428:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2200      	movs	r2, #0
 800542e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005430:	7afb      	ldrb	r3, [r7, #11]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	b2da      	uxtb	r2, r3
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6979      	ldr	r1, [r7, #20]
 8005442:	4618      	mov	r0, r3
 8005444:	f005 fab9 	bl	800a9ba <USB_EPStartXfer>

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	460b      	mov	r3, r1
 800545c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	f003 0207 	and.w	r2, r3, #7
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	440b      	add	r3, r1
 8005470:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005474:	681b      	ldr	r3, [r3, #0]
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b086      	sub	sp, #24
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
 800548e:	460b      	mov	r3, r1
 8005490:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005492:	7afb      	ldrb	r3, [r7, #11]
 8005494:	f003 0207 	and.w	r2, r3, #7
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	3310      	adds	r3, #16
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2200      	movs	r2, #0
 80054c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2201      	movs	r2, #1
 80054cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054ce:	7afb      	ldrb	r3, [r7, #11]
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6979      	ldr	r1, [r7, #20]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f005 fa6a 	bl	800a9ba <USB_EPStartXfer>

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	7912      	ldrb	r2, [r2, #4]
 8005506:	4293      	cmp	r3, r2
 8005508:	d901      	bls.n	800550e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e03e      	b.n	800558c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800550e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005512:	2b00      	cmp	r3, #0
 8005514:	da0e      	bge.n	8005534 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005516:	78fb      	ldrb	r3, [r7, #3]
 8005518:	f003 0207 	and.w	r2, r3, #7
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	3310      	adds	r3, #16
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	4413      	add	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	705a      	strb	r2, [r3, #1]
 8005532:	e00c      	b.n	800554e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005534:	78fa      	ldrb	r2, [r7, #3]
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	4413      	add	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	b2da      	uxtb	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_PCD_EP_SetStall+0x7e>
 800556a:	2302      	movs	r3, #2
 800556c:	e00e      	b.n	800558c <HAL_PCD_EP_SetStall+0x9c>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68f9      	ldr	r1, [r7, #12]
 800557c:	4618      	mov	r0, r3
 800557e:	f006 fdce 	bl	800c11e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	7912      	ldrb	r2, [r2, #4]
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d901      	bls.n	80055b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e040      	b.n	8005634 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	da0e      	bge.n	80055d8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	f003 0207 	and.w	r2, r3, #7
 80055c0:	4613      	mov	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	3310      	adds	r3, #16
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	4413      	add	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	705a      	strb	r2, [r3, #1]
 80055d6:	e00e      	b.n	80055f6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	f003 0207 	and.w	r2, r3, #7
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	4413      	add	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	b2da      	uxtb	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_PCD_EP_ClrStall+0x82>
 8005612:	2302      	movs	r3, #2
 8005614:	e00e      	b.n	8005634 <HAL_PCD_EP_ClrStall+0xa0>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68f9      	ldr	r1, [r7, #12]
 8005624:	4618      	mov	r0, r3
 8005626:	f006 fdcb 	bl	800c1c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b096      	sub	sp, #88	@ 0x58
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005644:	e3ad      	b.n	8005da2 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800564e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005652:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8005660:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005664:	2b00      	cmp	r3, #0
 8005666:	f040 816f 	bne.w	8005948 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800566a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800566e:	f003 0310 	and.w	r3, r3, #16
 8005672:	2b00      	cmp	r3, #0
 8005674:	d14c      	bne.n	8005710 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b29b      	uxth	r3, r3
 800567e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005686:	81fb      	strh	r3, [r7, #14]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	89fb      	ldrh	r3, [r7, #14]
 800568e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3310      	adds	r3, #16
 800569e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	461a      	mov	r2, r3
 80056ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	4413      	add	r3, r2
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	4413      	add	r3, r2
 80056ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80056c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ca:	695a      	ldr	r2, [r3, #20]
 80056cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	441a      	add	r2, r3
 80056d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80056d6:	2100      	movs	r1, #0
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f008 fd9a 	bl	800e212 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	7b1b      	ldrb	r3, [r3, #12]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 835c 	beq.w	8005da2 <PCD_EP_ISR_Handler+0x766>
 80056ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f040 8357 	bne.w	8005da2 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	7b1b      	ldrb	r3, [r3, #12]
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	731a      	strb	r2, [r3, #12]
 800570e:	e348      	b.n	8005da2 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005716:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005722:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005726:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800572a:	2b00      	cmp	r3, #0
 800572c:	d032      	beq.n	8005794 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005736:	b29b      	uxth	r3, r3
 8005738:	461a      	mov	r2, r3
 800573a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4413      	add	r3, r2
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6812      	ldr	r2, [r2, #0]
 8005746:	4413      	add	r3, r2
 8005748:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005754:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005762:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005766:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005768:	b29b      	uxth	r3, r3
 800576a:	f006 fe54 	bl	800c416 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29a      	uxth	r2, r3
 8005776:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800577a:	4013      	ands	r3, r2
 800577c:	823b      	strh	r3, [r7, #16]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	8a3a      	ldrh	r2, [r7, #16]
 8005784:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005788:	b292      	uxth	r2, r2
 800578a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f008 fd13 	bl	800e1b8 <HAL_PCD_SetupStageCallback>
 8005792:	e306      	b.n	8005da2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005794:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8005798:	2b00      	cmp	r3, #0
 800579a:	f280 8302 	bge.w	8005da2 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80057aa:	4013      	ands	r3, r2
 80057ac:	83fb      	strh	r3, [r7, #30]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	8bfa      	ldrh	r2, [r7, #30]
 80057b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80057b8:	b292      	uxth	r2, r2
 80057ba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	4413      	add	r3, r2
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	4413      	add	r3, r2
 80057d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80057e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d019      	beq.n	8005820 <PCD_EP_ISR_Handler+0x1e4>
 80057ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d015      	beq.n	8005820 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6818      	ldr	r0, [r3, #0]
 80057f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057fa:	6959      	ldr	r1, [r3, #20]
 80057fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057fe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005802:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005804:	b29b      	uxth	r3, r3
 8005806:	f006 fe06 	bl	800c416 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800580a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800580c:	695a      	ldr	r2, [r3, #20]
 800580e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	441a      	add	r2, r3
 8005814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005816:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005818:	2100      	movs	r1, #0
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f008 fcde 	bl	800e1dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800582a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800582e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005832:	2b00      	cmp	r3, #0
 8005834:	f040 82b5 	bne.w	8005da2 <PCD_EP_ISR_Handler+0x766>
 8005838:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800583c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005840:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005844:	f000 82ad 	beq.w	8005da2 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	61bb      	str	r3, [r7, #24]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005856:	b29b      	uxth	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	4413      	add	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005872:	b29a      	uxth	r2, r3
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	801a      	strh	r2, [r3, #0]
 8005878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <PCD_EP_ISR_Handler+0x25a>
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	b29b      	uxth	r3, r3
 8005886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800588a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588e:	b29a      	uxth	r2, r3
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	801a      	strh	r2, [r3, #0]
 8005894:	e039      	b.n	800590a <PCD_EP_ISR_Handler+0x2ce>
 8005896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	2b3e      	cmp	r3, #62	@ 0x3e
 800589c:	d818      	bhi.n	80058d0 <PCD_EP_ISR_Handler+0x294>
 800589e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <PCD_EP_ISR_Handler+0x27c>
 80058b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058b4:	3301      	adds	r3, #1
 80058b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29a      	uxth	r2, r3
 80058be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	029b      	lsls	r3, r3, #10
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	4313      	orrs	r3, r2
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	e01c      	b.n	800590a <PCD_EP_ISR_Handler+0x2ce>
 80058d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	095b      	lsrs	r3, r3, #5
 80058d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80058d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f003 031f 	and.w	r3, r3, #31
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d102      	bne.n	80058ea <PCD_EP_ISR_Handler+0x2ae>
 80058e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058e6:	3b01      	subs	r3, #1
 80058e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	029b      	lsls	r3, r3, #10
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	4313      	orrs	r3, r2
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005904:	b29a      	uxth	r2, r3
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29b      	uxth	r3, r3
 8005912:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800591a:	827b      	strh	r3, [r7, #18]
 800591c:	8a7b      	ldrh	r3, [r7, #18]
 800591e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005922:	827b      	strh	r3, [r7, #18]
 8005924:	8a7b      	ldrh	r3, [r7, #18]
 8005926:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800592a:	827b      	strh	r3, [r7, #18]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	8a7b      	ldrh	r3, [r7, #18]
 8005932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800593a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800593e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005942:	b29b      	uxth	r3, r3
 8005944:	8013      	strh	r3, [r2, #0]
 8005946:	e22c      	b.n	8005da2 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	461a      	mov	r2, r3
 800594e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800595c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8005960:	2b00      	cmp	r3, #0
 8005962:	f280 80f6 	bge.w	8005b52 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29a      	uxth	r2, r3
 8005978:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800597c:	4013      	ands	r3, r2
 800597e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8005994:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005998:	b292      	uxth	r2, r2
 800599a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800599c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	4413      	add	r3, r2
 80059b0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80059b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059b4:	7b1b      	ldrb	r3, [r3, #12]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d123      	bne.n	8005a02 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	4413      	add	r3, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6812      	ldr	r2, [r2, #0]
 80059d2:	4413      	add	r3, r2
 80059d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059de:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80059e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 808e 	beq.w	8005b08 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6818      	ldr	r0, [r3, #0]
 80059f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059f2:	6959      	ldr	r1, [r3, #20]
 80059f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059f6:	88da      	ldrh	r2, [r3, #6]
 80059f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80059fc:	f006 fd0b 	bl	800c416 <USB_ReadPMA>
 8005a00:	e082      	b.n	8005b08 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a04:	78db      	ldrb	r3, [r3, #3]
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d10a      	bne.n	8005a20 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005a0a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f9d3 	bl	8005dbe <HAL_PCD_EP_DB_Receive>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005a1e:	e073      	b.n	8005b08 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	441a      	add	r2, r3
 8005a4c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005a50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d022      	beq.n	8005ac4 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	4413      	add	r3, r2
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6812      	ldr	r2, [r2, #0]
 8005a96:	4413      	add	r3, r2
 8005a98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aa2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005aa6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d02c      	beq.n	8005b08 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ab4:	6959      	ldr	r1, [r3, #20]
 8005ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ab8:	891a      	ldrh	r2, [r3, #8]
 8005aba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005abe:	f006 fcaa 	bl	800c416 <USB_ReadPMA>
 8005ac2:	e021      	b.n	8005b08 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6812      	ldr	r2, [r2, #0]
 8005adc:	4413      	add	r3, r2
 8005ade:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ae8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005aec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d009      	beq.n	8005b08 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6818      	ldr	r0, [r3, #0]
 8005af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005afa:	6959      	ldr	r1, [r3, #20]
 8005afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005afe:	895a      	ldrh	r2, [r3, #10]
 8005b00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005b04:	f006 fc87 	bl	800c416 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005b10:	441a      	add	r2, r3
 8005b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b14:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005b1e:	441a      	add	r2, r3
 8005b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b22:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <PCD_EP_ISR_Handler+0x4fc>
 8005b2c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d206      	bcs.n	8005b46 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f008 fb4c 	bl	800e1dc <HAL_PCD_DataOutStageCallback>
 8005b44:	e005      	b.n	8005b52 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f004 ff34 	bl	800a9ba <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005b52:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 8121 	beq.w	8005da2 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8005b60:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	3310      	adds	r3, #16
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	4413      	add	r3, r2
 8005b72:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	441a      	add	r2, r3
 8005ba0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb2:	78db      	ldrb	r3, [r3, #3]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	f040 80a2 	bne.w	8005cfe <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8005bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bc2:	7b1b      	ldrb	r3, [r3, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 8093 	beq.w	8005cf0 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005bca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d046      	beq.n	8005c64 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bd8:	785b      	ldrb	r3, [r3, #1]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d126      	bne.n	8005c2c <PCD_EP_ISR_Handler+0x5f0>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	461a      	mov	r2, r3
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	4413      	add	r3, r2
 8005bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	00da      	lsls	r2, r3, #3
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfe:	4413      	add	r3, r2
 8005c00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c04:	623b      	str	r3, [r7, #32]
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	801a      	strh	r2, [r3, #0]
 8005c2a:	e061      	b.n	8005cf0 <PCD_EP_ISR_Handler+0x6b4>
 8005c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c2e:	785b      	ldrb	r3, [r3, #1]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d15d      	bne.n	8005cf0 <PCD_EP_ISR_Handler+0x6b4>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	461a      	mov	r2, r3
 8005c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c48:	4413      	add	r3, r2
 8005c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	00da      	lsls	r2, r3, #3
 8005c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c54:	4413      	add	r3, r2
 8005c56:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5e:	2200      	movs	r2, #0
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	e045      	b.n	8005cf0 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c6c:	785b      	ldrb	r3, [r3, #1]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d126      	bne.n	8005cc0 <PCD_EP_ISR_Handler+0x684>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c86:	4413      	add	r3, r2
 8005c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	00da      	lsls	r2, r3, #3
 8005c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c92:	4413      	add	r3, r2
 8005c94:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca8:	801a      	strh	r2, [r3, #0]
 8005caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbc:	801a      	strh	r2, [r3, #0]
 8005cbe:	e017      	b.n	8005cf0 <PCD_EP_ISR_Handler+0x6b4>
 8005cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cc2:	785b      	ldrb	r3, [r3, #1]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d113      	bne.n	8005cf0 <PCD_EP_ISR_Handler+0x6b4>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cd6:	4413      	add	r3, r2
 8005cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	00da      	lsls	r2, r3, #3
 8005ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cec:	2200      	movs	r2, #0
 8005cee:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f008 fa8b 	bl	800e212 <HAL_PCD_DataInStageCallback>
 8005cfc:	e051      	b.n	8005da2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005cfe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d144      	bne.n	8005d94 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	461a      	mov	r2, r3
 8005d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	4413      	add	r3, r2
 8005d24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d2e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d907      	bls.n	8005d4e <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8005d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d46:	1ad2      	subs	r2, r2, r3
 8005d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d4a:	619a      	str	r2, [r3, #24]
 8005d4c:	e002      	b.n	8005d54 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8005d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d50:	2200      	movs	r2, #0
 8005d52:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d106      	bne.n	8005d6a <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	4619      	mov	r1, r3
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f008 fa55 	bl	800e212 <HAL_PCD_DataInStageCallback>
 8005d68:	e01b      	b.n	8005da2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d6c:	695a      	ldr	r2, [r3, #20]
 8005d6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d72:	441a      	add	r2, r3
 8005d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d76:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d7a:	69da      	ldr	r2, [r3, #28]
 8005d7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d80:	441a      	add	r2, r3
 8005d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d84:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f004 fe14 	bl	800a9ba <USB_EPStartXfer>
 8005d92:	e006      	b.n	8005da2 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005d94:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005d98:	461a      	mov	r2, r3
 8005d9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f917 	bl	8005fd0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	b21b      	sxth	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f6ff ac49 	blt.w	8005646 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3758      	adds	r7, #88	@ 0x58
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b088      	sub	sp, #32
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005dcc:	88fb      	ldrh	r3, [r7, #6]
 8005dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d07c      	beq.n	8005ed0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	461a      	mov	r2, r3
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	4413      	add	r3, r2
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	6812      	ldr	r2, [r2, #0]
 8005dee:	4413      	add	r3, r2
 8005df0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dfa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	699a      	ldr	r2, [r3, #24]
 8005e00:	8b7b      	ldrh	r3, [r7, #26]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d306      	bcc.n	8005e14 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	699a      	ldr	r2, [r3, #24]
 8005e0a:	8b7b      	ldrh	r3, [r7, #26]
 8005e0c:	1ad2      	subs	r2, r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	619a      	str	r2, [r3, #24]
 8005e12:	e002      	b.n	8005e1a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2200      	movs	r2, #0
 8005e18:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d123      	bne.n	8005e6a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e3c:	833b      	strh	r3, [r7, #24]
 8005e3e:	8b3b      	ldrh	r3, [r7, #24]
 8005e40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e44:	833b      	strh	r3, [r7, #24]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	441a      	add	r2, r3
 8005e54:	8b3b      	ldrh	r3, [r7, #24]
 8005e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005e6a:	88fb      	ldrh	r3, [r7, #6]
 8005e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01f      	beq.n	8005eb4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e8e:	82fb      	strh	r3, [r7, #22]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	441a      	add	r2, r3
 8005e9e:	8afb      	ldrh	r3, [r7, #22]
 8005ea0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ea4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ea8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005eb4:	8b7b      	ldrh	r3, [r7, #26]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 8085 	beq.w	8005fc6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	6959      	ldr	r1, [r3, #20]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	891a      	ldrh	r2, [r3, #8]
 8005ec8:	8b7b      	ldrh	r3, [r7, #26]
 8005eca:	f006 faa4 	bl	800c416 <USB_ReadPMA>
 8005ece:	e07a      	b.n	8005fc6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	461a      	mov	r2, r3
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	4413      	add	r3, r2
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	6812      	ldr	r2, [r2, #0]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ef4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	699a      	ldr	r2, [r3, #24]
 8005efa:	8b7b      	ldrh	r3, [r7, #26]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d306      	bcc.n	8005f0e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	699a      	ldr	r2, [r3, #24]
 8005f04:	8b7b      	ldrh	r3, [r7, #26]
 8005f06:	1ad2      	subs	r2, r2, r3
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	619a      	str	r2, [r3, #24]
 8005f0c:	e002      	b.n	8005f14 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2200      	movs	r2, #0
 8005f12:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d123      	bne.n	8005f64 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	461a      	mov	r2, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f36:	83fb      	strh	r3, [r7, #30]
 8005f38:	8bfb      	ldrh	r3, [r7, #30]
 8005f3a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f3e:	83fb      	strh	r3, [r7, #30]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	441a      	add	r2, r3
 8005f4e:	8bfb      	ldrh	r3, [r7, #30]
 8005f50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005f64:	88fb      	ldrh	r3, [r7, #6]
 8005f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d11f      	bne.n	8005fae <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	461a      	mov	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f88:	83bb      	strh	r3, [r7, #28]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	441a      	add	r2, r3
 8005f98:	8bbb      	ldrh	r3, [r7, #28]
 8005f9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fa6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005fae:	8b7b      	ldrh	r3, [r7, #26]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d008      	beq.n	8005fc6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6818      	ldr	r0, [r3, #0]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	6959      	ldr	r1, [r3, #20]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	895a      	ldrh	r2, [r3, #10]
 8005fc0:	8b7b      	ldrh	r3, [r7, #26]
 8005fc2:	f006 fa28 	bl	800c416 <USB_ReadPMA>
    }
  }

  return count;
 8005fc6:	8b7b      	ldrh	r3, [r7, #26]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3720      	adds	r7, #32
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b0a4      	sub	sp, #144	@ 0x90
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 81db 	beq.w	80063a0 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	4413      	add	r3, r2
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	6812      	ldr	r2, [r2, #0]
 8006002:	4413      	add	r3, r2
 8006004:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800600e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800601a:	429a      	cmp	r2, r3
 800601c:	d907      	bls.n	800602e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006026:	1ad2      	subs	r2, r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	619a      	str	r2, [r3, #24]
 800602c:	e002      	b.n	8006034 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2200      	movs	r2, #0
 8006032:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	f040 80b9 	bne.w	80061b0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	785b      	ldrb	r3, [r3, #1]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d126      	bne.n	8006094 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006054:	b29b      	uxth	r3, r3
 8006056:	461a      	mov	r2, r3
 8006058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605a:	4413      	add	r3, r2
 800605c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	00da      	lsls	r2, r3, #3
 8006064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006066:	4413      	add	r3, r2
 8006068:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800606c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800606e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006078:	b29a      	uxth	r2, r3
 800607a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607c:	801a      	strh	r2, [r3, #0]
 800607e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800608c:	b29a      	uxth	r2, r3
 800608e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006090:	801a      	strh	r2, [r3, #0]
 8006092:	e01a      	b.n	80060ca <HAL_PCD_EP_DB_Transmit+0xfa>
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	785b      	ldrb	r3, [r3, #1]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d116      	bne.n	80060ca <HAL_PCD_EP_DB_Transmit+0xfa>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b0:	4413      	add	r3, r2
 80060b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	00da      	lsls	r2, r3, #3
 80060ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060bc:	4413      	add	r3, r2
 80060be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80060c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80060c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c6:	2200      	movs	r2, #0
 80060c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	785b      	ldrb	r3, [r3, #1]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d126      	bne.n	8006126 <HAL_PCD_EP_DB_Transmit+0x156>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	4413      	add	r3, r2
 80060ee:	61fb      	str	r3, [r7, #28]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	00da      	lsls	r2, r3, #3
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	4413      	add	r3, r2
 80060fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800610a:	b29a      	uxth	r2, r3
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	801a      	strh	r2, [r3, #0]
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800611a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800611e:	b29a      	uxth	r2, r3
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	e017      	b.n	8006156 <HAL_PCD_EP_DB_Transmit+0x186>
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	785b      	ldrb	r3, [r3, #1]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d113      	bne.n	8006156 <HAL_PCD_EP_DB_Transmit+0x186>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006136:	b29b      	uxth	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	4413      	add	r3, r2
 800613e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	00da      	lsls	r2, r3, #3
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	4413      	add	r3, r2
 800614a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800614e:	623b      	str	r3, [r7, #32]
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	2200      	movs	r2, #0
 8006154:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	4619      	mov	r1, r3
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f008 f858 	bl	800e212 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006162:	88fb      	ldrh	r3, [r7, #6]
 8006164:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 82fa 	beq.w	8006762 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006188:	82fb      	strh	r3, [r7, #22]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	441a      	add	r2, r3
 8006198:	8afb      	ldrh	r3, [r7, #22]
 800619a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800619e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	8013      	strh	r3, [r2, #0]
 80061ae:	e2d8      	b.n	8006762 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80061b0:	88fb      	ldrh	r3, [r7, #6]
 80061b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d021      	beq.n	80061fe <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	441a      	add	r2, r3
 80061e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80061ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006204:	2b01      	cmp	r3, #1
 8006206:	f040 82ac 	bne.w	8006762 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	695a      	ldr	r2, [r3, #20]
 800620e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006212:	441a      	add	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	69da      	ldr	r2, [r3, #28]
 800621c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006220:	441a      	add	r2, r3
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	6a1a      	ldr	r2, [r3, #32]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	429a      	cmp	r2, r3
 8006230:	d30b      	bcc.n	800624a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	6a1a      	ldr	r2, [r3, #32]
 800623e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006242:	1ad2      	subs	r2, r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	621a      	str	r2, [r3, #32]
 8006248:	e017      	b.n	800627a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d108      	bne.n	8006264 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8006252:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006256:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006262:	e00a      	b.n	800627a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2200      	movs	r2, #0
 8006278:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	785b      	ldrb	r3, [r3, #1]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d165      	bne.n	800634e <HAL_PCD_EP_DB_Transmit+0x37e>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006290:	b29b      	uxth	r3, r3
 8006292:	461a      	mov	r2, r3
 8006294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006296:	4413      	add	r3, r2
 8006298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	00da      	lsls	r2, r3, #3
 80062a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062a2:	4413      	add	r3, r2
 80062a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b8:	801a      	strh	r2, [r3, #0]
 80062ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <HAL_PCD_EP_DB_Transmit+0x308>
 80062c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d4:	801a      	strh	r2, [r3, #0]
 80062d6:	e057      	b.n	8006388 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80062d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80062de:	d818      	bhi.n	8006312 <HAL_PCD_EP_DB_Transmit+0x342>
 80062e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062e4:	085b      	lsrs	r3, r3, #1
 80062e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <HAL_PCD_EP_DB_Transmit+0x32a>
 80062f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062f6:	3301      	adds	r3, #1
 80062f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	b29a      	uxth	r2, r3
 8006300:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006302:	b29b      	uxth	r3, r3
 8006304:	029b      	lsls	r3, r3, #10
 8006306:	b29b      	uxth	r3, r3
 8006308:	4313      	orrs	r3, r2
 800630a:	b29a      	uxth	r2, r3
 800630c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630e:	801a      	strh	r2, [r3, #0]
 8006310:	e03a      	b.n	8006388 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006312:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006316:	095b      	lsrs	r3, r3, #5
 8006318:	64bb      	str	r3, [r7, #72]	@ 0x48
 800631a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	2b00      	cmp	r3, #0
 8006324:	d102      	bne.n	800632c <HAL_PCD_EP_DB_Transmit+0x35c>
 8006326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006328:	3b01      	subs	r3, #1
 800632a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800632c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b29a      	uxth	r2, r3
 8006332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006334:	b29b      	uxth	r3, r3
 8006336:	029b      	lsls	r3, r3, #10
 8006338:	b29b      	uxth	r3, r3
 800633a:	4313      	orrs	r3, r2
 800633c:	b29b      	uxth	r3, r3
 800633e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006346:	b29a      	uxth	r2, r3
 8006348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800634a:	801a      	strh	r2, [r3, #0]
 800634c:	e01c      	b.n	8006388 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	785b      	ldrb	r3, [r3, #1]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d118      	bne.n	8006388 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	647b      	str	r3, [r7, #68]	@ 0x44
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006364:	b29b      	uxth	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800636a:	4413      	add	r3, r2
 800636c:	647b      	str	r3, [r7, #68]	@ 0x44
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	00da      	lsls	r2, r3, #3
 8006374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006376:	4413      	add	r3, r2
 8006378:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800637c:	643b      	str	r3, [r7, #64]	@ 0x40
 800637e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006382:	b29a      	uxth	r2, r3
 8006384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006386:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	6959      	ldr	r1, [r3, #20]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	891a      	ldrh	r2, [r3, #8]
 8006394:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006398:	b29b      	uxth	r3, r3
 800639a:	f005 fffa 	bl	800c392 <USB_WritePMA>
 800639e:	e1e0      	b.n	8006762 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	461a      	mov	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	4413      	add	r3, r2
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	6812      	ldr	r2, [r2, #0]
 80063b8:	4413      	add	r3, r2
 80063ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063c4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	699a      	ldr	r2, [r3, #24]
 80063cc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d307      	bcc.n	80063e4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	699a      	ldr	r2, [r3, #24]
 80063d8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80063dc:	1ad2      	subs	r2, r2, r3
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	619a      	str	r2, [r3, #24]
 80063e2:	e002      	b.n	80063ea <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2200      	movs	r2, #0
 80063e8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f040 80c0 	bne.w	8006574 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	785b      	ldrb	r3, [r3, #1]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d126      	bne.n	800644a <HAL_PCD_EP_DB_Transmit+0x47a>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800640a:	b29b      	uxth	r3, r3
 800640c:	461a      	mov	r2, r3
 800640e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006410:	4413      	add	r3, r2
 8006412:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	00da      	lsls	r2, r3, #3
 800641a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800641c:	4413      	add	r3, r2
 800641e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006422:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006424:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	b29b      	uxth	r3, r3
 800642a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800642e:	b29a      	uxth	r2, r3
 8006430:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006432:	801a      	strh	r2, [r3, #0]
 8006434:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006442:	b29a      	uxth	r2, r3
 8006444:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006446:	801a      	strh	r2, [r3, #0]
 8006448:	e01a      	b.n	8006480 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	785b      	ldrb	r3, [r3, #1]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d116      	bne.n	8006480 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	667b      	str	r3, [r7, #100]	@ 0x64
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006460:	b29b      	uxth	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006466:	4413      	add	r3, r2
 8006468:	667b      	str	r3, [r7, #100]	@ 0x64
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	00da      	lsls	r2, r3, #3
 8006470:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006472:	4413      	add	r3, r2
 8006474:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006478:	663b      	str	r3, [r7, #96]	@ 0x60
 800647a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800647c:	2200      	movs	r2, #0
 800647e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	677b      	str	r3, [r7, #116]	@ 0x74
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	785b      	ldrb	r3, [r3, #1]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d12b      	bne.n	80064e6 <HAL_PCD_EP_DB_Transmit+0x516>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800649c:	b29b      	uxth	r3, r3
 800649e:	461a      	mov	r2, r3
 80064a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064a2:	4413      	add	r3, r2
 80064a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	00da      	lsls	r2, r3, #3
 80064ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064ae:	4413      	add	r3, r2
 80064b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80064b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064ca:	801a      	strh	r2, [r3, #0]
 80064cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064dc:	b29a      	uxth	r2, r3
 80064de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064e2:	801a      	strh	r2, [r3, #0]
 80064e4:	e017      	b.n	8006516 <HAL_PCD_EP_DB_Transmit+0x546>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d113      	bne.n	8006516 <HAL_PCD_EP_DB_Transmit+0x546>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	461a      	mov	r2, r3
 80064fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064fc:	4413      	add	r3, r2
 80064fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	00da      	lsls	r2, r3, #3
 8006506:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006508:	4413      	add	r3, r2
 800650a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800650e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006510:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006512:	2200      	movs	r2, #0
 8006514:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	4619      	mov	r1, r3
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f007 fe78 	bl	800e212 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006522:	88fb      	ldrh	r3, [r7, #6]
 8006524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006528:	2b00      	cmp	r3, #0
 800652a:	f040 811a 	bne.w	8006762 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	b29b      	uxth	r3, r3
 8006540:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006548:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	441a      	add	r2, r3
 800655a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800655e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006566:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800656a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800656e:	b29b      	uxth	r3, r3
 8006570:	8013      	strh	r3, [r2, #0]
 8006572:	e0f6      	b.n	8006762 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006574:	88fb      	ldrh	r3, [r7, #6]
 8006576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d121      	bne.n	80065c2 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	b29b      	uxth	r3, r3
 8006590:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006594:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006598:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	441a      	add	r2, r3
 80065aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80065ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065be:	b29b      	uxth	r3, r3
 80065c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	f040 80ca 	bne.w	8006762 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	695a      	ldr	r2, [r3, #20]
 80065d2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80065d6:	441a      	add	r2, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	69da      	ldr	r2, [r3, #28]
 80065e0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80065e4:	441a      	add	r2, r3
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6a1a      	ldr	r2, [r3, #32]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d30b      	bcc.n	800660e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	6a1a      	ldr	r2, [r3, #32]
 8006602:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006606:	1ad2      	subs	r2, r2, r3
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	621a      	str	r2, [r3, #32]
 800660c:	e017      	b.n	800663e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d108      	bne.n	8006628 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8006616:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800661a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006626:	e00a      	b.n	800663e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2200      	movs	r2, #0
 8006634:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	657b      	str	r3, [r7, #84]	@ 0x54
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	785b      	ldrb	r3, [r3, #1]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d165      	bne.n	8006718 <HAL_PCD_EP_DB_Transmit+0x748>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800665a:	b29b      	uxth	r3, r3
 800665c:	461a      	mov	r2, r3
 800665e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006660:	4413      	add	r3, r2
 8006662:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	00da      	lsls	r2, r3, #3
 800666a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800666c:	4413      	add	r3, r2
 800666e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006672:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006674:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	b29b      	uxth	r3, r3
 800667a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800667e:	b29a      	uxth	r2, r3
 8006680:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006682:	801a      	strh	r2, [r3, #0]
 8006684:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10a      	bne.n	80066a2 <HAL_PCD_EP_DB_Transmit+0x6d2>
 800668c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	b29b      	uxth	r3, r3
 8006692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800669a:	b29a      	uxth	r2, r3
 800669c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800669e:	801a      	strh	r2, [r3, #0]
 80066a0:	e054      	b.n	800674c <HAL_PCD_EP_DB_Transmit+0x77c>
 80066a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80066a8:	d818      	bhi.n	80066dc <HAL_PCD_EP_DB_Transmit+0x70c>
 80066aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066ae:	085b      	lsrs	r3, r3, #1
 80066b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <HAL_PCD_EP_DB_Transmit+0x6f4>
 80066be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066c0:	3301      	adds	r3, #1
 80066c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	029b      	lsls	r3, r3, #10
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	4313      	orrs	r3, r2
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066d8:	801a      	strh	r2, [r3, #0]
 80066da:	e037      	b.n	800674c <HAL_PCD_EP_DB_Transmit+0x77c>
 80066dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066e8:	f003 031f 	and.w	r3, r3, #31
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d102      	bne.n	80066f6 <HAL_PCD_EP_DB_Transmit+0x726>
 80066f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066f2:	3b01      	subs	r3, #1
 80066f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066fe:	b29b      	uxth	r3, r3
 8006700:	029b      	lsls	r3, r3, #10
 8006702:	b29b      	uxth	r3, r3
 8006704:	4313      	orrs	r3, r2
 8006706:	b29b      	uxth	r3, r3
 8006708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006710:	b29a      	uxth	r2, r3
 8006712:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006714:	801a      	strh	r2, [r3, #0]
 8006716:	e019      	b.n	800674c <HAL_PCD_EP_DB_Transmit+0x77c>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d115      	bne.n	800674c <HAL_PCD_EP_DB_Transmit+0x77c>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006728:	b29b      	uxth	r3, r3
 800672a:	461a      	mov	r2, r3
 800672c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800672e:	4413      	add	r3, r2
 8006730:	657b      	str	r3, [r7, #84]	@ 0x54
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	00da      	lsls	r2, r3, #3
 8006738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800673a:	4413      	add	r3, r2
 800673c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006740:	653b      	str	r3, [r7, #80]	@ 0x50
 8006742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006746:	b29a      	uxth	r2, r3
 8006748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800674a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6818      	ldr	r0, [r3, #0]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	6959      	ldr	r1, [r3, #20]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	895a      	ldrh	r2, [r3, #10]
 8006758:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800675c:	b29b      	uxth	r3, r3
 800675e:	f005 fe18 	bl	800c392 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	b29b      	uxth	r3, r3
 8006774:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006778:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800677c:	82bb      	strh	r3, [r7, #20]
 800677e:	8abb      	ldrh	r3, [r7, #20]
 8006780:	f083 0310 	eor.w	r3, r3, #16
 8006784:	82bb      	strh	r3, [r7, #20]
 8006786:	8abb      	ldrh	r3, [r7, #20]
 8006788:	f083 0320 	eor.w	r3, r3, #32
 800678c:	82bb      	strh	r3, [r7, #20]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	441a      	add	r2, r3
 800679c:	8abb      	ldrh	r3, [r7, #20]
 800679e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3790      	adds	r7, #144	@ 0x90
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	607b      	str	r3, [r7, #4]
 80067c6:	460b      	mov	r3, r1
 80067c8:	817b      	strh	r3, [r7, #10]
 80067ca:	4613      	mov	r3, r2
 80067cc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80067ce:	897b      	ldrh	r3, [r7, #10]
 80067d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00b      	beq.n	80067f2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067da:	897b      	ldrh	r3, [r7, #10]
 80067dc:	f003 0207 	and.w	r2, r3, #7
 80067e0:	4613      	mov	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	3310      	adds	r3, #16
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	4413      	add	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	e009      	b.n	8006806 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80067f2:	897a      	ldrh	r2, [r7, #10]
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006806:	893b      	ldrh	r3, [r7, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d107      	bne.n	800681c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2200      	movs	r2, #0
 8006810:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	b29a      	uxth	r2, r3
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	80da      	strh	r2, [r3, #6]
 800681a:	e00b      	b.n	8006834 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	2201      	movs	r2, #1
 8006820:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	b29a      	uxth	r2, r3
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	0c1b      	lsrs	r3, r3, #16
 800682e:	b29a      	uxth	r2, r3
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	371c      	adds	r7, #28
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006842:	b480      	push	{r7}
 8006844:	b085      	sub	sp, #20
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006866:	b29b      	uxth	r3, r3
 8006868:	f043 0301 	orr.w	r3, r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800687a:	b29b      	uxth	r3, r3
 800687c:	f043 0302 	orr.w	r3, r3, #2
 8006880:	b29a      	uxth	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
	...

08006898 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d141      	bne.n	800692a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80068a6:	4b4b      	ldr	r3, [pc, #300]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80068ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068b2:	d131      	bne.n	8006918 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068b4:	4b47      	ldr	r3, [pc, #284]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ba:	4a46      	ldr	r2, [pc, #280]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80068c4:	4b43      	ldr	r3, [pc, #268]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80068cc:	4a41      	ldr	r2, [pc, #260]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80068d4:	4b40      	ldr	r3, [pc, #256]	@ (80069d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2232      	movs	r2, #50	@ 0x32
 80068da:	fb02 f303 	mul.w	r3, r2, r3
 80068de:	4a3f      	ldr	r2, [pc, #252]	@ (80069dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80068e0:	fba2 2303 	umull	r2, r3, r2, r3
 80068e4:	0c9b      	lsrs	r3, r3, #18
 80068e6:	3301      	adds	r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068ea:	e002      	b.n	80068f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068f2:	4b38      	ldr	r3, [pc, #224]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068fe:	d102      	bne.n	8006906 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1f2      	bne.n	80068ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006906:	4b33      	ldr	r3, [pc, #204]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800690e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006912:	d158      	bne.n	80069c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e057      	b.n	80069c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006918:	4b2e      	ldr	r3, [pc, #184]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800691a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800691e:	4a2d      	ldr	r2, [pc, #180]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006920:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006924:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006928:	e04d      	b.n	80069c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006930:	d141      	bne.n	80069b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006932:	4b28      	ldr	r3, [pc, #160]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800693a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800693e:	d131      	bne.n	80069a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006940:	4b24      	ldr	r3, [pc, #144]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006946:	4a23      	ldr	r2, [pc, #140]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800694c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006950:	4b20      	ldr	r3, [pc, #128]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006958:	4a1e      	ldr	r2, [pc, #120]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800695a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800695e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006960:	4b1d      	ldr	r3, [pc, #116]	@ (80069d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2232      	movs	r2, #50	@ 0x32
 8006966:	fb02 f303 	mul.w	r3, r2, r3
 800696a:	4a1c      	ldr	r2, [pc, #112]	@ (80069dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800696c:	fba2 2303 	umull	r2, r3, r2, r3
 8006970:	0c9b      	lsrs	r3, r3, #18
 8006972:	3301      	adds	r3, #1
 8006974:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006976:	e002      	b.n	800697e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3b01      	subs	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800697e:	4b15      	ldr	r3, [pc, #84]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800698a:	d102      	bne.n	8006992 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1f2      	bne.n	8006978 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006992:	4b10      	ldr	r3, [pc, #64]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800699a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800699e:	d112      	bne.n	80069c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e011      	b.n	80069c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069a4:	4b0b      	ldr	r3, [pc, #44]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069aa:	4a0a      	ldr	r2, [pc, #40]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80069b4:	e007      	b.n	80069c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80069b6:	4b07      	ldr	r3, [pc, #28]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80069be:	4a05      	ldr	r2, [pc, #20]	@ (80069d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80069c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	40007000 	.word	0x40007000
 80069d8:	200003f4 	.word	0x200003f4
 80069dc:	431bde83 	.word	0x431bde83

080069e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80069e4:	4b05      	ldr	r3, [pc, #20]	@ (80069fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	4a04      	ldr	r2, [pc, #16]	@ (80069fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069ee:	6093      	str	r3, [r2, #8]
}
 80069f0:	bf00      	nop
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40007000 	.word	0x40007000

08006a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e2fe      	b.n	8007010 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d075      	beq.n	8006b0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a1e:	4b97      	ldr	r3, [pc, #604]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 030c 	and.w	r3, r3, #12
 8006a26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a28:	4b94      	ldr	r3, [pc, #592]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f003 0303 	and.w	r3, r3, #3
 8006a30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	2b0c      	cmp	r3, #12
 8006a36:	d102      	bne.n	8006a3e <HAL_RCC_OscConfig+0x3e>
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d002      	beq.n	8006a44 <HAL_RCC_OscConfig+0x44>
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d10b      	bne.n	8006a5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a44:	4b8d      	ldr	r3, [pc, #564]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d05b      	beq.n	8006b08 <HAL_RCC_OscConfig+0x108>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d157      	bne.n	8006b08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e2d9      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a64:	d106      	bne.n	8006a74 <HAL_RCC_OscConfig+0x74>
 8006a66:	4b85      	ldr	r3, [pc, #532]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a84      	ldr	r2, [pc, #528]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	e01d      	b.n	8006ab0 <HAL_RCC_OscConfig+0xb0>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a7c:	d10c      	bne.n	8006a98 <HAL_RCC_OscConfig+0x98>
 8006a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a7e      	ldr	r2, [pc, #504]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	4b7c      	ldr	r3, [pc, #496]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a7b      	ldr	r2, [pc, #492]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	e00b      	b.n	8006ab0 <HAL_RCC_OscConfig+0xb0>
 8006a98:	4b78      	ldr	r3, [pc, #480]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a77      	ldr	r2, [pc, #476]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	4b75      	ldr	r3, [pc, #468]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a74      	ldr	r2, [pc, #464]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006aaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d013      	beq.n	8006ae0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab8:	f7fb fde2 	bl	8002680 <HAL_GetTick>
 8006abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ac0:	f7fb fdde 	bl	8002680 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b64      	cmp	r3, #100	@ 0x64
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e29e      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ad2:	4b6a      	ldr	r3, [pc, #424]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0f0      	beq.n	8006ac0 <HAL_RCC_OscConfig+0xc0>
 8006ade:	e014      	b.n	8006b0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae0:	f7fb fdce 	bl	8002680 <HAL_GetTick>
 8006ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ae6:	e008      	b.n	8006afa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ae8:	f7fb fdca 	bl	8002680 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b64      	cmp	r3, #100	@ 0x64
 8006af4:	d901      	bls.n	8006afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e28a      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006afa:	4b60      	ldr	r3, [pc, #384]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1f0      	bne.n	8006ae8 <HAL_RCC_OscConfig+0xe8>
 8006b06:	e000      	b.n	8006b0a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d075      	beq.n	8006c02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b16:	4b59      	ldr	r3, [pc, #356]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f003 030c 	and.w	r3, r3, #12
 8006b1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b20:	4b56      	ldr	r3, [pc, #344]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f003 0303 	and.w	r3, r3, #3
 8006b28:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	2b0c      	cmp	r3, #12
 8006b2e:	d102      	bne.n	8006b36 <HAL_RCC_OscConfig+0x136>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d002      	beq.n	8006b3c <HAL_RCC_OscConfig+0x13c>
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	d11f      	bne.n	8006b7c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b3c:	4b4f      	ldr	r3, [pc, #316]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d005      	beq.n	8006b54 <HAL_RCC_OscConfig+0x154>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e25d      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b54:	4b49      	ldr	r3, [pc, #292]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	061b      	lsls	r3, r3, #24
 8006b62:	4946      	ldr	r1, [pc, #280]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006b68:	4b45      	ldr	r3, [pc, #276]	@ (8006c80 <HAL_RCC_OscConfig+0x280>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fb fd3b 	bl	80025e8 <HAL_InitTick>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d043      	beq.n	8006c00 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e249      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d023      	beq.n	8006bcc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b84:	4b3d      	ldr	r3, [pc, #244]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a3c      	ldr	r2, [pc, #240]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b90:	f7fb fd76 	bl	8002680 <HAL_GetTick>
 8006b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b96:	e008      	b.n	8006baa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b98:	f7fb fd72 	bl	8002680 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e232      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006baa:	4b34      	ldr	r3, [pc, #208]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0f0      	beq.n	8006b98 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bb6:	4b31      	ldr	r3, [pc, #196]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	061b      	lsls	r3, r3, #24
 8006bc4:	492d      	ldr	r1, [pc, #180]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	604b      	str	r3, [r1, #4]
 8006bca:	e01a      	b.n	8006c02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a2a      	ldr	r2, [pc, #168]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006bd2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd8:	f7fb fd52 	bl	8002680 <HAL_GetTick>
 8006bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bde:	e008      	b.n	8006bf2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006be0:	f7fb fd4e 	bl	8002680 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e20e      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bf2:	4b22      	ldr	r3, [pc, #136]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1f0      	bne.n	8006be0 <HAL_RCC_OscConfig+0x1e0>
 8006bfe:	e000      	b.n	8006c02 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d041      	beq.n	8006c92 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d01c      	beq.n	8006c50 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c16:	4b19      	ldr	r3, [pc, #100]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c1c:	4a17      	ldr	r2, [pc, #92]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006c1e:	f043 0301 	orr.w	r3, r3, #1
 8006c22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c26:	f7fb fd2b 	bl	8002680 <HAL_GetTick>
 8006c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c2c:	e008      	b.n	8006c40 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c2e:	f7fb fd27 	bl	8002680 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d901      	bls.n	8006c40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e1e7      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c40:	4b0e      	ldr	r3, [pc, #56]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0ef      	beq.n	8006c2e <HAL_RCC_OscConfig+0x22e>
 8006c4e:	e020      	b.n	8006c92 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c50:	4b0a      	ldr	r3, [pc, #40]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c56:	4a09      	ldr	r2, [pc, #36]	@ (8006c7c <HAL_RCC_OscConfig+0x27c>)
 8006c58:	f023 0301 	bic.w	r3, r3, #1
 8006c5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c60:	f7fb fd0e 	bl	8002680 <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c66:	e00d      	b.n	8006c84 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c68:	f7fb fd0a 	bl	8002680 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d906      	bls.n	8006c84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e1ca      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
 8006c7a:	bf00      	nop
 8006c7c:	40021000 	.word	0x40021000
 8006c80:	200003f8 	.word	0x200003f8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c84:	4b8c      	ldr	r3, [pc, #560]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1ea      	bne.n	8006c68 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0304 	and.w	r3, r3, #4
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 80a6 	beq.w	8006dec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006ca4:	4b84      	ldr	r3, [pc, #528]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d101      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x2b4>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e000      	b.n	8006cb6 <HAL_RCC_OscConfig+0x2b6>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00d      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cba:	4b7f      	ldr	r3, [pc, #508]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cbe:	4a7e      	ldr	r2, [pc, #504]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cc6:	4b7c      	ldr	r3, [pc, #496]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cd6:	4b79      	ldr	r3, [pc, #484]	@ (8006ebc <HAL_RCC_OscConfig+0x4bc>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d118      	bne.n	8006d14 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ce2:	4b76      	ldr	r3, [pc, #472]	@ (8006ebc <HAL_RCC_OscConfig+0x4bc>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a75      	ldr	r2, [pc, #468]	@ (8006ebc <HAL_RCC_OscConfig+0x4bc>)
 8006ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cee:	f7fb fcc7 	bl	8002680 <HAL_GetTick>
 8006cf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cf4:	e008      	b.n	8006d08 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cf6:	f7fb fcc3 	bl	8002680 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e183      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d08:	4b6c      	ldr	r3, [pc, #432]	@ (8006ebc <HAL_RCC_OscConfig+0x4bc>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0f0      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d108      	bne.n	8006d2e <HAL_RCC_OscConfig+0x32e>
 8006d1c:	4b66      	ldr	r3, [pc, #408]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d22:	4a65      	ldr	r2, [pc, #404]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006d24:	f043 0301 	orr.w	r3, r3, #1
 8006d28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d2c:	e024      	b.n	8006d78 <HAL_RCC_OscConfig+0x378>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	2b05      	cmp	r3, #5
 8006d34:	d110      	bne.n	8006d58 <HAL_RCC_OscConfig+0x358>
 8006d36:	4b60      	ldr	r3, [pc, #384]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d3c:	4a5e      	ldr	r2, [pc, #376]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006d3e:	f043 0304 	orr.w	r3, r3, #4
 8006d42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d46:	4b5c      	ldr	r3, [pc, #368]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d4c:	4a5a      	ldr	r2, [pc, #360]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006d4e:	f043 0301 	orr.w	r3, r3, #1
 8006d52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d56:	e00f      	b.n	8006d78 <HAL_RCC_OscConfig+0x378>
 8006d58:	4b57      	ldr	r3, [pc, #348]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d5e:	4a56      	ldr	r2, [pc, #344]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006d60:	f023 0301 	bic.w	r3, r3, #1
 8006d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d68:	4b53      	ldr	r3, [pc, #332]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6e:	4a52      	ldr	r2, [pc, #328]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006d70:	f023 0304 	bic.w	r3, r3, #4
 8006d74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d016      	beq.n	8006dae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d80:	f7fb fc7e 	bl	8002680 <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d86:	e00a      	b.n	8006d9e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d88:	f7fb fc7a 	bl	8002680 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e138      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d9e:	4b46      	ldr	r3, [pc, #280]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0ed      	beq.n	8006d88 <HAL_RCC_OscConfig+0x388>
 8006dac:	e015      	b.n	8006dda <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dae:	f7fb fc67 	bl	8002680 <HAL_GetTick>
 8006db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006db4:	e00a      	b.n	8006dcc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006db6:	f7fb fc63 	bl	8002680 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e121      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1ed      	bne.n	8006db6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006dda:	7ffb      	ldrb	r3, [r7, #31]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d105      	bne.n	8006dec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006de0:	4b35      	ldr	r3, [pc, #212]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de4:	4a34      	ldr	r2, [pc, #208]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006de6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d03c      	beq.n	8006e72 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01c      	beq.n	8006e3a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e00:	4b2d      	ldr	r3, [pc, #180]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e06:	4a2c      	ldr	r2, [pc, #176]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006e08:	f043 0301 	orr.w	r3, r3, #1
 8006e0c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e10:	f7fb fc36 	bl	8002680 <HAL_GetTick>
 8006e14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e16:	e008      	b.n	8006e2a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e18:	f7fb fc32 	bl	8002680 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d901      	bls.n	8006e2a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e0f2      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e2a:	4b23      	ldr	r3, [pc, #140]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006e2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d0ef      	beq.n	8006e18 <HAL_RCC_OscConfig+0x418>
 8006e38:	e01b      	b.n	8006e72 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006e3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e40:	4a1d      	ldr	r2, [pc, #116]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006e42:	f023 0301 	bic.w	r3, r3, #1
 8006e46:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e4a:	f7fb fc19 	bl	8002680 <HAL_GetTick>
 8006e4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e50:	e008      	b.n	8006e64 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e52:	f7fb fc15 	bl	8002680 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d901      	bls.n	8006e64 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e0d5      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e64:	4b14      	ldr	r3, [pc, #80]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1ef      	bne.n	8006e52 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f000 80c9 	beq.w	800700e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f003 030c 	and.w	r3, r3, #12
 8006e84:	2b0c      	cmp	r3, #12
 8006e86:	f000 8083 	beq.w	8006f90 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d15e      	bne.n	8006f50 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e92:	4b09      	ldr	r3, [pc, #36]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a08      	ldr	r2, [pc, #32]	@ (8006eb8 <HAL_RCC_OscConfig+0x4b8>)
 8006e98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9e:	f7fb fbef 	bl	8002680 <HAL_GetTick>
 8006ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ea4:	e00c      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea6:	f7fb fbeb 	bl	8002680 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d905      	bls.n	8006ec0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e0ab      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ec0:	4b55      	ldr	r3, [pc, #340]	@ (8007018 <HAL_RCC_OscConfig+0x618>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1ec      	bne.n	8006ea6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ecc:	4b52      	ldr	r3, [pc, #328]	@ (8007018 <HAL_RCC_OscConfig+0x618>)
 8006ece:	68da      	ldr	r2, [r3, #12]
 8006ed0:	4b52      	ldr	r3, [pc, #328]	@ (800701c <HAL_RCC_OscConfig+0x61c>)
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	6a11      	ldr	r1, [r2, #32]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006edc:	3a01      	subs	r2, #1
 8006ede:	0112      	lsls	r2, r2, #4
 8006ee0:	4311      	orrs	r1, r2
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006ee6:	0212      	lsls	r2, r2, #8
 8006ee8:	4311      	orrs	r1, r2
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006eee:	0852      	lsrs	r2, r2, #1
 8006ef0:	3a01      	subs	r2, #1
 8006ef2:	0552      	lsls	r2, r2, #21
 8006ef4:	4311      	orrs	r1, r2
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006efa:	0852      	lsrs	r2, r2, #1
 8006efc:	3a01      	subs	r2, #1
 8006efe:	0652      	lsls	r2, r2, #25
 8006f00:	4311      	orrs	r1, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006f06:	06d2      	lsls	r2, r2, #27
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	4943      	ldr	r1, [pc, #268]	@ (8007018 <HAL_RCC_OscConfig+0x618>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f10:	4b41      	ldr	r3, [pc, #260]	@ (8007018 <HAL_RCC_OscConfig+0x618>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a40      	ldr	r2, [pc, #256]	@ (8007018 <HAL_RCC_OscConfig+0x618>)
 8006f16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f1a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f1c:	4b3e      	ldr	r3, [pc, #248]	@ (8007018 <HAL_RCC_OscConfig+0x618>)
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	4a3d      	ldr	r2, [pc, #244]	@ (8007018 <HAL_RCC_OscConfig+0x618>)
 8006f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f28:	f7fb fbaa 	bl	8002680 <HAL_GetTick>
 8006f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f30:	f7fb fba6 	bl	8002680 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e066      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f42:	4b35      	ldr	r3, [pc, #212]	@ (8007018 <HAL_RCC_OscConfig+0x618>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0f0      	beq.n	8006f30 <HAL_RCC_OscConfig+0x530>
 8006f4e:	e05e      	b.n	800700e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f50:	4b31      	ldr	r3, [pc, #196]	@ (8007018 <HAL_RCC_OscConfig+0x618>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a30      	ldr	r2, [pc, #192]	@ (8007018 <HAL_RCC_OscConfig+0x618>)
 8006f56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f5c:	f7fb fb90 	bl	8002680 <HAL_GetTick>
 8006f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f62:	e008      	b.n	8006f76 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f64:	f7fb fb8c 	bl	8002680 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e04c      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f76:	4b28      	ldr	r3, [pc, #160]	@ (8007018 <HAL_RCC_OscConfig+0x618>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1f0      	bne.n	8006f64 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006f82:	4b25      	ldr	r3, [pc, #148]	@ (8007018 <HAL_RCC_OscConfig+0x618>)
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	4924      	ldr	r1, [pc, #144]	@ (8007018 <HAL_RCC_OscConfig+0x618>)
 8006f88:	4b25      	ldr	r3, [pc, #148]	@ (8007020 <HAL_RCC_OscConfig+0x620>)
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	60cb      	str	r3, [r1, #12]
 8006f8e:	e03e      	b.n	800700e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d101      	bne.n	8006f9c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e039      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8007018 <HAL_RCC_OscConfig+0x618>)
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f003 0203 	and.w	r2, r3, #3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d12c      	bne.n	800700a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d123      	bne.n	800700a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d11b      	bne.n	800700a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fdc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d113      	bne.n	800700a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fec:	085b      	lsrs	r3, r3, #1
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d109      	bne.n	800700a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007000:	085b      	lsrs	r3, r3, #1
 8007002:	3b01      	subs	r3, #1
 8007004:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007006:	429a      	cmp	r2, r3
 8007008:	d001      	beq.n	800700e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e000      	b.n	8007010 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3720      	adds	r7, #32
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	40021000 	.word	0x40021000
 800701c:	019f800c 	.word	0x019f800c
 8007020:	feeefffc 	.word	0xfeeefffc

08007024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e11e      	b.n	800727a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800703c:	4b91      	ldr	r3, [pc, #580]	@ (8007284 <HAL_RCC_ClockConfig+0x260>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 030f 	and.w	r3, r3, #15
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d910      	bls.n	800706c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800704a:	4b8e      	ldr	r3, [pc, #568]	@ (8007284 <HAL_RCC_ClockConfig+0x260>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f023 020f 	bic.w	r2, r3, #15
 8007052:	498c      	ldr	r1, [pc, #560]	@ (8007284 <HAL_RCC_ClockConfig+0x260>)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	4313      	orrs	r3, r2
 8007058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800705a:	4b8a      	ldr	r3, [pc, #552]	@ (8007284 <HAL_RCC_ClockConfig+0x260>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 030f 	and.w	r3, r3, #15
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d001      	beq.n	800706c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e106      	b.n	800727a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d073      	beq.n	8007160 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	2b03      	cmp	r3, #3
 800707e:	d129      	bne.n	80070d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007080:	4b81      	ldr	r3, [pc, #516]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e0f4      	b.n	800727a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007090:	f000 f99e 	bl	80073d0 <RCC_GetSysClockFreqFromPLLSource>
 8007094:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	4a7c      	ldr	r2, [pc, #496]	@ (800728c <HAL_RCC_ClockConfig+0x268>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d93f      	bls.n	800711e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800709e:	4b7a      	ldr	r3, [pc, #488]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d009      	beq.n	80070be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d033      	beq.n	800711e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d12f      	bne.n	800711e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070be:	4b72      	ldr	r3, [pc, #456]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070c6:	4a70      	ldr	r2, [pc, #448]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 80070c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80070ce:	2380      	movs	r3, #128	@ 0x80
 80070d0:	617b      	str	r3, [r7, #20]
 80070d2:	e024      	b.n	800711e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d107      	bne.n	80070ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070dc:	4b6a      	ldr	r3, [pc, #424]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d109      	bne.n	80070fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e0c6      	b.n	800727a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070ec:	4b66      	ldr	r3, [pc, #408]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e0be      	b.n	800727a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80070fc:	f000 f8ce 	bl	800729c <HAL_RCC_GetSysClockFreq>
 8007100:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	4a61      	ldr	r2, [pc, #388]	@ (800728c <HAL_RCC_ClockConfig+0x268>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d909      	bls.n	800711e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800710a:	4b5f      	ldr	r3, [pc, #380]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007112:	4a5d      	ldr	r2, [pc, #372]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 8007114:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007118:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800711a:	2380      	movs	r3, #128	@ 0x80
 800711c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800711e:	4b5a      	ldr	r3, [pc, #360]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f023 0203 	bic.w	r2, r3, #3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	4957      	ldr	r1, [pc, #348]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 800712c:	4313      	orrs	r3, r2
 800712e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007130:	f7fb faa6 	bl	8002680 <HAL_GetTick>
 8007134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007136:	e00a      	b.n	800714e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007138:	f7fb faa2 	bl	8002680 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007146:	4293      	cmp	r3, r2
 8007148:	d901      	bls.n	800714e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e095      	b.n	800727a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800714e:	4b4e      	ldr	r3, [pc, #312]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f003 020c 	and.w	r2, r3, #12
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	429a      	cmp	r2, r3
 800715e:	d1eb      	bne.n	8007138 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d023      	beq.n	80071b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	2b00      	cmp	r3, #0
 8007176:	d005      	beq.n	8007184 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007178:	4b43      	ldr	r3, [pc, #268]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	4a42      	ldr	r2, [pc, #264]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 800717e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007182:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0308 	and.w	r3, r3, #8
 800718c:	2b00      	cmp	r3, #0
 800718e:	d007      	beq.n	80071a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007190:	4b3d      	ldr	r3, [pc, #244]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007198:	4a3b      	ldr	r2, [pc, #236]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 800719a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800719e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071a0:	4b39      	ldr	r3, [pc, #228]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	4936      	ldr	r1, [pc, #216]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	608b      	str	r3, [r1, #8]
 80071b2:	e008      	b.n	80071c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2b80      	cmp	r3, #128	@ 0x80
 80071b8:	d105      	bne.n	80071c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80071ba:	4b33      	ldr	r3, [pc, #204]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	4a32      	ldr	r2, [pc, #200]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 80071c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071c6:	4b2f      	ldr	r3, [pc, #188]	@ (8007284 <HAL_RCC_ClockConfig+0x260>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d21d      	bcs.n	8007210 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007284 <HAL_RCC_ClockConfig+0x260>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f023 020f 	bic.w	r2, r3, #15
 80071dc:	4929      	ldr	r1, [pc, #164]	@ (8007284 <HAL_RCC_ClockConfig+0x260>)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80071e4:	f7fb fa4c 	bl	8002680 <HAL_GetTick>
 80071e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ea:	e00a      	b.n	8007202 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071ec:	f7fb fa48 	bl	8002680 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d901      	bls.n	8007202 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e03b      	b.n	800727a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007202:	4b20      	ldr	r3, [pc, #128]	@ (8007284 <HAL_RCC_ClockConfig+0x260>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 030f 	and.w	r3, r3, #15
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	429a      	cmp	r2, r3
 800720e:	d1ed      	bne.n	80071ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	d008      	beq.n	800722e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800721c:	4b1a      	ldr	r3, [pc, #104]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	4917      	ldr	r1, [pc, #92]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 800722a:	4313      	orrs	r3, r2
 800722c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0308 	and.w	r3, r3, #8
 8007236:	2b00      	cmp	r3, #0
 8007238:	d009      	beq.n	800724e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800723a:	4b13      	ldr	r3, [pc, #76]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	490f      	ldr	r1, [pc, #60]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 800724a:	4313      	orrs	r3, r2
 800724c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800724e:	f000 f825 	bl	800729c <HAL_RCC_GetSysClockFreq>
 8007252:	4602      	mov	r2, r0
 8007254:	4b0c      	ldr	r3, [pc, #48]	@ (8007288 <HAL_RCC_ClockConfig+0x264>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	091b      	lsrs	r3, r3, #4
 800725a:	f003 030f 	and.w	r3, r3, #15
 800725e:	490c      	ldr	r1, [pc, #48]	@ (8007290 <HAL_RCC_ClockConfig+0x26c>)
 8007260:	5ccb      	ldrb	r3, [r1, r3]
 8007262:	f003 031f 	and.w	r3, r3, #31
 8007266:	fa22 f303 	lsr.w	r3, r2, r3
 800726a:	4a0a      	ldr	r2, [pc, #40]	@ (8007294 <HAL_RCC_ClockConfig+0x270>)
 800726c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800726e:	4b0a      	ldr	r3, [pc, #40]	@ (8007298 <HAL_RCC_ClockConfig+0x274>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4618      	mov	r0, r3
 8007274:	f7fb f9b8 	bl	80025e8 <HAL_InitTick>
 8007278:	4603      	mov	r3, r0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	40022000 	.word	0x40022000
 8007288:	40021000 	.word	0x40021000
 800728c:	04c4b400 	.word	0x04c4b400
 8007290:	08011460 	.word	0x08011460
 8007294:	200003f4 	.word	0x200003f4
 8007298:	200003f8 	.word	0x200003f8

0800729c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80072a2:	4b2c      	ldr	r3, [pc, #176]	@ (8007354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 030c 	and.w	r3, r3, #12
 80072aa:	2b04      	cmp	r3, #4
 80072ac:	d102      	bne.n	80072b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80072ae:	4b2a      	ldr	r3, [pc, #168]	@ (8007358 <HAL_RCC_GetSysClockFreq+0xbc>)
 80072b0:	613b      	str	r3, [r7, #16]
 80072b2:	e047      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80072b4:	4b27      	ldr	r3, [pc, #156]	@ (8007354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f003 030c 	and.w	r3, r3, #12
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d102      	bne.n	80072c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80072c0:	4b26      	ldr	r3, [pc, #152]	@ (800735c <HAL_RCC_GetSysClockFreq+0xc0>)
 80072c2:	613b      	str	r3, [r7, #16]
 80072c4:	e03e      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80072c6:	4b23      	ldr	r3, [pc, #140]	@ (8007354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 030c 	and.w	r3, r3, #12
 80072ce:	2b0c      	cmp	r3, #12
 80072d0:	d136      	bne.n	8007340 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072d2:	4b20      	ldr	r3, [pc, #128]	@ (8007354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072dc:	4b1d      	ldr	r3, [pc, #116]	@ (8007354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	091b      	lsrs	r3, r3, #4
 80072e2:	f003 030f 	and.w	r3, r3, #15
 80072e6:	3301      	adds	r3, #1
 80072e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d10c      	bne.n	800730a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072f0:	4a1a      	ldr	r2, [pc, #104]	@ (800735c <HAL_RCC_GetSysClockFreq+0xc0>)
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f8:	4a16      	ldr	r2, [pc, #88]	@ (8007354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072fa:	68d2      	ldr	r2, [r2, #12]
 80072fc:	0a12      	lsrs	r2, r2, #8
 80072fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007302:	fb02 f303 	mul.w	r3, r2, r3
 8007306:	617b      	str	r3, [r7, #20]
      break;
 8007308:	e00c      	b.n	8007324 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800730a:	4a13      	ldr	r2, [pc, #76]	@ (8007358 <HAL_RCC_GetSysClockFreq+0xbc>)
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007312:	4a10      	ldr	r2, [pc, #64]	@ (8007354 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007314:	68d2      	ldr	r2, [r2, #12]
 8007316:	0a12      	lsrs	r2, r2, #8
 8007318:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800731c:	fb02 f303 	mul.w	r3, r2, r3
 8007320:	617b      	str	r3, [r7, #20]
      break;
 8007322:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007324:	4b0b      	ldr	r3, [pc, #44]	@ (8007354 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	0e5b      	lsrs	r3, r3, #25
 800732a:	f003 0303 	and.w	r3, r3, #3
 800732e:	3301      	adds	r3, #1
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	fbb2 f3f3 	udiv	r3, r2, r3
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	e001      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007344:	693b      	ldr	r3, [r7, #16]
}
 8007346:	4618      	mov	r0, r3
 8007348:	371c      	adds	r7, #28
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	40021000 	.word	0x40021000
 8007358:	00f42400 	.word	0x00f42400
 800735c:	007a1200 	.word	0x007a1200

08007360 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007360:	b480      	push	{r7}
 8007362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007364:	4b03      	ldr	r3, [pc, #12]	@ (8007374 <HAL_RCC_GetHCLKFreq+0x14>)
 8007366:	681b      	ldr	r3, [r3, #0]
}
 8007368:	4618      	mov	r0, r3
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	200003f4 	.word	0x200003f4

08007378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800737c:	f7ff fff0 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 8007380:	4602      	mov	r2, r0
 8007382:	4b06      	ldr	r3, [pc, #24]	@ (800739c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	0a1b      	lsrs	r3, r3, #8
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	4904      	ldr	r1, [pc, #16]	@ (80073a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800738e:	5ccb      	ldrb	r3, [r1, r3]
 8007390:	f003 031f 	and.w	r3, r3, #31
 8007394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007398:	4618      	mov	r0, r3
 800739a:	bd80      	pop	{r7, pc}
 800739c:	40021000 	.word	0x40021000
 80073a0:	08011470 	.word	0x08011470

080073a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80073a8:	f7ff ffda 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 80073ac:	4602      	mov	r2, r0
 80073ae:	4b06      	ldr	r3, [pc, #24]	@ (80073c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	0adb      	lsrs	r3, r3, #11
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	4904      	ldr	r1, [pc, #16]	@ (80073cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80073ba:	5ccb      	ldrb	r3, [r1, r3]
 80073bc:	f003 031f 	and.w	r3, r3, #31
 80073c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	40021000 	.word	0x40021000
 80073cc:	08011470 	.word	0x08011470

080073d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007450 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007450 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	091b      	lsrs	r3, r3, #4
 80073e6:	f003 030f 	and.w	r3, r3, #15
 80073ea:	3301      	adds	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d10c      	bne.n	800740e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073f4:	4a17      	ldr	r2, [pc, #92]	@ (8007454 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073fc:	4a14      	ldr	r2, [pc, #80]	@ (8007450 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073fe:	68d2      	ldr	r2, [r2, #12]
 8007400:	0a12      	lsrs	r2, r2, #8
 8007402:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007406:	fb02 f303 	mul.w	r3, r2, r3
 800740a:	617b      	str	r3, [r7, #20]
    break;
 800740c:	e00c      	b.n	8007428 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800740e:	4a12      	ldr	r2, [pc, #72]	@ (8007458 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	fbb2 f3f3 	udiv	r3, r2, r3
 8007416:	4a0e      	ldr	r2, [pc, #56]	@ (8007450 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007418:	68d2      	ldr	r2, [r2, #12]
 800741a:	0a12      	lsrs	r2, r2, #8
 800741c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007420:	fb02 f303 	mul.w	r3, r2, r3
 8007424:	617b      	str	r3, [r7, #20]
    break;
 8007426:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007428:	4b09      	ldr	r3, [pc, #36]	@ (8007450 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	0e5b      	lsrs	r3, r3, #25
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	3301      	adds	r3, #1
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007440:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007442:	687b      	ldr	r3, [r7, #4]
}
 8007444:	4618      	mov	r0, r3
 8007446:	371c      	adds	r7, #28
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	40021000 	.word	0x40021000
 8007454:	007a1200 	.word	0x007a1200
 8007458:	00f42400 	.word	0x00f42400

0800745c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007464:	2300      	movs	r3, #0
 8007466:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007468:	2300      	movs	r3, #0
 800746a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 8098 	beq.w	80075aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800747a:	2300      	movs	r3, #0
 800747c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800747e:	4b43      	ldr	r3, [pc, #268]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10d      	bne.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800748a:	4b40      	ldr	r3, [pc, #256]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800748c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800748e:	4a3f      	ldr	r2, [pc, #252]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007494:	6593      	str	r3, [r2, #88]	@ 0x58
 8007496:	4b3d      	ldr	r3, [pc, #244]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800749a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800749e:	60bb      	str	r3, [r7, #8]
 80074a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074a2:	2301      	movs	r3, #1
 80074a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074a6:	4b3a      	ldr	r3, [pc, #232]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a39      	ldr	r2, [pc, #228]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074b2:	f7fb f8e5 	bl	8002680 <HAL_GetTick>
 80074b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074b8:	e009      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074ba:	f7fb f8e1 	bl	8002680 <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d902      	bls.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	74fb      	strb	r3, [r7, #19]
        break;
 80074cc:	e005      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074ce:	4b30      	ldr	r3, [pc, #192]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d0ef      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80074da:	7cfb      	ldrb	r3, [r7, #19]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d159      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80074e0:	4b2a      	ldr	r3, [pc, #168]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d01e      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d019      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80074fc:	4b23      	ldr	r3, [pc, #140]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007506:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007508:	4b20      	ldr	r3, [pc, #128]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800750a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800750e:	4a1f      	ldr	r2, [pc, #124]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007518:	4b1c      	ldr	r3, [pc, #112]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800751a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800751e:	4a1b      	ldr	r2, [pc, #108]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007528:	4a18      	ldr	r2, [pc, #96]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b00      	cmp	r3, #0
 8007538:	d016      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800753a:	f7fb f8a1 	bl	8002680 <HAL_GetTick>
 800753e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007540:	e00b      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007542:	f7fb f89d 	bl	8002680 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007550:	4293      	cmp	r3, r2
 8007552:	d902      	bls.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	74fb      	strb	r3, [r7, #19]
            break;
 8007558:	e006      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800755a:	4b0c      	ldr	r3, [pc, #48]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800755c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0ec      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007568:	7cfb      	ldrb	r3, [r7, #19]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10b      	bne.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800756e:	4b07      	ldr	r3, [pc, #28]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007574:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757c:	4903      	ldr	r1, [pc, #12]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800757e:	4313      	orrs	r3, r2
 8007580:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007584:	e008      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007586:	7cfb      	ldrb	r3, [r7, #19]
 8007588:	74bb      	strb	r3, [r7, #18]
 800758a:	e005      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800758c:	40021000 	.word	0x40021000
 8007590:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007594:	7cfb      	ldrb	r3, [r7, #19]
 8007596:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007598:	7c7b      	ldrb	r3, [r7, #17]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d105      	bne.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800759e:	4ba6      	ldr	r3, [pc, #664]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075a2:	4aa5      	ldr	r2, [pc, #660]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00a      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075b6:	4ba0      	ldr	r3, [pc, #640]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075bc:	f023 0203 	bic.w	r2, r3, #3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	499c      	ldr	r1, [pc, #624]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00a      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075d8:	4b97      	ldr	r3, [pc, #604]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075de:	f023 020c 	bic.w	r2, r3, #12
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	4994      	ldr	r1, [pc, #592]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0304 	and.w	r3, r3, #4
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80075fa:	4b8f      	ldr	r3, [pc, #572]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007600:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	498b      	ldr	r1, [pc, #556]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800760a:	4313      	orrs	r3, r2
 800760c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0308 	and.w	r3, r3, #8
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800761c:	4b86      	ldr	r3, [pc, #536]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800761e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007622:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	4983      	ldr	r1, [pc, #524]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800762c:	4313      	orrs	r3, r2
 800762e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800763e:	4b7e      	ldr	r3, [pc, #504]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007644:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	497a      	ldr	r1, [pc, #488]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800764e:	4313      	orrs	r3, r2
 8007650:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00a      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007660:	4b75      	ldr	r3, [pc, #468]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007666:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	4972      	ldr	r1, [pc, #456]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007670:	4313      	orrs	r3, r2
 8007672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00a      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007682:	4b6d      	ldr	r3, [pc, #436]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007688:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	4969      	ldr	r1, [pc, #420]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007692:	4313      	orrs	r3, r2
 8007694:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00a      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80076a4:	4b64      	ldr	r3, [pc, #400]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	4961      	ldr	r1, [pc, #388]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00a      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076c6:	4b5c      	ldr	r3, [pc, #368]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d4:	4958      	ldr	r1, [pc, #352]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d015      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076e8:	4b53      	ldr	r3, [pc, #332]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f6:	4950      	ldr	r1, [pc, #320]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007706:	d105      	bne.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007708:	4b4b      	ldr	r3, [pc, #300]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	4a4a      	ldr	r2, [pc, #296]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800770e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007712:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800771c:	2b00      	cmp	r3, #0
 800771e:	d015      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007720:	4b45      	ldr	r3, [pc, #276]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007726:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772e:	4942      	ldr	r1, [pc, #264]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007730:	4313      	orrs	r3, r2
 8007732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800773e:	d105      	bne.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007740:	4b3d      	ldr	r3, [pc, #244]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	4a3c      	ldr	r2, [pc, #240]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800774a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d015      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007758:	4b37      	ldr	r3, [pc, #220]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800775a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800775e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007766:	4934      	ldr	r1, [pc, #208]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007772:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007776:	d105      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007778:	4b2f      	ldr	r3, [pc, #188]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	4a2e      	ldr	r2, [pc, #184]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800777e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007782:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d015      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007790:	4b29      	ldr	r3, [pc, #164]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007796:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800779e:	4926      	ldr	r1, [pc, #152]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077ae:	d105      	bne.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077b0:	4b21      	ldr	r3, [pc, #132]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	4a20      	ldr	r2, [pc, #128]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d015      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80077c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d6:	4918      	ldr	r1, [pc, #96]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077e6:	d105      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077e8:	4b13      	ldr	r3, [pc, #76]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	4a12      	ldr	r2, [pc, #72]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d015      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007800:	4b0d      	ldr	r3, [pc, #52]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007806:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800780e:	490a      	ldr	r1, [pc, #40]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007810:	4313      	orrs	r3, r2
 8007812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800781a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800781e:	d105      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007820:	4b05      	ldr	r3, [pc, #20]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	4a04      	ldr	r2, [pc, #16]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800782a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800782c:	7cbb      	ldrb	r3, [r7, #18]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	40021000 	.word	0x40021000

0800783c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e049      	b.n	80078e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7fa fc60 	bl	8002128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3304      	adds	r3, #4
 8007878:	4619      	mov	r1, r3
 800787a:	4610      	mov	r0, r2
 800787c:	f000 fd88 	bl	8008390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d001      	beq.n	8007904 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e04a      	b.n	800799a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f042 0201 	orr.w	r2, r2, #1
 800791a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a21      	ldr	r2, [pc, #132]	@ (80079a8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d018      	beq.n	8007958 <HAL_TIM_Base_Start_IT+0x6c>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800792e:	d013      	beq.n	8007958 <HAL_TIM_Base_Start_IT+0x6c>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a1d      	ldr	r2, [pc, #116]	@ (80079ac <HAL_TIM_Base_Start_IT+0xc0>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00e      	beq.n	8007958 <HAL_TIM_Base_Start_IT+0x6c>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a1c      	ldr	r2, [pc, #112]	@ (80079b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d009      	beq.n	8007958 <HAL_TIM_Base_Start_IT+0x6c>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a1a      	ldr	r2, [pc, #104]	@ (80079b4 <HAL_TIM_Base_Start_IT+0xc8>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d004      	beq.n	8007958 <HAL_TIM_Base_Start_IT+0x6c>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a19      	ldr	r2, [pc, #100]	@ (80079b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d115      	bne.n	8007984 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689a      	ldr	r2, [r3, #8]
 800795e:	4b17      	ldr	r3, [pc, #92]	@ (80079bc <HAL_TIM_Base_Start_IT+0xd0>)
 8007960:	4013      	ands	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b06      	cmp	r3, #6
 8007968:	d015      	beq.n	8007996 <HAL_TIM_Base_Start_IT+0xaa>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007970:	d011      	beq.n	8007996 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f042 0201 	orr.w	r2, r2, #1
 8007980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007982:	e008      	b.n	8007996 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f042 0201 	orr.w	r2, r2, #1
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e000      	b.n	8007998 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007996:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	40012c00 	.word	0x40012c00
 80079ac:	40000400 	.word	0x40000400
 80079b0:	40000800 	.word	0x40000800
 80079b4:	40013400 	.word	0x40013400
 80079b8:	40014000 	.word	0x40014000
 80079bc:	00010007 	.word	0x00010007

080079c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e049      	b.n	8007a66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d106      	bne.n	80079ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f841 	bl	8007a6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2202      	movs	r2, #2
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3304      	adds	r3, #4
 80079fc:	4619      	mov	r1, r3
 80079fe:	4610      	mov	r0, r2
 8007a00:	f000 fcc6 	bl	8008390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b083      	sub	sp, #12
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
	...

08007a84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d109      	bne.n	8007aa8 <HAL_TIM_PWM_Start+0x24>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	bf14      	ite	ne
 8007aa0:	2301      	movne	r3, #1
 8007aa2:	2300      	moveq	r3, #0
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	e03c      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	d109      	bne.n	8007ac2 <HAL_TIM_PWM_Start+0x3e>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	bf14      	ite	ne
 8007aba:	2301      	movne	r3, #1
 8007abc:	2300      	moveq	r3, #0
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	e02f      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d109      	bne.n	8007adc <HAL_TIM_PWM_Start+0x58>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	bf14      	ite	ne
 8007ad4:	2301      	movne	r3, #1
 8007ad6:	2300      	moveq	r3, #0
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	e022      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b0c      	cmp	r3, #12
 8007ae0:	d109      	bne.n	8007af6 <HAL_TIM_PWM_Start+0x72>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	bf14      	ite	ne
 8007aee:	2301      	movne	r3, #1
 8007af0:	2300      	moveq	r3, #0
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	e015      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b10      	cmp	r3, #16
 8007afa:	d109      	bne.n	8007b10 <HAL_TIM_PWM_Start+0x8c>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	bf14      	ite	ne
 8007b08:	2301      	movne	r3, #1
 8007b0a:	2300      	moveq	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	e008      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	bf14      	ite	ne
 8007b1c:	2301      	movne	r3, #1
 8007b1e:	2300      	moveq	r3, #0
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e097      	b.n	8007c5a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d104      	bne.n	8007b3a <HAL_TIM_PWM_Start+0xb6>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b38:	e023      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d104      	bne.n	8007b4a <HAL_TIM_PWM_Start+0xc6>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b48:	e01b      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b08      	cmp	r3, #8
 8007b4e:	d104      	bne.n	8007b5a <HAL_TIM_PWM_Start+0xd6>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b58:	e013      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b0c      	cmp	r3, #12
 8007b5e:	d104      	bne.n	8007b6a <HAL_TIM_PWM_Start+0xe6>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b68:	e00b      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b10      	cmp	r3, #16
 8007b6e:	d104      	bne.n	8007b7a <HAL_TIM_PWM_Start+0xf6>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b78:	e003      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2201      	movs	r2, #1
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f001 f82e 	bl	8008bec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a33      	ldr	r2, [pc, #204]	@ (8007c64 <HAL_TIM_PWM_Start+0x1e0>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d013      	beq.n	8007bc2 <HAL_TIM_PWM_Start+0x13e>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a32      	ldr	r2, [pc, #200]	@ (8007c68 <HAL_TIM_PWM_Start+0x1e4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00e      	beq.n	8007bc2 <HAL_TIM_PWM_Start+0x13e>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a30      	ldr	r2, [pc, #192]	@ (8007c6c <HAL_TIM_PWM_Start+0x1e8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d009      	beq.n	8007bc2 <HAL_TIM_PWM_Start+0x13e>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8007c70 <HAL_TIM_PWM_Start+0x1ec>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d004      	beq.n	8007bc2 <HAL_TIM_PWM_Start+0x13e>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a2d      	ldr	r2, [pc, #180]	@ (8007c74 <HAL_TIM_PWM_Start+0x1f0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d101      	bne.n	8007bc6 <HAL_TIM_PWM_Start+0x142>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e000      	b.n	8007bc8 <HAL_TIM_PWM_Start+0x144>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d007      	beq.n	8007bdc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bda:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a20      	ldr	r2, [pc, #128]	@ (8007c64 <HAL_TIM_PWM_Start+0x1e0>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d018      	beq.n	8007c18 <HAL_TIM_PWM_Start+0x194>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bee:	d013      	beq.n	8007c18 <HAL_TIM_PWM_Start+0x194>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a20      	ldr	r2, [pc, #128]	@ (8007c78 <HAL_TIM_PWM_Start+0x1f4>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d00e      	beq.n	8007c18 <HAL_TIM_PWM_Start+0x194>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8007c7c <HAL_TIM_PWM_Start+0x1f8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d009      	beq.n	8007c18 <HAL_TIM_PWM_Start+0x194>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a17      	ldr	r2, [pc, #92]	@ (8007c68 <HAL_TIM_PWM_Start+0x1e4>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d004      	beq.n	8007c18 <HAL_TIM_PWM_Start+0x194>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a16      	ldr	r2, [pc, #88]	@ (8007c6c <HAL_TIM_PWM_Start+0x1e8>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d115      	bne.n	8007c44 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689a      	ldr	r2, [r3, #8]
 8007c1e:	4b18      	ldr	r3, [pc, #96]	@ (8007c80 <HAL_TIM_PWM_Start+0x1fc>)
 8007c20:	4013      	ands	r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b06      	cmp	r3, #6
 8007c28:	d015      	beq.n	8007c56 <HAL_TIM_PWM_Start+0x1d2>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c30:	d011      	beq.n	8007c56 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f042 0201 	orr.w	r2, r2, #1
 8007c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c42:	e008      	b.n	8007c56 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f042 0201 	orr.w	r2, r2, #1
 8007c52:	601a      	str	r2, [r3, #0]
 8007c54:	e000      	b.n	8007c58 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	40012c00 	.word	0x40012c00
 8007c68:	40013400 	.word	0x40013400
 8007c6c:	40014000 	.word	0x40014000
 8007c70:	40014400 	.word	0x40014400
 8007c74:	40014800 	.word	0x40014800
 8007c78:	40000400 	.word	0x40000400
 8007c7c:	40000800 	.word	0x40000800
 8007c80:	00010007 	.word	0x00010007

08007c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d020      	beq.n	8007ce8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d01b      	beq.n	8007ce8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f06f 0202 	mvn.w	r2, #2
 8007cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	f003 0303 	and.w	r3, r3, #3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fb40 	bl	8008354 <HAL_TIM_IC_CaptureCallback>
 8007cd4:	e005      	b.n	8007ce2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fb32 	bl	8008340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fb43 	bl	8008368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f003 0304 	and.w	r3, r3, #4
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d020      	beq.n	8007d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d01b      	beq.n	8007d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f06f 0204 	mvn.w	r2, #4
 8007d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2202      	movs	r2, #2
 8007d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fb1a 	bl	8008354 <HAL_TIM_IC_CaptureCallback>
 8007d20:	e005      	b.n	8007d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fb0c 	bl	8008340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fb1d 	bl	8008368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f003 0308 	and.w	r3, r3, #8
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d020      	beq.n	8007d80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f003 0308 	and.w	r3, r3, #8
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d01b      	beq.n	8007d80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f06f 0208 	mvn.w	r2, #8
 8007d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2204      	movs	r2, #4
 8007d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	f003 0303 	and.w	r3, r3, #3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 faf4 	bl	8008354 <HAL_TIM_IC_CaptureCallback>
 8007d6c:	e005      	b.n	8007d7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fae6 	bl	8008340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 faf7 	bl	8008368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 0310 	and.w	r3, r3, #16
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d020      	beq.n	8007dcc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f003 0310 	and.w	r3, r3, #16
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d01b      	beq.n	8007dcc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f06f 0210 	mvn.w	r2, #16
 8007d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2208      	movs	r2, #8
 8007da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 face 	bl	8008354 <HAL_TIM_IC_CaptureCallback>
 8007db8:	e005      	b.n	8007dc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fac0 	bl	8008340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fad1 	bl	8008368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00c      	beq.n	8007df0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d007      	beq.n	8007df0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f06f 0201 	mvn.w	r2, #1
 8007de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7f9 ff1e 	bl	8001c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d104      	bne.n	8007e04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00c      	beq.n	8007e1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d007      	beq.n	8007e1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 ff99 	bl	8008d50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00c      	beq.n	8007e42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d007      	beq.n	8007e42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 ff91 	bl	8008d64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00c      	beq.n	8007e66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d007      	beq.n	8007e66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fa8b 	bl	800837c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f003 0320 	and.w	r3, r3, #32
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00c      	beq.n	8007e8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f003 0320 	and.w	r3, r3, #32
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d007      	beq.n	8007e8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f06f 0220 	mvn.w	r2, #32
 8007e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 ff59 	bl	8008d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00c      	beq.n	8007eae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d007      	beq.n	8007eae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 ff65 	bl	8008d78 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00c      	beq.n	8007ed2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d007      	beq.n	8007ed2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 ff5d 	bl	8008d8c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00c      	beq.n	8007ef6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d007      	beq.n	8007ef6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 ff55 	bl	8008da0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00c      	beq.n	8007f1a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d007      	beq.n	8007f1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 ff4d 	bl	8008db4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f1a:	bf00      	nop
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
	...

08007f24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d101      	bne.n	8007f42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e0ff      	b.n	8008142 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b14      	cmp	r3, #20
 8007f4e:	f200 80f0 	bhi.w	8008132 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007f52:	a201      	add	r2, pc, #4	@ (adr r2, 8007f58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f58:	08007fad 	.word	0x08007fad
 8007f5c:	08008133 	.word	0x08008133
 8007f60:	08008133 	.word	0x08008133
 8007f64:	08008133 	.word	0x08008133
 8007f68:	08007fed 	.word	0x08007fed
 8007f6c:	08008133 	.word	0x08008133
 8007f70:	08008133 	.word	0x08008133
 8007f74:	08008133 	.word	0x08008133
 8007f78:	0800802f 	.word	0x0800802f
 8007f7c:	08008133 	.word	0x08008133
 8007f80:	08008133 	.word	0x08008133
 8007f84:	08008133 	.word	0x08008133
 8007f88:	0800806f 	.word	0x0800806f
 8007f8c:	08008133 	.word	0x08008133
 8007f90:	08008133 	.word	0x08008133
 8007f94:	08008133 	.word	0x08008133
 8007f98:	080080b1 	.word	0x080080b1
 8007f9c:	08008133 	.word	0x08008133
 8007fa0:	08008133 	.word	0x08008133
 8007fa4:	08008133 	.word	0x08008133
 8007fa8:	080080f1 	.word	0x080080f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68b9      	ldr	r1, [r7, #8]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fa88 	bl	80084c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	699a      	ldr	r2, [r3, #24]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f042 0208 	orr.w	r2, r2, #8
 8007fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	699a      	ldr	r2, [r3, #24]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f022 0204 	bic.w	r2, r2, #4
 8007fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6999      	ldr	r1, [r3, #24]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	691a      	ldr	r2, [r3, #16]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	619a      	str	r2, [r3, #24]
      break;
 8007fea:	e0a5      	b.n	8008138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68b9      	ldr	r1, [r7, #8]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 faf8 	bl	80085e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	699a      	ldr	r2, [r3, #24]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	699a      	ldr	r2, [r3, #24]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6999      	ldr	r1, [r3, #24]
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	021a      	lsls	r2, r3, #8
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	430a      	orrs	r2, r1
 800802a:	619a      	str	r2, [r3, #24]
      break;
 800802c:	e084      	b.n	8008138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fb61 	bl	80086fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	69da      	ldr	r2, [r3, #28]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f042 0208 	orr.w	r2, r2, #8
 8008048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	69da      	ldr	r2, [r3, #28]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f022 0204 	bic.w	r2, r2, #4
 8008058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69d9      	ldr	r1, [r3, #28]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	691a      	ldr	r2, [r3, #16]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	430a      	orrs	r2, r1
 800806a:	61da      	str	r2, [r3, #28]
      break;
 800806c:	e064      	b.n	8008138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68b9      	ldr	r1, [r7, #8]
 8008074:	4618      	mov	r0, r3
 8008076:	f000 fbc9 	bl	800880c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	69da      	ldr	r2, [r3, #28]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	69da      	ldr	r2, [r3, #28]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	69d9      	ldr	r1, [r3, #28]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	021a      	lsls	r2, r3, #8
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	61da      	str	r2, [r3, #28]
      break;
 80080ae:	e043      	b.n	8008138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68b9      	ldr	r1, [r7, #8]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 fc32 	bl	8008920 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f042 0208 	orr.w	r2, r2, #8
 80080ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f022 0204 	bic.w	r2, r2, #4
 80080da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	691a      	ldr	r2, [r3, #16]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80080ee:	e023      	b.n	8008138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68b9      	ldr	r1, [r7, #8]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 fc76 	bl	80089e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800810a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800811a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	021a      	lsls	r2, r3, #8
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008130:	e002      	b.n	8008138 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	75fb      	strb	r3, [r7, #23]
      break;
 8008136:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008140:	7dfb      	ldrb	r3, [r7, #23]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3718      	adds	r7, #24
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop

0800814c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008160:	2b01      	cmp	r3, #1
 8008162:	d101      	bne.n	8008168 <HAL_TIM_ConfigClockSource+0x1c>
 8008164:	2302      	movs	r3, #2
 8008166:	e0de      	b.n	8008326 <HAL_TIM_ConfigClockSource+0x1da>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2202      	movs	r2, #2
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008186:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800818a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008192:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a63      	ldr	r2, [pc, #396]	@ (8008330 <HAL_TIM_ConfigClockSource+0x1e4>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	f000 80a9 	beq.w	80082fa <HAL_TIM_ConfigClockSource+0x1ae>
 80081a8:	4a61      	ldr	r2, [pc, #388]	@ (8008330 <HAL_TIM_ConfigClockSource+0x1e4>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	f200 80ae 	bhi.w	800830c <HAL_TIM_ConfigClockSource+0x1c0>
 80081b0:	4a60      	ldr	r2, [pc, #384]	@ (8008334 <HAL_TIM_ConfigClockSource+0x1e8>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	f000 80a1 	beq.w	80082fa <HAL_TIM_ConfigClockSource+0x1ae>
 80081b8:	4a5e      	ldr	r2, [pc, #376]	@ (8008334 <HAL_TIM_ConfigClockSource+0x1e8>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	f200 80a6 	bhi.w	800830c <HAL_TIM_ConfigClockSource+0x1c0>
 80081c0:	4a5d      	ldr	r2, [pc, #372]	@ (8008338 <HAL_TIM_ConfigClockSource+0x1ec>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	f000 8099 	beq.w	80082fa <HAL_TIM_ConfigClockSource+0x1ae>
 80081c8:	4a5b      	ldr	r2, [pc, #364]	@ (8008338 <HAL_TIM_ConfigClockSource+0x1ec>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	f200 809e 	bhi.w	800830c <HAL_TIM_ConfigClockSource+0x1c0>
 80081d0:	4a5a      	ldr	r2, [pc, #360]	@ (800833c <HAL_TIM_ConfigClockSource+0x1f0>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	f000 8091 	beq.w	80082fa <HAL_TIM_ConfigClockSource+0x1ae>
 80081d8:	4a58      	ldr	r2, [pc, #352]	@ (800833c <HAL_TIM_ConfigClockSource+0x1f0>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	f200 8096 	bhi.w	800830c <HAL_TIM_ConfigClockSource+0x1c0>
 80081e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081e4:	f000 8089 	beq.w	80082fa <HAL_TIM_ConfigClockSource+0x1ae>
 80081e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081ec:	f200 808e 	bhi.w	800830c <HAL_TIM_ConfigClockSource+0x1c0>
 80081f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081f4:	d03e      	beq.n	8008274 <HAL_TIM_ConfigClockSource+0x128>
 80081f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081fa:	f200 8087 	bhi.w	800830c <HAL_TIM_ConfigClockSource+0x1c0>
 80081fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008202:	f000 8086 	beq.w	8008312 <HAL_TIM_ConfigClockSource+0x1c6>
 8008206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800820a:	d87f      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x1c0>
 800820c:	2b70      	cmp	r3, #112	@ 0x70
 800820e:	d01a      	beq.n	8008246 <HAL_TIM_ConfigClockSource+0xfa>
 8008210:	2b70      	cmp	r3, #112	@ 0x70
 8008212:	d87b      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x1c0>
 8008214:	2b60      	cmp	r3, #96	@ 0x60
 8008216:	d050      	beq.n	80082ba <HAL_TIM_ConfigClockSource+0x16e>
 8008218:	2b60      	cmp	r3, #96	@ 0x60
 800821a:	d877      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x1c0>
 800821c:	2b50      	cmp	r3, #80	@ 0x50
 800821e:	d03c      	beq.n	800829a <HAL_TIM_ConfigClockSource+0x14e>
 8008220:	2b50      	cmp	r3, #80	@ 0x50
 8008222:	d873      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x1c0>
 8008224:	2b40      	cmp	r3, #64	@ 0x40
 8008226:	d058      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x18e>
 8008228:	2b40      	cmp	r3, #64	@ 0x40
 800822a:	d86f      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x1c0>
 800822c:	2b30      	cmp	r3, #48	@ 0x30
 800822e:	d064      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x1ae>
 8008230:	2b30      	cmp	r3, #48	@ 0x30
 8008232:	d86b      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x1c0>
 8008234:	2b20      	cmp	r3, #32
 8008236:	d060      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x1ae>
 8008238:	2b20      	cmp	r3, #32
 800823a:	d867      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x1c0>
 800823c:	2b00      	cmp	r3, #0
 800823e:	d05c      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x1ae>
 8008240:	2b10      	cmp	r3, #16
 8008242:	d05a      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x1ae>
 8008244:	e062      	b.n	800830c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008256:	f000 fca9 	bl	8008bac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008268:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	609a      	str	r2, [r3, #8]
      break;
 8008272:	e04f      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008284:	f000 fc92 	bl	8008bac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008296:	609a      	str	r2, [r3, #8]
      break;
 8008298:	e03c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082a6:	461a      	mov	r2, r3
 80082a8:	f000 fc04 	bl	8008ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2150      	movs	r1, #80	@ 0x50
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fc5d 	bl	8008b72 <TIM_ITRx_SetConfig>
      break;
 80082b8:	e02c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082c6:	461a      	mov	r2, r3
 80082c8:	f000 fc23 	bl	8008b12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2160      	movs	r1, #96	@ 0x60
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fc4d 	bl	8008b72 <TIM_ITRx_SetConfig>
      break;
 80082d8:	e01c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082e6:	461a      	mov	r2, r3
 80082e8:	f000 fbe4 	bl	8008ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2140      	movs	r1, #64	@ 0x40
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 fc3d 	bl	8008b72 <TIM_ITRx_SetConfig>
      break;
 80082f8:	e00c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4619      	mov	r1, r3
 8008304:	4610      	mov	r0, r2
 8008306:	f000 fc34 	bl	8008b72 <TIM_ITRx_SetConfig>
      break;
 800830a:	e003      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
      break;
 8008310:	e000      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8008312:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	00100070 	.word	0x00100070
 8008334:	00100040 	.word	0x00100040
 8008338:	00100030 	.word	0x00100030
 800833c:	00100020 	.word	0x00100020

08008340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a42      	ldr	r2, [pc, #264]	@ (80084ac <TIM_Base_SetConfig+0x11c>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00f      	beq.n	80083c8 <TIM_Base_SetConfig+0x38>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ae:	d00b      	beq.n	80083c8 <TIM_Base_SetConfig+0x38>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a3f      	ldr	r2, [pc, #252]	@ (80084b0 <TIM_Base_SetConfig+0x120>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d007      	beq.n	80083c8 <TIM_Base_SetConfig+0x38>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a3e      	ldr	r2, [pc, #248]	@ (80084b4 <TIM_Base_SetConfig+0x124>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d003      	beq.n	80083c8 <TIM_Base_SetConfig+0x38>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a3d      	ldr	r2, [pc, #244]	@ (80084b8 <TIM_Base_SetConfig+0x128>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d108      	bne.n	80083da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a33      	ldr	r2, [pc, #204]	@ (80084ac <TIM_Base_SetConfig+0x11c>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d01b      	beq.n	800841a <TIM_Base_SetConfig+0x8a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083e8:	d017      	beq.n	800841a <TIM_Base_SetConfig+0x8a>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a30      	ldr	r2, [pc, #192]	@ (80084b0 <TIM_Base_SetConfig+0x120>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d013      	beq.n	800841a <TIM_Base_SetConfig+0x8a>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a2f      	ldr	r2, [pc, #188]	@ (80084b4 <TIM_Base_SetConfig+0x124>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00f      	beq.n	800841a <TIM_Base_SetConfig+0x8a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a2e      	ldr	r2, [pc, #184]	@ (80084b8 <TIM_Base_SetConfig+0x128>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00b      	beq.n	800841a <TIM_Base_SetConfig+0x8a>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a2d      	ldr	r2, [pc, #180]	@ (80084bc <TIM_Base_SetConfig+0x12c>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d007      	beq.n	800841a <TIM_Base_SetConfig+0x8a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a2c      	ldr	r2, [pc, #176]	@ (80084c0 <TIM_Base_SetConfig+0x130>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d003      	beq.n	800841a <TIM_Base_SetConfig+0x8a>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a2b      	ldr	r2, [pc, #172]	@ (80084c4 <TIM_Base_SetConfig+0x134>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d108      	bne.n	800842c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	4313      	orrs	r3, r2
 800842a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a16      	ldr	r2, [pc, #88]	@ (80084ac <TIM_Base_SetConfig+0x11c>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d00f      	beq.n	8008478 <TIM_Base_SetConfig+0xe8>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a17      	ldr	r2, [pc, #92]	@ (80084b8 <TIM_Base_SetConfig+0x128>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00b      	beq.n	8008478 <TIM_Base_SetConfig+0xe8>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a16      	ldr	r2, [pc, #88]	@ (80084bc <TIM_Base_SetConfig+0x12c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d007      	beq.n	8008478 <TIM_Base_SetConfig+0xe8>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a15      	ldr	r2, [pc, #84]	@ (80084c0 <TIM_Base_SetConfig+0x130>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d003      	beq.n	8008478 <TIM_Base_SetConfig+0xe8>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a14      	ldr	r2, [pc, #80]	@ (80084c4 <TIM_Base_SetConfig+0x134>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d103      	bne.n	8008480 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	691a      	ldr	r2, [r3, #16]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	2b01      	cmp	r3, #1
 8008490:	d105      	bne.n	800849e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	f023 0201 	bic.w	r2, r3, #1
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	611a      	str	r2, [r3, #16]
  }
}
 800849e:	bf00      	nop
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	40012c00 	.word	0x40012c00
 80084b0:	40000400 	.word	0x40000400
 80084b4:	40000800 	.word	0x40000800
 80084b8:	40013400 	.word	0x40013400
 80084bc:	40014000 	.word	0x40014000
 80084c0:	40014400 	.word	0x40014400
 80084c4:	40014800 	.word	0x40014800

080084c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	f023 0201 	bic.w	r2, r3, #1
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f023 0303 	bic.w	r3, r3, #3
 8008502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	4313      	orrs	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f023 0302 	bic.w	r3, r3, #2
 8008514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	4313      	orrs	r3, r2
 800851e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a2c      	ldr	r2, [pc, #176]	@ (80085d4 <TIM_OC1_SetConfig+0x10c>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d00f      	beq.n	8008548 <TIM_OC1_SetConfig+0x80>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a2b      	ldr	r2, [pc, #172]	@ (80085d8 <TIM_OC1_SetConfig+0x110>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d00b      	beq.n	8008548 <TIM_OC1_SetConfig+0x80>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a2a      	ldr	r2, [pc, #168]	@ (80085dc <TIM_OC1_SetConfig+0x114>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d007      	beq.n	8008548 <TIM_OC1_SetConfig+0x80>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a29      	ldr	r2, [pc, #164]	@ (80085e0 <TIM_OC1_SetConfig+0x118>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d003      	beq.n	8008548 <TIM_OC1_SetConfig+0x80>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a28      	ldr	r2, [pc, #160]	@ (80085e4 <TIM_OC1_SetConfig+0x11c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d10c      	bne.n	8008562 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f023 0308 	bic.w	r3, r3, #8
 800854e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	4313      	orrs	r3, r2
 8008558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f023 0304 	bic.w	r3, r3, #4
 8008560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a1b      	ldr	r2, [pc, #108]	@ (80085d4 <TIM_OC1_SetConfig+0x10c>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d00f      	beq.n	800858a <TIM_OC1_SetConfig+0xc2>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a1a      	ldr	r2, [pc, #104]	@ (80085d8 <TIM_OC1_SetConfig+0x110>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d00b      	beq.n	800858a <TIM_OC1_SetConfig+0xc2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a19      	ldr	r2, [pc, #100]	@ (80085dc <TIM_OC1_SetConfig+0x114>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d007      	beq.n	800858a <TIM_OC1_SetConfig+0xc2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a18      	ldr	r2, [pc, #96]	@ (80085e0 <TIM_OC1_SetConfig+0x118>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d003      	beq.n	800858a <TIM_OC1_SetConfig+0xc2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a17      	ldr	r2, [pc, #92]	@ (80085e4 <TIM_OC1_SetConfig+0x11c>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d111      	bne.n	80085ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	697a      	ldr	r2, [r7, #20]
 80085c6:	621a      	str	r2, [r3, #32]
}
 80085c8:	bf00      	nop
 80085ca:	371c      	adds	r7, #28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	40012c00 	.word	0x40012c00
 80085d8:	40013400 	.word	0x40013400
 80085dc:	40014000 	.word	0x40014000
 80085e0:	40014400 	.word	0x40014400
 80085e4:	40014800 	.word	0x40014800

080085e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b087      	sub	sp, #28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	f023 0210 	bic.w	r2, r3, #16
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800861a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	021b      	lsls	r3, r3, #8
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	4313      	orrs	r3, r2
 800862e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f023 0320 	bic.w	r3, r3, #32
 8008636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	011b      	lsls	r3, r3, #4
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	4313      	orrs	r3, r2
 8008642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a28      	ldr	r2, [pc, #160]	@ (80086e8 <TIM_OC2_SetConfig+0x100>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d003      	beq.n	8008654 <TIM_OC2_SetConfig+0x6c>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a27      	ldr	r2, [pc, #156]	@ (80086ec <TIM_OC2_SetConfig+0x104>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d10d      	bne.n	8008670 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800865a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	011b      	lsls	r3, r3, #4
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	4313      	orrs	r3, r2
 8008666:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800866e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a1d      	ldr	r2, [pc, #116]	@ (80086e8 <TIM_OC2_SetConfig+0x100>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d00f      	beq.n	8008698 <TIM_OC2_SetConfig+0xb0>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a1c      	ldr	r2, [pc, #112]	@ (80086ec <TIM_OC2_SetConfig+0x104>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d00b      	beq.n	8008698 <TIM_OC2_SetConfig+0xb0>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a1b      	ldr	r2, [pc, #108]	@ (80086f0 <TIM_OC2_SetConfig+0x108>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d007      	beq.n	8008698 <TIM_OC2_SetConfig+0xb0>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a1a      	ldr	r2, [pc, #104]	@ (80086f4 <TIM_OC2_SetConfig+0x10c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d003      	beq.n	8008698 <TIM_OC2_SetConfig+0xb0>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a19      	ldr	r2, [pc, #100]	@ (80086f8 <TIM_OC2_SetConfig+0x110>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d113      	bne.n	80086c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800869e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	4313      	orrs	r3, r2
 80086be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	621a      	str	r2, [r3, #32]
}
 80086da:	bf00      	nop
 80086dc:	371c      	adds	r7, #28
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	40012c00 	.word	0x40012c00
 80086ec:	40013400 	.word	0x40013400
 80086f0:	40014000 	.word	0x40014000
 80086f4:	40014400 	.word	0x40014400
 80086f8:	40014800 	.word	0x40014800

080086fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a1b      	ldr	r3, [r3, #32]
 8008710:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800872a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800872e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f023 0303 	bic.w	r3, r3, #3
 8008736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	021b      	lsls	r3, r3, #8
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	4313      	orrs	r3, r2
 8008754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a27      	ldr	r2, [pc, #156]	@ (80087f8 <TIM_OC3_SetConfig+0xfc>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d003      	beq.n	8008766 <TIM_OC3_SetConfig+0x6a>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a26      	ldr	r2, [pc, #152]	@ (80087fc <TIM_OC3_SetConfig+0x100>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d10d      	bne.n	8008782 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800876c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	021b      	lsls	r3, r3, #8
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	4313      	orrs	r3, r2
 8008778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a1c      	ldr	r2, [pc, #112]	@ (80087f8 <TIM_OC3_SetConfig+0xfc>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00f      	beq.n	80087aa <TIM_OC3_SetConfig+0xae>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a1b      	ldr	r2, [pc, #108]	@ (80087fc <TIM_OC3_SetConfig+0x100>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d00b      	beq.n	80087aa <TIM_OC3_SetConfig+0xae>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a1a      	ldr	r2, [pc, #104]	@ (8008800 <TIM_OC3_SetConfig+0x104>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d007      	beq.n	80087aa <TIM_OC3_SetConfig+0xae>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a19      	ldr	r2, [pc, #100]	@ (8008804 <TIM_OC3_SetConfig+0x108>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d003      	beq.n	80087aa <TIM_OC3_SetConfig+0xae>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a18      	ldr	r2, [pc, #96]	@ (8008808 <TIM_OC3_SetConfig+0x10c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d113      	bne.n	80087d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	011b      	lsls	r3, r3, #4
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	011b      	lsls	r3, r3, #4
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	685a      	ldr	r2, [r3, #4]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	621a      	str	r2, [r3, #32]
}
 80087ec:	bf00      	nop
 80087ee:	371c      	adds	r7, #28
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	40012c00 	.word	0x40012c00
 80087fc:	40013400 	.word	0x40013400
 8008800:	40014000 	.word	0x40014000
 8008804:	40014400 	.word	0x40014400
 8008808:	40014800 	.word	0x40014800

0800880c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800880c:	b480      	push	{r7}
 800880e:	b087      	sub	sp, #28
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a1b      	ldr	r3, [r3, #32]
 8008820:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800883a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800883e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	021b      	lsls	r3, r3, #8
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	4313      	orrs	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800885a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	031b      	lsls	r3, r3, #12
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	4313      	orrs	r3, r2
 8008866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a28      	ldr	r2, [pc, #160]	@ (800890c <TIM_OC4_SetConfig+0x100>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d003      	beq.n	8008878 <TIM_OC4_SetConfig+0x6c>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a27      	ldr	r2, [pc, #156]	@ (8008910 <TIM_OC4_SetConfig+0x104>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d10d      	bne.n	8008894 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800887e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	031b      	lsls	r3, r3, #12
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	4313      	orrs	r3, r2
 800888a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008892:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a1d      	ldr	r2, [pc, #116]	@ (800890c <TIM_OC4_SetConfig+0x100>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d00f      	beq.n	80088bc <TIM_OC4_SetConfig+0xb0>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a1c      	ldr	r2, [pc, #112]	@ (8008910 <TIM_OC4_SetConfig+0x104>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d00b      	beq.n	80088bc <TIM_OC4_SetConfig+0xb0>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a1b      	ldr	r2, [pc, #108]	@ (8008914 <TIM_OC4_SetConfig+0x108>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d007      	beq.n	80088bc <TIM_OC4_SetConfig+0xb0>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008918 <TIM_OC4_SetConfig+0x10c>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d003      	beq.n	80088bc <TIM_OC4_SetConfig+0xb0>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a19      	ldr	r2, [pc, #100]	@ (800891c <TIM_OC4_SetConfig+0x110>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d113      	bne.n	80088e4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80088ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	019b      	lsls	r3, r3, #6
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	019b      	lsls	r3, r3, #6
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	621a      	str	r2, [r3, #32]
}
 80088fe:	bf00      	nop
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	40012c00 	.word	0x40012c00
 8008910:	40013400 	.word	0x40013400
 8008914:	40014000 	.word	0x40014000
 8008918:	40014400 	.word	0x40014400
 800891c:	40014800 	.word	0x40014800

08008920 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008920:	b480      	push	{r7}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a1b      	ldr	r3, [r3, #32]
 8008934:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800894e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	4313      	orrs	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008964:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	041b      	lsls	r3, r3, #16
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	4313      	orrs	r3, r2
 8008970:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a17      	ldr	r2, [pc, #92]	@ (80089d4 <TIM_OC5_SetConfig+0xb4>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d00f      	beq.n	800899a <TIM_OC5_SetConfig+0x7a>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a16      	ldr	r2, [pc, #88]	@ (80089d8 <TIM_OC5_SetConfig+0xb8>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d00b      	beq.n	800899a <TIM_OC5_SetConfig+0x7a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a15      	ldr	r2, [pc, #84]	@ (80089dc <TIM_OC5_SetConfig+0xbc>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d007      	beq.n	800899a <TIM_OC5_SetConfig+0x7a>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a14      	ldr	r2, [pc, #80]	@ (80089e0 <TIM_OC5_SetConfig+0xc0>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d003      	beq.n	800899a <TIM_OC5_SetConfig+0x7a>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a13      	ldr	r2, [pc, #76]	@ (80089e4 <TIM_OC5_SetConfig+0xc4>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d109      	bne.n	80089ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	021b      	lsls	r3, r3, #8
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	621a      	str	r2, [r3, #32]
}
 80089c8:	bf00      	nop
 80089ca:	371c      	adds	r7, #28
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	40012c00 	.word	0x40012c00
 80089d8:	40013400 	.word	0x40013400
 80089dc:	40014000 	.word	0x40014000
 80089e0:	40014400 	.word	0x40014400
 80089e4:	40014800 	.word	0x40014800

080089e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b087      	sub	sp, #28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a1b      	ldr	r3, [r3, #32]
 80089fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	021b      	lsls	r3, r3, #8
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	051b      	lsls	r3, r3, #20
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a18      	ldr	r2, [pc, #96]	@ (8008aa0 <TIM_OC6_SetConfig+0xb8>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d00f      	beq.n	8008a64 <TIM_OC6_SetConfig+0x7c>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a17      	ldr	r2, [pc, #92]	@ (8008aa4 <TIM_OC6_SetConfig+0xbc>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d00b      	beq.n	8008a64 <TIM_OC6_SetConfig+0x7c>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a16      	ldr	r2, [pc, #88]	@ (8008aa8 <TIM_OC6_SetConfig+0xc0>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d007      	beq.n	8008a64 <TIM_OC6_SetConfig+0x7c>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a15      	ldr	r2, [pc, #84]	@ (8008aac <TIM_OC6_SetConfig+0xc4>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d003      	beq.n	8008a64 <TIM_OC6_SetConfig+0x7c>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a14      	ldr	r2, [pc, #80]	@ (8008ab0 <TIM_OC6_SetConfig+0xc8>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d109      	bne.n	8008a78 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	029b      	lsls	r3, r3, #10
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	621a      	str	r2, [r3, #32]
}
 8008a92:	bf00      	nop
 8008a94:	371c      	adds	r7, #28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	40012c00 	.word	0x40012c00
 8008aa4:	40013400 	.word	0x40013400
 8008aa8:	40014000 	.word	0x40014000
 8008aac:	40014400 	.word	0x40014400
 8008ab0:	40014800 	.word	0x40014800

08008ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
 8008ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	f023 0201 	bic.w	r2, r3, #1
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	011b      	lsls	r3, r3, #4
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f023 030a 	bic.w	r3, r3, #10
 8008af0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	621a      	str	r2, [r3, #32]
}
 8008b06:	bf00      	nop
 8008b08:	371c      	adds	r7, #28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b087      	sub	sp, #28
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6a1b      	ldr	r3, [r3, #32]
 8008b28:	f023 0210 	bic.w	r2, r3, #16
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	031b      	lsls	r3, r3, #12
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008b4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	011b      	lsls	r3, r3, #4
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	621a      	str	r2, [r3, #32]
}
 8008b66:	bf00      	nop
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b085      	sub	sp, #20
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	f043 0307 	orr.w	r3, r3, #7
 8008b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	609a      	str	r2, [r3, #8]
}
 8008ba0:	bf00      	nop
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	021a      	lsls	r2, r3, #8
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	431a      	orrs	r2, r3
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	609a      	str	r2, [r3, #8]
}
 8008be0:	bf00      	nop
 8008be2:	371c      	adds	r7, #28
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b087      	sub	sp, #28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f003 031f 	and.w	r3, r3, #31
 8008bfe:	2201      	movs	r2, #1
 8008c00:	fa02 f303 	lsl.w	r3, r2, r3
 8008c04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6a1a      	ldr	r2, [r3, #32]
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	43db      	mvns	r3, r3
 8008c0e:	401a      	ands	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6a1a      	ldr	r2, [r3, #32]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	f003 031f 	and.w	r3, r3, #31
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	fa01 f303 	lsl.w	r3, r1, r3
 8008c24:	431a      	orrs	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	621a      	str	r2, [r3, #32]
}
 8008c2a:	bf00      	nop
 8008c2c:	371c      	adds	r7, #28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
	...

08008c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d101      	bne.n	8008c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	e065      	b.n	8008d1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a2c      	ldr	r2, [pc, #176]	@ (8008d28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d004      	beq.n	8008c84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a2b      	ldr	r2, [pc, #172]	@ (8008d2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d108      	bne.n	8008c96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008c8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ca0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8008d28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d018      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cc6:	d013      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a18      	ldr	r2, [pc, #96]	@ (8008d30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d00e      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a17      	ldr	r2, [pc, #92]	@ (8008d34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d009      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a12      	ldr	r2, [pc, #72]	@ (8008d2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d004      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a13      	ldr	r2, [pc, #76]	@ (8008d38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d10c      	bne.n	8008d0a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	40012c00 	.word	0x40012c00
 8008d2c:	40013400 	.word	0x40013400
 8008d30:	40000400 	.word	0x40000400
 8008d34:	40000800 	.word	0x40000800
 8008d38:	40014000 	.word	0x40014000

08008d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e042      	b.n	8008e60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d106      	bne.n	8008df2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7f9 f941 	bl	8002074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2224      	movs	r2, #36	@ 0x24
 8008df6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f022 0201 	bic.w	r2, r2, #1
 8008e08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d002      	beq.n	8008e18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 faf4 	bl	8009400 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f825 	bl	8008e68 <UART_SetConfig>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d101      	bne.n	8008e28 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e01b      	b.n	8008e60 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	689a      	ldr	r2, [r3, #8]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f042 0201 	orr.w	r2, r2, #1
 8008e56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fb73 	bl	8009544 <UART_CheckIdleState>
 8008e5e:	4603      	mov	r3, r0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e6c:	b08c      	sub	sp, #48	@ 0x30
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e72:	2300      	movs	r3, #0
 8008e74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	689a      	ldr	r2, [r3, #8]
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	431a      	orrs	r2, r3
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	431a      	orrs	r2, r3
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	69db      	ldr	r3, [r3, #28]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	4bab      	ldr	r3, [pc, #684]	@ (8009144 <UART_SetConfig+0x2dc>)
 8008e98:	4013      	ands	r3, r2
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	6812      	ldr	r2, [r2, #0]
 8008e9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ea0:	430b      	orrs	r3, r1
 8008ea2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	68da      	ldr	r2, [r3, #12]
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	430a      	orrs	r2, r1
 8008eb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4aa0      	ldr	r2, [pc, #640]	@ (8009148 <UART_SetConfig+0x2e0>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d004      	beq.n	8008ed4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008ede:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	6812      	ldr	r2, [r2, #0]
 8008ee6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef2:	f023 010f 	bic.w	r1, r3, #15
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	430a      	orrs	r2, r1
 8008f00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a91      	ldr	r2, [pc, #580]	@ (800914c <UART_SetConfig+0x2e4>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d125      	bne.n	8008f58 <UART_SetConfig+0xf0>
 8008f0c:	4b90      	ldr	r3, [pc, #576]	@ (8009150 <UART_SetConfig+0x2e8>)
 8008f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f12:	f003 0303 	and.w	r3, r3, #3
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d81a      	bhi.n	8008f50 <UART_SetConfig+0xe8>
 8008f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f20 <UART_SetConfig+0xb8>)
 8008f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f20:	08008f31 	.word	0x08008f31
 8008f24:	08008f41 	.word	0x08008f41
 8008f28:	08008f39 	.word	0x08008f39
 8008f2c:	08008f49 	.word	0x08008f49
 8008f30:	2301      	movs	r3, #1
 8008f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f36:	e0d6      	b.n	80090e6 <UART_SetConfig+0x27e>
 8008f38:	2302      	movs	r3, #2
 8008f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f3e:	e0d2      	b.n	80090e6 <UART_SetConfig+0x27e>
 8008f40:	2304      	movs	r3, #4
 8008f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f46:	e0ce      	b.n	80090e6 <UART_SetConfig+0x27e>
 8008f48:	2308      	movs	r3, #8
 8008f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f4e:	e0ca      	b.n	80090e6 <UART_SetConfig+0x27e>
 8008f50:	2310      	movs	r3, #16
 8008f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f56:	e0c6      	b.n	80090e6 <UART_SetConfig+0x27e>
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a7d      	ldr	r2, [pc, #500]	@ (8009154 <UART_SetConfig+0x2ec>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d138      	bne.n	8008fd4 <UART_SetConfig+0x16c>
 8008f62:	4b7b      	ldr	r3, [pc, #492]	@ (8009150 <UART_SetConfig+0x2e8>)
 8008f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f68:	f003 030c 	and.w	r3, r3, #12
 8008f6c:	2b0c      	cmp	r3, #12
 8008f6e:	d82d      	bhi.n	8008fcc <UART_SetConfig+0x164>
 8008f70:	a201      	add	r2, pc, #4	@ (adr r2, 8008f78 <UART_SetConfig+0x110>)
 8008f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f76:	bf00      	nop
 8008f78:	08008fad 	.word	0x08008fad
 8008f7c:	08008fcd 	.word	0x08008fcd
 8008f80:	08008fcd 	.word	0x08008fcd
 8008f84:	08008fcd 	.word	0x08008fcd
 8008f88:	08008fbd 	.word	0x08008fbd
 8008f8c:	08008fcd 	.word	0x08008fcd
 8008f90:	08008fcd 	.word	0x08008fcd
 8008f94:	08008fcd 	.word	0x08008fcd
 8008f98:	08008fb5 	.word	0x08008fb5
 8008f9c:	08008fcd 	.word	0x08008fcd
 8008fa0:	08008fcd 	.word	0x08008fcd
 8008fa4:	08008fcd 	.word	0x08008fcd
 8008fa8:	08008fc5 	.word	0x08008fc5
 8008fac:	2300      	movs	r3, #0
 8008fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fb2:	e098      	b.n	80090e6 <UART_SetConfig+0x27e>
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fba:	e094      	b.n	80090e6 <UART_SetConfig+0x27e>
 8008fbc:	2304      	movs	r3, #4
 8008fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fc2:	e090      	b.n	80090e6 <UART_SetConfig+0x27e>
 8008fc4:	2308      	movs	r3, #8
 8008fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fca:	e08c      	b.n	80090e6 <UART_SetConfig+0x27e>
 8008fcc:	2310      	movs	r3, #16
 8008fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fd2:	e088      	b.n	80090e6 <UART_SetConfig+0x27e>
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a5f      	ldr	r2, [pc, #380]	@ (8009158 <UART_SetConfig+0x2f0>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d125      	bne.n	800902a <UART_SetConfig+0x1c2>
 8008fde:	4b5c      	ldr	r3, [pc, #368]	@ (8009150 <UART_SetConfig+0x2e8>)
 8008fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fe4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008fe8:	2b30      	cmp	r3, #48	@ 0x30
 8008fea:	d016      	beq.n	800901a <UART_SetConfig+0x1b2>
 8008fec:	2b30      	cmp	r3, #48	@ 0x30
 8008fee:	d818      	bhi.n	8009022 <UART_SetConfig+0x1ba>
 8008ff0:	2b20      	cmp	r3, #32
 8008ff2:	d00a      	beq.n	800900a <UART_SetConfig+0x1a2>
 8008ff4:	2b20      	cmp	r3, #32
 8008ff6:	d814      	bhi.n	8009022 <UART_SetConfig+0x1ba>
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d002      	beq.n	8009002 <UART_SetConfig+0x19a>
 8008ffc:	2b10      	cmp	r3, #16
 8008ffe:	d008      	beq.n	8009012 <UART_SetConfig+0x1aa>
 8009000:	e00f      	b.n	8009022 <UART_SetConfig+0x1ba>
 8009002:	2300      	movs	r3, #0
 8009004:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009008:	e06d      	b.n	80090e6 <UART_SetConfig+0x27e>
 800900a:	2302      	movs	r3, #2
 800900c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009010:	e069      	b.n	80090e6 <UART_SetConfig+0x27e>
 8009012:	2304      	movs	r3, #4
 8009014:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009018:	e065      	b.n	80090e6 <UART_SetConfig+0x27e>
 800901a:	2308      	movs	r3, #8
 800901c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009020:	e061      	b.n	80090e6 <UART_SetConfig+0x27e>
 8009022:	2310      	movs	r3, #16
 8009024:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009028:	e05d      	b.n	80090e6 <UART_SetConfig+0x27e>
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a4b      	ldr	r2, [pc, #300]	@ (800915c <UART_SetConfig+0x2f4>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d125      	bne.n	8009080 <UART_SetConfig+0x218>
 8009034:	4b46      	ldr	r3, [pc, #280]	@ (8009150 <UART_SetConfig+0x2e8>)
 8009036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800903a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800903e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009040:	d016      	beq.n	8009070 <UART_SetConfig+0x208>
 8009042:	2bc0      	cmp	r3, #192	@ 0xc0
 8009044:	d818      	bhi.n	8009078 <UART_SetConfig+0x210>
 8009046:	2b80      	cmp	r3, #128	@ 0x80
 8009048:	d00a      	beq.n	8009060 <UART_SetConfig+0x1f8>
 800904a:	2b80      	cmp	r3, #128	@ 0x80
 800904c:	d814      	bhi.n	8009078 <UART_SetConfig+0x210>
 800904e:	2b00      	cmp	r3, #0
 8009050:	d002      	beq.n	8009058 <UART_SetConfig+0x1f0>
 8009052:	2b40      	cmp	r3, #64	@ 0x40
 8009054:	d008      	beq.n	8009068 <UART_SetConfig+0x200>
 8009056:	e00f      	b.n	8009078 <UART_SetConfig+0x210>
 8009058:	2300      	movs	r3, #0
 800905a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800905e:	e042      	b.n	80090e6 <UART_SetConfig+0x27e>
 8009060:	2302      	movs	r3, #2
 8009062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009066:	e03e      	b.n	80090e6 <UART_SetConfig+0x27e>
 8009068:	2304      	movs	r3, #4
 800906a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800906e:	e03a      	b.n	80090e6 <UART_SetConfig+0x27e>
 8009070:	2308      	movs	r3, #8
 8009072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009076:	e036      	b.n	80090e6 <UART_SetConfig+0x27e>
 8009078:	2310      	movs	r3, #16
 800907a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800907e:	e032      	b.n	80090e6 <UART_SetConfig+0x27e>
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a30      	ldr	r2, [pc, #192]	@ (8009148 <UART_SetConfig+0x2e0>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d12a      	bne.n	80090e0 <UART_SetConfig+0x278>
 800908a:	4b31      	ldr	r3, [pc, #196]	@ (8009150 <UART_SetConfig+0x2e8>)
 800908c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009090:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009094:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009098:	d01a      	beq.n	80090d0 <UART_SetConfig+0x268>
 800909a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800909e:	d81b      	bhi.n	80090d8 <UART_SetConfig+0x270>
 80090a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090a4:	d00c      	beq.n	80090c0 <UART_SetConfig+0x258>
 80090a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090aa:	d815      	bhi.n	80090d8 <UART_SetConfig+0x270>
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d003      	beq.n	80090b8 <UART_SetConfig+0x250>
 80090b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090b4:	d008      	beq.n	80090c8 <UART_SetConfig+0x260>
 80090b6:	e00f      	b.n	80090d8 <UART_SetConfig+0x270>
 80090b8:	2300      	movs	r3, #0
 80090ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090be:	e012      	b.n	80090e6 <UART_SetConfig+0x27e>
 80090c0:	2302      	movs	r3, #2
 80090c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090c6:	e00e      	b.n	80090e6 <UART_SetConfig+0x27e>
 80090c8:	2304      	movs	r3, #4
 80090ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ce:	e00a      	b.n	80090e6 <UART_SetConfig+0x27e>
 80090d0:	2308      	movs	r3, #8
 80090d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090d6:	e006      	b.n	80090e6 <UART_SetConfig+0x27e>
 80090d8:	2310      	movs	r3, #16
 80090da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090de:	e002      	b.n	80090e6 <UART_SetConfig+0x27e>
 80090e0:	2310      	movs	r3, #16
 80090e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a17      	ldr	r2, [pc, #92]	@ (8009148 <UART_SetConfig+0x2e0>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	f040 80a8 	bne.w	8009242 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80090f6:	2b08      	cmp	r3, #8
 80090f8:	d834      	bhi.n	8009164 <UART_SetConfig+0x2fc>
 80090fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009100 <UART_SetConfig+0x298>)
 80090fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009100:	08009125 	.word	0x08009125
 8009104:	08009165 	.word	0x08009165
 8009108:	0800912d 	.word	0x0800912d
 800910c:	08009165 	.word	0x08009165
 8009110:	08009133 	.word	0x08009133
 8009114:	08009165 	.word	0x08009165
 8009118:	08009165 	.word	0x08009165
 800911c:	08009165 	.word	0x08009165
 8009120:	0800913b 	.word	0x0800913b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009124:	f7fe f928 	bl	8007378 <HAL_RCC_GetPCLK1Freq>
 8009128:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800912a:	e021      	b.n	8009170 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800912c:	4b0c      	ldr	r3, [pc, #48]	@ (8009160 <UART_SetConfig+0x2f8>)
 800912e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009130:	e01e      	b.n	8009170 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009132:	f7fe f8b3 	bl	800729c <HAL_RCC_GetSysClockFreq>
 8009136:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009138:	e01a      	b.n	8009170 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800913a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800913e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009140:	e016      	b.n	8009170 <UART_SetConfig+0x308>
 8009142:	bf00      	nop
 8009144:	cfff69f3 	.word	0xcfff69f3
 8009148:	40008000 	.word	0x40008000
 800914c:	40013800 	.word	0x40013800
 8009150:	40021000 	.word	0x40021000
 8009154:	40004400 	.word	0x40004400
 8009158:	40004800 	.word	0x40004800
 800915c:	40004c00 	.word	0x40004c00
 8009160:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009164:	2300      	movs	r3, #0
 8009166:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800916e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009172:	2b00      	cmp	r3, #0
 8009174:	f000 812a 	beq.w	80093cc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917c:	4a9e      	ldr	r2, [pc, #632]	@ (80093f8 <UART_SetConfig+0x590>)
 800917e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009182:	461a      	mov	r2, r3
 8009184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009186:	fbb3 f3f2 	udiv	r3, r3, r2
 800918a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	4613      	mov	r3, r2
 8009192:	005b      	lsls	r3, r3, #1
 8009194:	4413      	add	r3, r2
 8009196:	69ba      	ldr	r2, [r7, #24]
 8009198:	429a      	cmp	r2, r3
 800919a:	d305      	bcc.n	80091a8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d903      	bls.n	80091b0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80091ae:	e10d      	b.n	80093cc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b2:	2200      	movs	r2, #0
 80091b4:	60bb      	str	r3, [r7, #8]
 80091b6:	60fa      	str	r2, [r7, #12]
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091bc:	4a8e      	ldr	r2, [pc, #568]	@ (80093f8 <UART_SetConfig+0x590>)
 80091be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	2200      	movs	r2, #0
 80091c6:	603b      	str	r3, [r7, #0]
 80091c8:	607a      	str	r2, [r7, #4]
 80091ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80091d2:	f7f7 fd61 	bl	8000c98 <__aeabi_uldivmod>
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4610      	mov	r0, r2
 80091dc:	4619      	mov	r1, r3
 80091de:	f04f 0200 	mov.w	r2, #0
 80091e2:	f04f 0300 	mov.w	r3, #0
 80091e6:	020b      	lsls	r3, r1, #8
 80091e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80091ec:	0202      	lsls	r2, r0, #8
 80091ee:	6979      	ldr	r1, [r7, #20]
 80091f0:	6849      	ldr	r1, [r1, #4]
 80091f2:	0849      	lsrs	r1, r1, #1
 80091f4:	2000      	movs	r0, #0
 80091f6:	460c      	mov	r4, r1
 80091f8:	4605      	mov	r5, r0
 80091fa:	eb12 0804 	adds.w	r8, r2, r4
 80091fe:	eb43 0905 	adc.w	r9, r3, r5
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	469a      	mov	sl, r3
 800920a:	4693      	mov	fp, r2
 800920c:	4652      	mov	r2, sl
 800920e:	465b      	mov	r3, fp
 8009210:	4640      	mov	r0, r8
 8009212:	4649      	mov	r1, r9
 8009214:	f7f7 fd40 	bl	8000c98 <__aeabi_uldivmod>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4613      	mov	r3, r2
 800921e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009220:	6a3b      	ldr	r3, [r7, #32]
 8009222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009226:	d308      	bcc.n	800923a <UART_SetConfig+0x3d2>
 8009228:	6a3b      	ldr	r3, [r7, #32]
 800922a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800922e:	d204      	bcs.n	800923a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6a3a      	ldr	r2, [r7, #32]
 8009236:	60da      	str	r2, [r3, #12]
 8009238:	e0c8      	b.n	80093cc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009240:	e0c4      	b.n	80093cc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	69db      	ldr	r3, [r3, #28]
 8009246:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800924a:	d167      	bne.n	800931c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800924c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009250:	2b08      	cmp	r3, #8
 8009252:	d828      	bhi.n	80092a6 <UART_SetConfig+0x43e>
 8009254:	a201      	add	r2, pc, #4	@ (adr r2, 800925c <UART_SetConfig+0x3f4>)
 8009256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925a:	bf00      	nop
 800925c:	08009281 	.word	0x08009281
 8009260:	08009289 	.word	0x08009289
 8009264:	08009291 	.word	0x08009291
 8009268:	080092a7 	.word	0x080092a7
 800926c:	08009297 	.word	0x08009297
 8009270:	080092a7 	.word	0x080092a7
 8009274:	080092a7 	.word	0x080092a7
 8009278:	080092a7 	.word	0x080092a7
 800927c:	0800929f 	.word	0x0800929f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009280:	f7fe f87a 	bl	8007378 <HAL_RCC_GetPCLK1Freq>
 8009284:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009286:	e014      	b.n	80092b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009288:	f7fe f88c 	bl	80073a4 <HAL_RCC_GetPCLK2Freq>
 800928c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800928e:	e010      	b.n	80092b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009290:	4b5a      	ldr	r3, [pc, #360]	@ (80093fc <UART_SetConfig+0x594>)
 8009292:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009294:	e00d      	b.n	80092b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009296:	f7fe f801 	bl	800729c <HAL_RCC_GetSysClockFreq>
 800929a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800929c:	e009      	b.n	80092b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800929e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80092a4:	e005      	b.n	80092b2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80092a6:	2300      	movs	r3, #0
 80092a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80092b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 8089 	beq.w	80093cc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092be:	4a4e      	ldr	r2, [pc, #312]	@ (80093f8 <UART_SetConfig+0x590>)
 80092c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092c4:	461a      	mov	r2, r3
 80092c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80092cc:	005a      	lsls	r2, r3, #1
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	085b      	lsrs	r3, r3, #1
 80092d4:	441a      	add	r2, r3
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	fbb2 f3f3 	udiv	r3, r2, r3
 80092de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	2b0f      	cmp	r3, #15
 80092e4:	d916      	bls.n	8009314 <UART_SetConfig+0x4ac>
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092ec:	d212      	bcs.n	8009314 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092ee:	6a3b      	ldr	r3, [r7, #32]
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	f023 030f 	bic.w	r3, r3, #15
 80092f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092f8:	6a3b      	ldr	r3, [r7, #32]
 80092fa:	085b      	lsrs	r3, r3, #1
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	f003 0307 	and.w	r3, r3, #7
 8009302:	b29a      	uxth	r2, r3
 8009304:	8bfb      	ldrh	r3, [r7, #30]
 8009306:	4313      	orrs	r3, r2
 8009308:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	8bfa      	ldrh	r2, [r7, #30]
 8009310:	60da      	str	r2, [r3, #12]
 8009312:	e05b      	b.n	80093cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800931a:	e057      	b.n	80093cc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800931c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009320:	2b08      	cmp	r3, #8
 8009322:	d828      	bhi.n	8009376 <UART_SetConfig+0x50e>
 8009324:	a201      	add	r2, pc, #4	@ (adr r2, 800932c <UART_SetConfig+0x4c4>)
 8009326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932a:	bf00      	nop
 800932c:	08009351 	.word	0x08009351
 8009330:	08009359 	.word	0x08009359
 8009334:	08009361 	.word	0x08009361
 8009338:	08009377 	.word	0x08009377
 800933c:	08009367 	.word	0x08009367
 8009340:	08009377 	.word	0x08009377
 8009344:	08009377 	.word	0x08009377
 8009348:	08009377 	.word	0x08009377
 800934c:	0800936f 	.word	0x0800936f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009350:	f7fe f812 	bl	8007378 <HAL_RCC_GetPCLK1Freq>
 8009354:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009356:	e014      	b.n	8009382 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009358:	f7fe f824 	bl	80073a4 <HAL_RCC_GetPCLK2Freq>
 800935c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800935e:	e010      	b.n	8009382 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009360:	4b26      	ldr	r3, [pc, #152]	@ (80093fc <UART_SetConfig+0x594>)
 8009362:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009364:	e00d      	b.n	8009382 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009366:	f7fd ff99 	bl	800729c <HAL_RCC_GetSysClockFreq>
 800936a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800936c:	e009      	b.n	8009382 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800936e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009372:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009374:	e005      	b.n	8009382 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009376:	2300      	movs	r3, #0
 8009378:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009380:	bf00      	nop
    }

    if (pclk != 0U)
 8009382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009384:	2b00      	cmp	r3, #0
 8009386:	d021      	beq.n	80093cc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938c:	4a1a      	ldr	r2, [pc, #104]	@ (80093f8 <UART_SetConfig+0x590>)
 800938e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009392:	461a      	mov	r2, r3
 8009394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009396:	fbb3 f2f2 	udiv	r2, r3, r2
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	085b      	lsrs	r3, r3, #1
 80093a0:	441a      	add	r2, r3
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093ac:	6a3b      	ldr	r3, [r7, #32]
 80093ae:	2b0f      	cmp	r3, #15
 80093b0:	d909      	bls.n	80093c6 <UART_SetConfig+0x55e>
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093b8:	d205      	bcs.n	80093c6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093ba:	6a3b      	ldr	r3, [r7, #32]
 80093bc:	b29a      	uxth	r2, r3
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	60da      	str	r2, [r3, #12]
 80093c4:	e002      	b.n	80093cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2200      	movs	r2, #0
 80093e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2200      	movs	r2, #0
 80093e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80093e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3730      	adds	r7, #48	@ 0x30
 80093f0:	46bd      	mov	sp, r7
 80093f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093f6:	bf00      	nop
 80093f8:	08011478 	.word	0x08011478
 80093fc:	00f42400 	.word	0x00f42400

08009400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800940c:	f003 0308 	and.w	r3, r3, #8
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00a      	beq.n	800942a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	430a      	orrs	r2, r1
 8009428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00a      	beq.n	800944c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	430a      	orrs	r2, r1
 800944a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00a      	beq.n	800946e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	430a      	orrs	r2, r1
 800946c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009472:	f003 0304 	and.w	r3, r3, #4
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00a      	beq.n	8009490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	430a      	orrs	r2, r1
 800948e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009494:	f003 0310 	and.w	r3, r3, #16
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00a      	beq.n	80094b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094b6:	f003 0320 	and.w	r3, r3, #32
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	430a      	orrs	r2, r1
 80094d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d01a      	beq.n	8009516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	430a      	orrs	r2, r1
 80094f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094fe:	d10a      	bne.n	8009516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	430a      	orrs	r2, r1
 8009514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800951a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00a      	beq.n	8009538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	430a      	orrs	r2, r1
 8009536:	605a      	str	r2, [r3, #4]
  }
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b098      	sub	sp, #96	@ 0x60
 8009548:	af02      	add	r7, sp, #8
 800954a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009554:	f7f9 f894 	bl	8002680 <HAL_GetTick>
 8009558:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 0308 	and.w	r3, r3, #8
 8009564:	2b08      	cmp	r3, #8
 8009566:	d12f      	bne.n	80095c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009568:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009570:	2200      	movs	r2, #0
 8009572:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f88e 	bl	8009698 <UART_WaitOnFlagUntilTimeout>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d022      	beq.n	80095c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958a:	e853 3f00 	ldrex	r3, [r3]
 800958e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009592:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009596:	653b      	str	r3, [r7, #80]	@ 0x50
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	461a      	mov	r2, r3
 800959e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80095a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095a8:	e841 2300 	strex	r3, r2, [r1]
 80095ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e6      	bne.n	8009582 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2220      	movs	r2, #32
 80095b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095c4:	2303      	movs	r3, #3
 80095c6:	e063      	b.n	8009690 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0304 	and.w	r3, r3, #4
 80095d2:	2b04      	cmp	r3, #4
 80095d4:	d149      	bne.n	800966a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095de:	2200      	movs	r2, #0
 80095e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f857 	bl	8009698 <UART_WaitOnFlagUntilTimeout>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d03c      	beq.n	800966a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	623b      	str	r3, [r7, #32]
   return(result);
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009604:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800960e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009610:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009614:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009616:	e841 2300 	strex	r3, r2, [r1]
 800961a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800961c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1e6      	bne.n	80095f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	3308      	adds	r3, #8
 8009628:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	e853 3f00 	ldrex	r3, [r3]
 8009630:	60fb      	str	r3, [r7, #12]
   return(result);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f023 0301 	bic.w	r3, r3, #1
 8009638:	64bb      	str	r3, [r7, #72]	@ 0x48
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3308      	adds	r3, #8
 8009640:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009642:	61fa      	str	r2, [r7, #28]
 8009644:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009646:	69b9      	ldr	r1, [r7, #24]
 8009648:	69fa      	ldr	r2, [r7, #28]
 800964a:	e841 2300 	strex	r3, r2, [r1]
 800964e:	617b      	str	r3, [r7, #20]
   return(result);
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1e5      	bne.n	8009622 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2220      	movs	r2, #32
 800965a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e012      	b.n	8009690 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2220      	movs	r2, #32
 800966e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2220      	movs	r2, #32
 8009676:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3758      	adds	r7, #88	@ 0x58
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	603b      	str	r3, [r7, #0]
 80096a4:	4613      	mov	r3, r2
 80096a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096a8:	e04f      	b.n	800974a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b0:	d04b      	beq.n	800974a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096b2:	f7f8 ffe5 	bl	8002680 <HAL_GetTick>
 80096b6:	4602      	mov	r2, r0
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	69ba      	ldr	r2, [r7, #24]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d302      	bcc.n	80096c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d101      	bne.n	80096cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e04e      	b.n	800976a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 0304 	and.w	r3, r3, #4
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d037      	beq.n	800974a <UART_WaitOnFlagUntilTimeout+0xb2>
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2b80      	cmp	r3, #128	@ 0x80
 80096de:	d034      	beq.n	800974a <UART_WaitOnFlagUntilTimeout+0xb2>
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	2b40      	cmp	r3, #64	@ 0x40
 80096e4:	d031      	beq.n	800974a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	f003 0308 	and.w	r3, r3, #8
 80096f0:	2b08      	cmp	r3, #8
 80096f2:	d110      	bne.n	8009716 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2208      	movs	r2, #8
 80096fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f000 f838 	bl	8009772 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2208      	movs	r2, #8
 8009706:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e029      	b.n	800976a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009724:	d111      	bne.n	800974a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800972e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f000 f81e 	bl	8009772 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2220      	movs	r2, #32
 800973a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e00f      	b.n	800976a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	69da      	ldr	r2, [r3, #28]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	4013      	ands	r3, r2
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	429a      	cmp	r2, r3
 8009758:	bf0c      	ite	eq
 800975a:	2301      	moveq	r3, #1
 800975c:	2300      	movne	r3, #0
 800975e:	b2db      	uxtb	r3, r3
 8009760:	461a      	mov	r2, r3
 8009762:	79fb      	ldrb	r3, [r7, #7]
 8009764:	429a      	cmp	r2, r3
 8009766:	d0a0      	beq.n	80096aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009772:	b480      	push	{r7}
 8009774:	b095      	sub	sp, #84	@ 0x54
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009782:	e853 3f00 	ldrex	r3, [r3]
 8009786:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800978e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	461a      	mov	r2, r3
 8009796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009798:	643b      	str	r3, [r7, #64]	@ 0x40
 800979a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800979e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097a0:	e841 2300 	strex	r3, r2, [r1]
 80097a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1e6      	bne.n	800977a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	3308      	adds	r3, #8
 80097b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	e853 3f00 	ldrex	r3, [r3]
 80097ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097c2:	f023 0301 	bic.w	r3, r3, #1
 80097c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3308      	adds	r3, #8
 80097ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097d8:	e841 2300 	strex	r3, r2, [r1]
 80097dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1e3      	bne.n	80097ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d118      	bne.n	800981e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	e853 3f00 	ldrex	r3, [r3]
 80097f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	f023 0310 	bic.w	r3, r3, #16
 8009800:	647b      	str	r3, [r7, #68]	@ 0x44
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	461a      	mov	r2, r3
 8009808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800980a:	61bb      	str	r3, [r7, #24]
 800980c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980e:	6979      	ldr	r1, [r7, #20]
 8009810:	69ba      	ldr	r2, [r7, #24]
 8009812:	e841 2300 	strex	r3, r2, [r1]
 8009816:	613b      	str	r3, [r7, #16]
   return(result);
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1e6      	bne.n	80097ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2220      	movs	r2, #32
 8009822:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009832:	bf00      	nop
 8009834:	3754      	adds	r7, #84	@ 0x54
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr

0800983e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800983e:	b480      	push	{r7}
 8009840:	b085      	sub	sp, #20
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800984c:	2b01      	cmp	r3, #1
 800984e:	d101      	bne.n	8009854 <HAL_UARTEx_DisableFifoMode+0x16>
 8009850:	2302      	movs	r3, #2
 8009852:	e027      	b.n	80098a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2224      	movs	r2, #36	@ 0x24
 8009860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f022 0201 	bic.w	r2, r2, #1
 800987a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009882:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2220      	movs	r2, #32
 8009896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d101      	bne.n	80098c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098c4:	2302      	movs	r3, #2
 80098c6:	e02d      	b.n	8009924 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2224      	movs	r2, #36	@ 0x24
 80098d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f022 0201 	bic.w	r2, r2, #1
 80098ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	430a      	orrs	r2, r1
 8009902:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 f84f 	bl	80099a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2220      	movs	r2, #32
 8009916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800993c:	2b01      	cmp	r3, #1
 800993e:	d101      	bne.n	8009944 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009940:	2302      	movs	r3, #2
 8009942:	e02d      	b.n	80099a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2224      	movs	r2, #36	@ 0x24
 8009950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f022 0201 	bic.w	r2, r2, #1
 800996a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	430a      	orrs	r2, r1
 800997e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f811 	bl	80099a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2220      	movs	r2, #32
 8009992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d108      	bne.n	80099ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099c8:	e031      	b.n	8009a2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099ca:	2308      	movs	r3, #8
 80099cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099ce:	2308      	movs	r3, #8
 80099d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	0e5b      	lsrs	r3, r3, #25
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	f003 0307 	and.w	r3, r3, #7
 80099e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	0f5b      	lsrs	r3, r3, #29
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	f003 0307 	and.w	r3, r3, #7
 80099f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099f2:	7bbb      	ldrb	r3, [r7, #14]
 80099f4:	7b3a      	ldrb	r2, [r7, #12]
 80099f6:	4911      	ldr	r1, [pc, #68]	@ (8009a3c <UARTEx_SetNbDataToProcess+0x94>)
 80099f8:	5c8a      	ldrb	r2, [r1, r2]
 80099fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80099fe:	7b3a      	ldrb	r2, [r7, #12]
 8009a00:	490f      	ldr	r1, [pc, #60]	@ (8009a40 <UARTEx_SetNbDataToProcess+0x98>)
 8009a02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a04:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
 8009a12:	7b7a      	ldrb	r2, [r7, #13]
 8009a14:	4909      	ldr	r1, [pc, #36]	@ (8009a3c <UARTEx_SetNbDataToProcess+0x94>)
 8009a16:	5c8a      	ldrb	r2, [r1, r2]
 8009a18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a1c:	7b7a      	ldrb	r2, [r7, #13]
 8009a1e:	4908      	ldr	r1, [pc, #32]	@ (8009a40 <UARTEx_SetNbDataToProcess+0x98>)
 8009a20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a22:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009a2e:	bf00      	nop
 8009a30:	3714      	adds	r7, #20
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	08011490 	.word	0x08011490
 8009a40:	08011498 	.word	0x08011498

08009a44 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b08b      	sub	sp, #44	@ 0x2c
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	fa93 f3a3 	rbit	r3, r3
 8009a5e:	613b      	str	r3, [r7, #16]
  return result;
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d101      	bne.n	8009a6e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009a6a:	2320      	movs	r3, #32
 8009a6c:	e003      	b.n	8009a76 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	fab3 f383 	clz	r3, r3
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	005b      	lsls	r3, r3, #1
 8009a78:	2103      	movs	r1, #3
 8009a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a7e:	43db      	mvns	r3, r3
 8009a80:	401a      	ands	r2, r3
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a86:	6a3b      	ldr	r3, [r7, #32]
 8009a88:	fa93 f3a3 	rbit	r3, r3
 8009a8c:	61fb      	str	r3, [r7, #28]
  return result;
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d101      	bne.n	8009a9c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009a98:	2320      	movs	r3, #32
 8009a9a:	e003      	b.n	8009aa4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9e:	fab3 f383 	clz	r3, r3
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	005b      	lsls	r3, r3, #1
 8009aa6:	6879      	ldr	r1, [r7, #4]
 8009aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8009aac:	431a      	orrs	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	601a      	str	r2, [r3, #0]
}
 8009ab2:	bf00      	nop
 8009ab4:	372c      	adds	r7, #44	@ 0x2c
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b085      	sub	sp, #20
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	60f8      	str	r0, [r7, #12]
 8009ac6:	60b9      	str	r1, [r7, #8]
 8009ac8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	685a      	ldr	r2, [r3, #4]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	43db      	mvns	r3, r3
 8009ad2:	401a      	ands	r2, r3
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	6879      	ldr	r1, [r7, #4]
 8009ad8:	fb01 f303 	mul.w	r3, r1, r3
 8009adc:	431a      	orrs	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	605a      	str	r2, [r3, #4]
}
 8009ae2:	bf00      	nop
 8009ae4:	3714      	adds	r7, #20
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009aee:	b480      	push	{r7}
 8009af0:	b08b      	sub	sp, #44	@ 0x2c
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	60f8      	str	r0, [r7, #12]
 8009af6:	60b9      	str	r1, [r7, #8]
 8009af8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	689a      	ldr	r2, [r3, #8]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	fa93 f3a3 	rbit	r3, r3
 8009b08:	613b      	str	r3, [r7, #16]
  return result;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d101      	bne.n	8009b18 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009b14:	2320      	movs	r3, #32
 8009b16:	e003      	b.n	8009b20 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	fab3 f383 	clz	r3, r3
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	005b      	lsls	r3, r3, #1
 8009b22:	2103      	movs	r1, #3
 8009b24:	fa01 f303 	lsl.w	r3, r1, r3
 8009b28:	43db      	mvns	r3, r3
 8009b2a:	401a      	ands	r2, r3
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	fa93 f3a3 	rbit	r3, r3
 8009b36:	61fb      	str	r3, [r7, #28]
  return result;
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d101      	bne.n	8009b46 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009b42:	2320      	movs	r3, #32
 8009b44:	e003      	b.n	8009b4e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b48:	fab3 f383 	clz	r3, r3
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	005b      	lsls	r3, r3, #1
 8009b50:	6879      	ldr	r1, [r7, #4]
 8009b52:	fa01 f303 	lsl.w	r3, r1, r3
 8009b56:	431a      	orrs	r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009b5c:	bf00      	nop
 8009b5e:	372c      	adds	r7, #44	@ 0x2c
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b08b      	sub	sp, #44	@ 0x2c
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	68da      	ldr	r2, [r3, #12]
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	fa93 f3a3 	rbit	r3, r3
 8009b82:	613b      	str	r3, [r7, #16]
  return result;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d101      	bne.n	8009b92 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009b8e:	2320      	movs	r3, #32
 8009b90:	e003      	b.n	8009b9a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	fab3 f383 	clz	r3, r3
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	005b      	lsls	r3, r3, #1
 8009b9c:	2103      	movs	r1, #3
 8009b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009ba2:	43db      	mvns	r3, r3
 8009ba4:	401a      	ands	r2, r3
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009baa:	6a3b      	ldr	r3, [r7, #32]
 8009bac:	fa93 f3a3 	rbit	r3, r3
 8009bb0:	61fb      	str	r3, [r7, #28]
  return result;
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d101      	bne.n	8009bc0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009bbc:	2320      	movs	r3, #32
 8009bbe:	e003      	b.n	8009bc8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc2:	fab3 f383 	clz	r3, r3
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	005b      	lsls	r3, r3, #1
 8009bca:	6879      	ldr	r1, [r7, #4]
 8009bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd0:	431a      	orrs	r2, r3
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	60da      	str	r2, [r3, #12]
}
 8009bd6:	bf00      	nop
 8009bd8:	372c      	adds	r7, #44	@ 0x2c
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr

08009be2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009be2:	b480      	push	{r7}
 8009be4:	b08b      	sub	sp, #44	@ 0x2c
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	60f8      	str	r0, [r7, #12]
 8009bea:	60b9      	str	r1, [r7, #8]
 8009bec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6a1a      	ldr	r2, [r3, #32]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	fa93 f3a3 	rbit	r3, r3
 8009bfc:	613b      	str	r3, [r7, #16]
  return result;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d101      	bne.n	8009c0c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009c08:	2320      	movs	r3, #32
 8009c0a:	e003      	b.n	8009c14 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	fab3 f383 	clz	r3, r3
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	210f      	movs	r1, #15
 8009c18:	fa01 f303 	lsl.w	r3, r1, r3
 8009c1c:	43db      	mvns	r3, r3
 8009c1e:	401a      	ands	r2, r3
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	fa93 f3a3 	rbit	r3, r3
 8009c2a:	61fb      	str	r3, [r7, #28]
  return result;
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d101      	bne.n	8009c3a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009c36:	2320      	movs	r3, #32
 8009c38:	e003      	b.n	8009c42 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3c:	fab3 f383 	clz	r3, r3
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	6879      	ldr	r1, [r7, #4]
 8009c46:	fa01 f303 	lsl.w	r3, r1, r3
 8009c4a:	431a      	orrs	r2, r3
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009c50:	bf00      	nop
 8009c52:	372c      	adds	r7, #44	@ 0x2c
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b08b      	sub	sp, #44	@ 0x2c
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	0a1b      	lsrs	r3, r3, #8
 8009c70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	fa93 f3a3 	rbit	r3, r3
 8009c78:	613b      	str	r3, [r7, #16]
  return result;
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d101      	bne.n	8009c88 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009c84:	2320      	movs	r3, #32
 8009c86:	e003      	b.n	8009c90 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	fab3 f383 	clz	r3, r3
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	210f      	movs	r1, #15
 8009c94:	fa01 f303 	lsl.w	r3, r1, r3
 8009c98:	43db      	mvns	r3, r3
 8009c9a:	401a      	ands	r2, r3
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	0a1b      	lsrs	r3, r3, #8
 8009ca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ca2:	6a3b      	ldr	r3, [r7, #32]
 8009ca4:	fa93 f3a3 	rbit	r3, r3
 8009ca8:	61fb      	str	r3, [r7, #28]
  return result;
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d101      	bne.n	8009cb8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009cb4:	2320      	movs	r3, #32
 8009cb6:	e003      	b.n	8009cc0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cba:	fab3 f383 	clz	r3, r3
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	6879      	ldr	r1, [r7, #4]
 8009cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8009cc8:	431a      	orrs	r2, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8009cce:	bf00      	nop
 8009cd0:	372c      	adds	r7, #44	@ 0x2c
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b088      	sub	sp, #32
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	fa93 f3a3 	rbit	r3, r3
 8009cf0:	60fb      	str	r3, [r7, #12]
  return result;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d101      	bne.n	8009d00 <LL_GPIO_Init+0x26>
    return 32U;
 8009cfc:	2320      	movs	r3, #32
 8009cfe:	e003      	b.n	8009d08 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	fab3 f383 	clz	r3, r3
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009d0a:	e048      	b.n	8009d9e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	2101      	movs	r1, #1
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	fa01 f303 	lsl.w	r3, r1, r3
 8009d18:	4013      	ands	r3, r2
 8009d1a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d03a      	beq.n	8009d98 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d003      	beq.n	8009d32 <LL_GPIO_Init+0x58>
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d10e      	bne.n	8009d50 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	461a      	mov	r2, r3
 8009d38:	69b9      	ldr	r1, [r7, #24]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7ff fed7 	bl	8009aee <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	6819      	ldr	r1, [r3, #0]
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7ff feb7 	bl	8009abe <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	461a      	mov	r2, r3
 8009d56:	69b9      	ldr	r1, [r7, #24]
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7ff ff05 	bl	8009b68 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d111      	bne.n	8009d8a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	2bff      	cmp	r3, #255	@ 0xff
 8009d6a:	d807      	bhi.n	8009d7c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	695b      	ldr	r3, [r3, #20]
 8009d70:	461a      	mov	r2, r3
 8009d72:	69b9      	ldr	r1, [r7, #24]
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f7ff ff34 	bl	8009be2 <LL_GPIO_SetAFPin_0_7>
 8009d7a:	e006      	b.n	8009d8a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	695b      	ldr	r3, [r3, #20]
 8009d80:	461a      	mov	r2, r3
 8009d82:	69b9      	ldr	r1, [r7, #24]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f7ff ff69 	bl	8009c5c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	69b9      	ldr	r1, [r7, #24]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f7ff fe56 	bl	8009a44 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	fa22 f303 	lsr.w	r3, r2, r3
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1af      	bne.n	8009d0c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3720      	adds	r7, #32
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b085      	sub	sp, #20
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009dc6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009dca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009dec:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009df0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	43db      	mvns	r3, r3
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	4013      	ands	r3, r2
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3714      	adds	r7, #20
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b085      	sub	sp, #20
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	1d3b      	adds	r3, r7, #4
 8009e24:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3714      	adds	r7, #20
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr
	...

08009e58 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b09d      	sub	sp, #116	@ 0x74
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e62:	2300      	movs	r3, #0
 8009e64:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	881b      	ldrh	r3, [r3, #0]
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8009e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e7e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	78db      	ldrb	r3, [r3, #3]
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d81f      	bhi.n	8009eca <USB_ActivateEndpoint+0x72>
 8009e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e90 <USB_ActivateEndpoint+0x38>)
 8009e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e90:	08009ea1 	.word	0x08009ea1
 8009e94:	08009ebd 	.word	0x08009ebd
 8009e98:	08009ed3 	.word	0x08009ed3
 8009e9c:	08009eaf 	.word	0x08009eaf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009ea0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009ea4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009ea8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009eac:	e012      	b.n	8009ed4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009eae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009eb2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009eb6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009eba:	e00b      	b.n	8009ed4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009ebc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009ec0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009ec4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009ec8:	e004      	b.n	8009ed4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8009ed0:	e000      	b.n	8009ed4 <USB_ActivateEndpoint+0x7c>
      break;
 8009ed2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	441a      	add	r2, r3
 8009ede:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009ee2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ee6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4413      	add	r3, r2
 8009f00:	881b      	ldrh	r3, [r3, #0]
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	b21b      	sxth	r3, r3
 8009f06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f0e:	b21a      	sxth	r2, r3
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	b21b      	sxth	r3, r3
 8009f16:	4313      	orrs	r3, r2
 8009f18:	b21b      	sxth	r3, r3
 8009f1a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	441a      	add	r2, r3
 8009f28:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009f2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	7b1b      	ldrb	r3, [r3, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f040 8178 	bne.w	800a23a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	785b      	ldrb	r3, [r3, #1]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f000 8084 	beq.w	800a05c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	61bb      	str	r3, [r7, #24]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	461a      	mov	r2, r3
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	4413      	add	r3, r2
 8009f66:	61bb      	str	r3, [r7, #24]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	00da      	lsls	r2, r3, #3
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f76:	617b      	str	r3, [r7, #20]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	88db      	ldrh	r3, [r3, #6]
 8009f7c:	085b      	lsrs	r3, r3, #1
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	881b      	ldrh	r3, [r3, #0]
 8009f94:	827b      	strh	r3, [r7, #18]
 8009f96:	8a7b      	ldrh	r3, [r7, #18]
 8009f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d01b      	beq.n	8009fd8 <USB_ActivateEndpoint+0x180>
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	881b      	ldrh	r3, [r3, #0]
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fb6:	823b      	strh	r3, [r7, #16]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	441a      	add	r2, r3
 8009fc2:	8a3b      	ldrh	r3, [r7, #16]
 8009fc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fd0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	78db      	ldrb	r3, [r3, #3]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d020      	beq.n	800a022 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4413      	add	r3, r2
 8009fea:	881b      	ldrh	r3, [r3, #0]
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ff2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ff6:	81bb      	strh	r3, [r7, #12]
 8009ff8:	89bb      	ldrh	r3, [r7, #12]
 8009ffa:	f083 0320 	eor.w	r3, r3, #32
 8009ffe:	81bb      	strh	r3, [r7, #12]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	441a      	add	r2, r3
 800a00a:	89bb      	ldrh	r3, [r7, #12]
 800a00c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	8013      	strh	r3, [r2, #0]
 800a020:	e2d5      	b.n	800a5ce <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4413      	add	r3, r2
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a038:	81fb      	strh	r3, [r7, #14]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	441a      	add	r2, r3
 800a044:	89fb      	ldrh	r3, [r7, #14]
 800a046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a04a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a04e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a056:	b29b      	uxth	r3, r3
 800a058:	8013      	strh	r3, [r2, #0]
 800a05a:	e2b8      	b.n	800a5ce <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a066:	b29b      	uxth	r3, r3
 800a068:	461a      	mov	r2, r3
 800a06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a06c:	4413      	add	r3, r2
 800a06e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	00da      	lsls	r2, r3, #3
 800a076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a078:	4413      	add	r3, r2
 800a07a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	88db      	ldrh	r3, [r3, #6]
 800a084:	085b      	lsrs	r3, r3, #1
 800a086:	b29b      	uxth	r3, r3
 800a088:	005b      	lsls	r3, r3, #1
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a08e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	461a      	mov	r2, r3
 800a09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a0:	4413      	add	r3, r2
 800a0a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	00da      	lsls	r2, r3, #3
 800a0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ac:	4413      	add	r3, r2
 800a0ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a0b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b6:	881b      	ldrh	r3, [r3, #0]
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c2:	801a      	strh	r2, [r3, #0]
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10a      	bne.n	800a0e2 <USB_ActivateEndpoint+0x28a>
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0da:	b29a      	uxth	r2, r3
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0de:	801a      	strh	r2, [r3, #0]
 800a0e0:	e039      	b.n	800a156 <USB_ActivateEndpoint+0x2fe>
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800a0e8:	d818      	bhi.n	800a11c <USB_ActivateEndpoint+0x2c4>
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	085b      	lsrs	r3, r3, #1
 800a0f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	f003 0301 	and.w	r3, r3, #1
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d002      	beq.n	800a104 <USB_ActivateEndpoint+0x2ac>
 800a0fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a100:	3301      	adds	r3, #1
 800a102:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	b29a      	uxth	r2, r3
 800a10a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	029b      	lsls	r3, r3, #10
 800a110:	b29b      	uxth	r3, r3
 800a112:	4313      	orrs	r3, r2
 800a114:	b29a      	uxth	r2, r3
 800a116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a118:	801a      	strh	r2, [r3, #0]
 800a11a:	e01c      	b.n	800a156 <USB_ActivateEndpoint+0x2fe>
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	095b      	lsrs	r3, r3, #5
 800a122:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	f003 031f 	and.w	r3, r3, #31
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d102      	bne.n	800a136 <USB_ActivateEndpoint+0x2de>
 800a130:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a132:	3b01      	subs	r3, #1
 800a134:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a138:	881b      	ldrh	r3, [r3, #0]
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a13e:	b29b      	uxth	r3, r3
 800a140:	029b      	lsls	r3, r3, #10
 800a142:	b29b      	uxth	r3, r3
 800a144:	4313      	orrs	r3, r2
 800a146:	b29b      	uxth	r3, r3
 800a148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a14c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a150:	b29a      	uxth	r2, r3
 800a152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a154:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	881b      	ldrh	r3, [r3, #0]
 800a162:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a164:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d01b      	beq.n	800a1a6 <USB_ActivateEndpoint+0x34e>
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	4413      	add	r3, r2
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a180:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a184:	843b      	strh	r3, [r7, #32]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	441a      	add	r2, r3
 800a190:	8c3b      	ldrh	r3, [r7, #32]
 800a192:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a196:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a19a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a19e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d124      	bne.n	800a1f8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a1c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1c4:	83bb      	strh	r3, [r7, #28]
 800a1c6:	8bbb      	ldrh	r3, [r7, #28]
 800a1c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a1cc:	83bb      	strh	r3, [r7, #28]
 800a1ce:	8bbb      	ldrh	r3, [r7, #28]
 800a1d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a1d4:	83bb      	strh	r3, [r7, #28]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	441a      	add	r2, r3
 800a1e0:	8bbb      	ldrh	r3, [r7, #28]
 800a1e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	8013      	strh	r3, [r2, #0]
 800a1f6:	e1ea      	b.n	800a5ce <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	4413      	add	r3, r2
 800a202:	881b      	ldrh	r3, [r3, #0]
 800a204:	b29b      	uxth	r3, r3
 800a206:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a20a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a20e:	83fb      	strh	r3, [r7, #30]
 800a210:	8bfb      	ldrh	r3, [r7, #30]
 800a212:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a216:	83fb      	strh	r3, [r7, #30]
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	441a      	add	r2, r3
 800a222:	8bfb      	ldrh	r3, [r7, #30]
 800a224:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a228:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a22c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a234:	b29b      	uxth	r3, r3
 800a236:	8013      	strh	r3, [r2, #0]
 800a238:	e1c9      	b.n	800a5ce <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	78db      	ldrb	r3, [r3, #3]
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d11e      	bne.n	800a280 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4413      	add	r3, r2
 800a24c:	881b      	ldrh	r3, [r3, #0]
 800a24e:	b29b      	uxth	r3, r3
 800a250:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a258:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	441a      	add	r2, r3
 800a266:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a26a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a26e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a272:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	8013      	strh	r3, [r2, #0]
 800a27e:	e01d      	b.n	800a2bc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4413      	add	r3, r2
 800a28a:	881b      	ldrh	r3, [r3, #0]
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a296:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	441a      	add	r2, r3
 800a2a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a2a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2cc:	4413      	add	r3, r2
 800a2ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	00da      	lsls	r2, r3, #3
 800a2d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2d8:	4413      	add	r3, r2
 800a2da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a2de:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	891b      	ldrh	r3, [r3, #8]
 800a2e4:	085b      	lsrs	r3, r3, #1
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	005b      	lsls	r3, r3, #1
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a2ee:	801a      	strh	r2, [r3, #0]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a300:	4413      	add	r3, r2
 800a302:	657b      	str	r3, [r7, #84]	@ 0x54
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	00da      	lsls	r2, r3, #3
 800a30a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a30c:	4413      	add	r3, r2
 800a30e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a312:	653b      	str	r3, [r7, #80]	@ 0x50
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	895b      	ldrh	r3, [r3, #10]
 800a318:	085b      	lsrs	r3, r3, #1
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	b29a      	uxth	r2, r3
 800a320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a322:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	785b      	ldrb	r3, [r3, #1]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f040 8093 	bne.w	800a454 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	4413      	add	r3, r2
 800a338:	881b      	ldrh	r3, [r3, #0]
 800a33a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800a33e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a346:	2b00      	cmp	r3, #0
 800a348:	d01b      	beq.n	800a382 <USB_ActivateEndpoint+0x52a>
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4413      	add	r3, r2
 800a354:	881b      	ldrh	r3, [r3, #0]
 800a356:	b29b      	uxth	r3, r3
 800a358:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a35c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a360:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	441a      	add	r2, r3
 800a36c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a36e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a372:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a376:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a37a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a37e:	b29b      	uxth	r3, r3
 800a380:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	4413      	add	r3, r2
 800a38c:	881b      	ldrh	r3, [r3, #0]
 800a38e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a390:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a396:	2b00      	cmp	r3, #0
 800a398:	d01b      	beq.n	800a3d2 <USB_ActivateEndpoint+0x57a>
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	4413      	add	r3, r2
 800a3a4:	881b      	ldrh	r3, [r3, #0]
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3b0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	441a      	add	r2, r3
 800a3bc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a3be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4413      	add	r3, r2
 800a3dc:	881b      	ldrh	r3, [r3, #0]
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a3e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3e8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a3ea:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a3ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a3f0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a3f2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a3f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a3f8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	441a      	add	r2, r3
 800a404:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a40a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a40e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a416:	b29b      	uxth	r3, r3
 800a418:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4413      	add	r3, r2
 800a424:	881b      	ldrh	r3, [r3, #0]
 800a426:	b29b      	uxth	r3, r3
 800a428:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a42c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a430:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	441a      	add	r2, r3
 800a43c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a43e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a44a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a44e:	b29b      	uxth	r3, r3
 800a450:	8013      	strh	r3, [r2, #0]
 800a452:	e0bc      	b.n	800a5ce <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	4413      	add	r3, r2
 800a45e:	881b      	ldrh	r3, [r3, #0]
 800a460:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a464:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a468:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d01d      	beq.n	800a4ac <USB_ActivateEndpoint+0x654>
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4413      	add	r3, r2
 800a47a:	881b      	ldrh	r3, [r3, #0]
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a486:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	441a      	add	r2, r3
 800a494:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a498:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a49c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a4a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4413      	add	r3, r2
 800a4b6:	881b      	ldrh	r3, [r3, #0]
 800a4b8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800a4bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800a4c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d01d      	beq.n	800a504 <USB_ActivateEndpoint+0x6ac>
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4413      	add	r3, r2
 800a4d2:	881b      	ldrh	r3, [r3, #0]
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4de:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	441a      	add	r2, r3
 800a4ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800a4f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a500:	b29b      	uxth	r3, r3
 800a502:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	78db      	ldrb	r3, [r3, #3]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d024      	beq.n	800a556 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	881b      	ldrh	r3, [r3, #0]
 800a518:	b29b      	uxth	r3, r3
 800a51a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a51e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a522:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a526:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a52a:	f083 0320 	eor.w	r3, r3, #32
 800a52e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	441a      	add	r2, r3
 800a53c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a540:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a544:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a548:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a54c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a550:	b29b      	uxth	r3, r3
 800a552:	8013      	strh	r3, [r2, #0]
 800a554:	e01d      	b.n	800a592 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	4413      	add	r3, r2
 800a560:	881b      	ldrh	r3, [r3, #0]
 800a562:	b29b      	uxth	r3, r3
 800a564:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a568:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a56c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	441a      	add	r2, r3
 800a57a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a57e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a582:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a58a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a58e:	b29b      	uxth	r3, r3
 800a590:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	4413      	add	r3, r2
 800a59c:	881b      	ldrh	r3, [r3, #0]
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a5a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5a8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	441a      	add	r2, r3
 800a5b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a5ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a5ce:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3774      	adds	r7, #116	@ 0x74
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop

0800a5e0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b08d      	sub	sp, #52	@ 0x34
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	7b1b      	ldrb	r3, [r3, #12]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f040 808e 	bne.w	800a710 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	785b      	ldrb	r3, [r3, #1]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d044      	beq.n	800a686 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4413      	add	r3, r2
 800a606:	881b      	ldrh	r3, [r3, #0]
 800a608:	81bb      	strh	r3, [r7, #12]
 800a60a:	89bb      	ldrh	r3, [r7, #12]
 800a60c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a610:	2b00      	cmp	r3, #0
 800a612:	d01b      	beq.n	800a64c <USB_DeactivateEndpoint+0x6c>
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4413      	add	r3, r2
 800a61e:	881b      	ldrh	r3, [r3, #0]
 800a620:	b29b      	uxth	r3, r3
 800a622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a62a:	817b      	strh	r3, [r7, #10]
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	441a      	add	r2, r3
 800a636:	897b      	ldrh	r3, [r7, #10]
 800a638:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a63c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a640:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a644:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a648:	b29b      	uxth	r3, r3
 800a64a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4413      	add	r3, r2
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	b29b      	uxth	r3, r3
 800a65a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a65e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a662:	813b      	strh	r3, [r7, #8]
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	441a      	add	r2, r3
 800a66e:	893b      	ldrh	r3, [r7, #8]
 800a670:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a674:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a67c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a680:	b29b      	uxth	r3, r3
 800a682:	8013      	strh	r3, [r2, #0]
 800a684:	e192      	b.n	800a9ac <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4413      	add	r3, r2
 800a690:	881b      	ldrh	r3, [r3, #0]
 800a692:	827b      	strh	r3, [r7, #18]
 800a694:	8a7b      	ldrh	r3, [r7, #18]
 800a696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d01b      	beq.n	800a6d6 <USB_DeactivateEndpoint+0xf6>
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	4413      	add	r3, r2
 800a6a8:	881b      	ldrh	r3, [r3, #0]
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6b4:	823b      	strh	r3, [r7, #16]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	441a      	add	r2, r3
 800a6c0:	8a3b      	ldrh	r3, [r7, #16]
 800a6c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a6ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	4413      	add	r3, r2
 800a6e0:	881b      	ldrh	r3, [r3, #0]
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a6e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6ec:	81fb      	strh	r3, [r7, #14]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	441a      	add	r2, r3
 800a6f8:	89fb      	ldrh	r3, [r7, #14]
 800a6fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	8013      	strh	r3, [r2, #0]
 800a70e:	e14d      	b.n	800a9ac <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	785b      	ldrb	r3, [r3, #1]
 800a714:	2b00      	cmp	r3, #0
 800a716:	f040 80a5 	bne.w	800a864 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4413      	add	r3, r2
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	843b      	strh	r3, [r7, #32]
 800a728:	8c3b      	ldrh	r3, [r7, #32]
 800a72a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d01b      	beq.n	800a76a <USB_DeactivateEndpoint+0x18a>
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4413      	add	r3, r2
 800a73c:	881b      	ldrh	r3, [r3, #0]
 800a73e:	b29b      	uxth	r3, r3
 800a740:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a748:	83fb      	strh	r3, [r7, #30]
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	441a      	add	r2, r3
 800a754:	8bfb      	ldrh	r3, [r7, #30]
 800a756:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a75a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a75e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a766:	b29b      	uxth	r3, r3
 800a768:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	4413      	add	r3, r2
 800a774:	881b      	ldrh	r3, [r3, #0]
 800a776:	83bb      	strh	r3, [r7, #28]
 800a778:	8bbb      	ldrh	r3, [r7, #28]
 800a77a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d01b      	beq.n	800a7ba <USB_DeactivateEndpoint+0x1da>
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	4413      	add	r3, r2
 800a78c:	881b      	ldrh	r3, [r3, #0]
 800a78e:	b29b      	uxth	r3, r3
 800a790:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a794:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a798:	837b      	strh	r3, [r7, #26]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	441a      	add	r2, r3
 800a7a4:	8b7b      	ldrh	r3, [r7, #26]
 800a7a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	4413      	add	r3, r2
 800a7c4:	881b      	ldrh	r3, [r3, #0]
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7d0:	833b      	strh	r3, [r7, #24]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	441a      	add	r2, r3
 800a7dc:	8b3b      	ldrh	r3, [r7, #24]
 800a7de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	4413      	add	r3, r2
 800a7fc:	881b      	ldrh	r3, [r3, #0]
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a808:	82fb      	strh	r3, [r7, #22]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	441a      	add	r2, r3
 800a814:	8afb      	ldrh	r3, [r7, #22]
 800a816:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a81a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a81e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a826:	b29b      	uxth	r3, r3
 800a828:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	4413      	add	r3, r2
 800a834:	881b      	ldrh	r3, [r3, #0]
 800a836:	b29b      	uxth	r3, r3
 800a838:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a83c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a840:	82bb      	strh	r3, [r7, #20]
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	441a      	add	r2, r3
 800a84c:	8abb      	ldrh	r3, [r7, #20]
 800a84e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a852:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a85a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a85e:	b29b      	uxth	r3, r3
 800a860:	8013      	strh	r3, [r2, #0]
 800a862:	e0a3      	b.n	800a9ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4413      	add	r3, r2
 800a86e:	881b      	ldrh	r3, [r3, #0]
 800a870:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a872:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a874:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d01b      	beq.n	800a8b4 <USB_DeactivateEndpoint+0x2d4>
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	881b      	ldrh	r3, [r3, #0]
 800a888:	b29b      	uxth	r3, r3
 800a88a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a88e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a892:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	441a      	add	r2, r3
 800a89e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a8a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a8ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4413      	add	r3, r2
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a8c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a8c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d01b      	beq.n	800a904 <USB_DeactivateEndpoint+0x324>
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	4413      	add	r3, r2
 800a8d6:	881b      	ldrh	r3, [r3, #0]
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8e2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	441a      	add	r2, r3
 800a8ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a8f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a900:	b29b      	uxth	r3, r3
 800a902:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	4413      	add	r3, r2
 800a90e:	881b      	ldrh	r3, [r3, #0]
 800a910:	b29b      	uxth	r3, r3
 800a912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a91a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	441a      	add	r2, r3
 800a926:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a928:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a92c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a930:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a938:	b29b      	uxth	r3, r3
 800a93a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	4413      	add	r3, r2
 800a946:	881b      	ldrh	r3, [r3, #0]
 800a948:	b29b      	uxth	r3, r3
 800a94a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a94e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a952:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	441a      	add	r2, r3
 800a95e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a960:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a964:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a968:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a96c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a970:	b29b      	uxth	r3, r3
 800a972:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	4413      	add	r3, r2
 800a97e:	881b      	ldrh	r3, [r3, #0]
 800a980:	b29b      	uxth	r3, r3
 800a982:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a98a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	441a      	add	r2, r3
 800a996:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a99c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3734      	adds	r7, #52	@ 0x34
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b0c2      	sub	sp, #264	@ 0x108
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9c8:	6018      	str	r0, [r3, #0]
 800a9ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9d2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a9d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	785b      	ldrb	r3, [r3, #1]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	f040 86b7 	bne.w	800b754 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a9e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	699a      	ldr	r2, [r3, #24]
 800a9f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d908      	bls.n	800aa14 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800aa02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800aa12:	e007      	b.n	800aa24 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800aa14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	699b      	ldr	r3, [r3, #24]
 800aa20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800aa24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	7b1b      	ldrb	r3, [r3, #12]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d13a      	bne.n	800aaaa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800aa34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	6959      	ldr	r1, [r3, #20]
 800aa40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	88da      	ldrh	r2, [r3, #6]
 800aa4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800aa56:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aa5a:	6800      	ldr	r0, [r0, #0]
 800aa5c:	f001 fc99 	bl	800c392 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aa60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	613b      	str	r3, [r7, #16]
 800aa6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	4413      	add	r3, r2
 800aa82:	613b      	str	r3, [r7, #16]
 800aa84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	00da      	lsls	r2, r3, #3
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	4413      	add	r3, r2
 800aa96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aa9a:	60fb      	str	r3, [r7, #12]
 800aa9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	801a      	strh	r2, [r3, #0]
 800aaa6:	f000 be1f 	b.w	800b6e8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800aaaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	78db      	ldrb	r3, [r3, #3]
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	f040 8462 	bne.w	800b380 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800aabc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	6a1a      	ldr	r2, [r3, #32]
 800aac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aacc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	f240 83df 	bls.w	800b298 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800aada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aade:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4413      	add	r3, r2
 800aaf4:	881b      	ldrh	r3, [r3, #0]
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aafc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab00:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ab04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	441a      	add	r2, r3
 800ab1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ab22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab2a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ab2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ab36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	6a1a      	ldr	r2, [r3, #32]
 800ab42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab46:	1ad2      	subs	r2, r2, r3
 800ab48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ab54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	881b      	ldrh	r3, [r3, #0]
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f000 81c7 	beq.w	800af0a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	785b      	ldrb	r3, [r3, #1]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d177      	bne.n	800ac88 <USB_EPStartXfer+0x2ce>
 800ab98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aba8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	461a      	mov	r2, r3
 800abb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb8:	4413      	add	r3, r2
 800abba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	00da      	lsls	r2, r3, #3
 800abca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abcc:	4413      	add	r3, r2
 800abce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800abd2:	627b      	str	r3, [r7, #36]	@ 0x24
 800abd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd6:	881b      	ldrh	r3, [r3, #0]
 800abd8:	b29b      	uxth	r3, r3
 800abda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abde:	b29a      	uxth	r2, r3
 800abe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe2:	801a      	strh	r2, [r3, #0]
 800abe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d10a      	bne.n	800ac02 <USB_EPStartXfer+0x248>
 800abec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfe:	801a      	strh	r2, [r3, #0]
 800ac00:	e067      	b.n	800acd2 <USB_EPStartXfer+0x318>
 800ac02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac06:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac08:	d81c      	bhi.n	800ac44 <USB_EPStartXfer+0x28a>
 800ac0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac0e:	085b      	lsrs	r3, r3, #1
 800ac10:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ac14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac18:	f003 0301 	and.w	r3, r3, #1
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d004      	beq.n	800ac2a <USB_EPStartXfer+0x270>
 800ac20:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ac24:	3301      	adds	r3, #1
 800ac26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2c:	881b      	ldrh	r3, [r3, #0]
 800ac2e:	b29a      	uxth	r2, r3
 800ac30:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	029b      	lsls	r3, r3, #10
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac40:	801a      	strh	r2, [r3, #0]
 800ac42:	e046      	b.n	800acd2 <USB_EPStartXfer+0x318>
 800ac44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac48:	095b      	lsrs	r3, r3, #5
 800ac4a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ac4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac52:	f003 031f 	and.w	r3, r3, #31
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d104      	bne.n	800ac64 <USB_EPStartXfer+0x2aa>
 800ac5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ac5e:	3b01      	subs	r3, #1
 800ac60:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ac64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac66:	881b      	ldrh	r3, [r3, #0]
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	029b      	lsls	r3, r3, #10
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	4313      	orrs	r3, r2
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac84:	801a      	strh	r2, [r3, #0]
 800ac86:	e024      	b.n	800acd2 <USB_EPStartXfer+0x318>
 800ac88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	785b      	ldrb	r3, [r3, #1]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d11c      	bne.n	800acd2 <USB_EPStartXfer+0x318>
 800ac98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	461a      	mov	r2, r3
 800acaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acac:	4413      	add	r3, r2
 800acae:	633b      	str	r3, [r7, #48]	@ 0x30
 800acb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	00da      	lsls	r2, r3, #3
 800acbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc0:	4413      	add	r3, r2
 800acc2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800acc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800accc:	b29a      	uxth	r2, r3
 800acce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800acd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	895b      	ldrh	r3, [r3, #10]
 800acde:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ace2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ace6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	6959      	ldr	r1, [r3, #20]
 800acee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800acf8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800acfc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ad00:	6800      	ldr	r0, [r0, #0]
 800ad02:	f001 fb46 	bl	800c392 <USB_WritePMA>
            ep->xfer_buff += len;
 800ad06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	695a      	ldr	r2, [r3, #20]
 800ad12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad16:	441a      	add	r2, r3
 800ad18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ad24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	6a1a      	ldr	r2, [r3, #32]
 800ad30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d90f      	bls.n	800ad60 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800ad40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	6a1a      	ldr	r2, [r3, #32]
 800ad4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad50:	1ad2      	subs	r2, r2, r3
 800ad52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	621a      	str	r2, [r3, #32]
 800ad5e:	e00e      	b.n	800ad7e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800ad60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	6a1b      	ldr	r3, [r3, #32]
 800ad6c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800ad70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	785b      	ldrb	r3, [r3, #1]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d177      	bne.n	800ae7e <USB_EPStartXfer+0x4c4>
 800ad8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	61bb      	str	r3, [r7, #24]
 800ad9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	461a      	mov	r2, r3
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	4413      	add	r3, r2
 800adb0:	61bb      	str	r3, [r7, #24]
 800adb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	00da      	lsls	r2, r3, #3
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	4413      	add	r3, r2
 800adc4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800adc8:	617b      	str	r3, [r7, #20]
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	881b      	ldrh	r3, [r3, #0]
 800adce:	b29b      	uxth	r3, r3
 800add0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800add4:	b29a      	uxth	r2, r3
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	801a      	strh	r2, [r3, #0]
 800adda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d10a      	bne.n	800adf8 <USB_EPStartXfer+0x43e>
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	881b      	ldrh	r3, [r3, #0]
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	801a      	strh	r2, [r3, #0]
 800adf6:	e06d      	b.n	800aed4 <USB_EPStartXfer+0x51a>
 800adf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adfc:	2b3e      	cmp	r3, #62	@ 0x3e
 800adfe:	d81c      	bhi.n	800ae3a <USB_EPStartXfer+0x480>
 800ae00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae04:	085b      	lsrs	r3, r3, #1
 800ae06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ae0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae0e:	f003 0301 	and.w	r3, r3, #1
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d004      	beq.n	800ae20 <USB_EPStartXfer+0x466>
 800ae16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	881b      	ldrh	r3, [r3, #0]
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	029b      	lsls	r3, r3, #10
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	4313      	orrs	r3, r2
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	801a      	strh	r2, [r3, #0]
 800ae38:	e04c      	b.n	800aed4 <USB_EPStartXfer+0x51a>
 800ae3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae3e:	095b      	lsrs	r3, r3, #5
 800ae40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ae44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae48:	f003 031f 	and.w	r3, r3, #31
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d104      	bne.n	800ae5a <USB_EPStartXfer+0x4a0>
 800ae50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae54:	3b01      	subs	r3, #1
 800ae56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	881b      	ldrh	r3, [r3, #0]
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	029b      	lsls	r3, r3, #10
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae76:	b29a      	uxth	r2, r3
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	801a      	strh	r2, [r3, #0]
 800ae7c:	e02a      	b.n	800aed4 <USB_EPStartXfer+0x51a>
 800ae7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	785b      	ldrb	r3, [r3, #1]
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d122      	bne.n	800aed4 <USB_EPStartXfer+0x51a>
 800ae8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	623b      	str	r3, [r7, #32]
 800ae9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	461a      	mov	r2, r3
 800aeac:	6a3b      	ldr	r3, [r7, #32]
 800aeae:	4413      	add	r3, r2
 800aeb0:	623b      	str	r3, [r7, #32]
 800aeb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	00da      	lsls	r2, r3, #3
 800aec0:	6a3b      	ldr	r3, [r7, #32]
 800aec2:	4413      	add	r3, r2
 800aec4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aec8:	61fb      	str	r3, [r7, #28]
 800aeca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aece:	b29a      	uxth	r2, r3
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800aed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	891b      	ldrh	r3, [r3, #8]
 800aee0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	6959      	ldr	r1, [r3, #20]
 800aef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aefa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800aefe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800af02:	6800      	ldr	r0, [r0, #0]
 800af04:	f001 fa45 	bl	800c392 <USB_WritePMA>
 800af08:	e3ee      	b.n	800b6e8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800af0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	785b      	ldrb	r3, [r3, #1]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d177      	bne.n	800b00a <USB_EPStartXfer+0x650>
 800af1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af34:	b29b      	uxth	r3, r3
 800af36:	461a      	mov	r2, r3
 800af38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af3a:	4413      	add	r3, r2
 800af3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	00da      	lsls	r2, r3, #3
 800af4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af4e:	4413      	add	r3, r2
 800af50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800af54:	647b      	str	r3, [r7, #68]	@ 0x44
 800af56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af58:	881b      	ldrh	r3, [r3, #0]
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af60:	b29a      	uxth	r2, r3
 800af62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af64:	801a      	strh	r2, [r3, #0]
 800af66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10a      	bne.n	800af84 <USB_EPStartXfer+0x5ca>
 800af6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af70:	881b      	ldrh	r3, [r3, #0]
 800af72:	b29b      	uxth	r3, r3
 800af74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af80:	801a      	strh	r2, [r3, #0]
 800af82:	e06d      	b.n	800b060 <USB_EPStartXfer+0x6a6>
 800af84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af88:	2b3e      	cmp	r3, #62	@ 0x3e
 800af8a:	d81c      	bhi.n	800afc6 <USB_EPStartXfer+0x60c>
 800af8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af90:	085b      	lsrs	r3, r3, #1
 800af92:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800af96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af9a:	f003 0301 	and.w	r3, r3, #1
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d004      	beq.n	800afac <USB_EPStartXfer+0x5f2>
 800afa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800afa6:	3301      	adds	r3, #1
 800afa8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800afac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afae:	881b      	ldrh	r3, [r3, #0]
 800afb0:	b29a      	uxth	r2, r3
 800afb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	029b      	lsls	r3, r3, #10
 800afba:	b29b      	uxth	r3, r3
 800afbc:	4313      	orrs	r3, r2
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afc2:	801a      	strh	r2, [r3, #0]
 800afc4:	e04c      	b.n	800b060 <USB_EPStartXfer+0x6a6>
 800afc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afca:	095b      	lsrs	r3, r3, #5
 800afcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800afd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afd4:	f003 031f 	and.w	r3, r3, #31
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d104      	bne.n	800afe6 <USB_EPStartXfer+0x62c>
 800afdc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800afe0:	3b01      	subs	r3, #1
 800afe2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800afe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afe8:	881b      	ldrh	r3, [r3, #0]
 800afea:	b29a      	uxth	r2, r3
 800afec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	029b      	lsls	r3, r3, #10
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	4313      	orrs	r3, r2
 800aff8:	b29b      	uxth	r3, r3
 800affa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800affe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b002:	b29a      	uxth	r2, r3
 800b004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b006:	801a      	strh	r2, [r3, #0]
 800b008:	e02a      	b.n	800b060 <USB_EPStartXfer+0x6a6>
 800b00a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b00e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	785b      	ldrb	r3, [r3, #1]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d122      	bne.n	800b060 <USB_EPStartXfer+0x6a6>
 800b01a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b01e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	653b      	str	r3, [r7, #80]	@ 0x50
 800b026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b02a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b034:	b29b      	uxth	r3, r3
 800b036:	461a      	mov	r2, r3
 800b038:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b03a:	4413      	add	r3, r2
 800b03c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b03e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	00da      	lsls	r2, r3, #3
 800b04c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b04e:	4413      	add	r3, r2
 800b050:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b05e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	891b      	ldrh	r3, [r3, #8]
 800b06c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	6959      	ldr	r1, [r3, #20]
 800b07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b080:	b29b      	uxth	r3, r3
 800b082:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b086:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b08a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b08e:	6800      	ldr	r0, [r0, #0]
 800b090:	f001 f97f 	bl	800c392 <USB_WritePMA>
            ep->xfer_buff += len;
 800b094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	695a      	ldr	r2, [r3, #20]
 800b0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0a4:	441a      	add	r2, r3
 800b0a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b0b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	6a1a      	ldr	r2, [r3, #32]
 800b0be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d90f      	bls.n	800b0ee <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b0ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	6a1a      	ldr	r2, [r3, #32]
 800b0da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0de:	1ad2      	subs	r2, r2, r3
 800b0e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	621a      	str	r2, [r3, #32]
 800b0ec:	e00e      	b.n	800b10c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b0ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6a1b      	ldr	r3, [r3, #32]
 800b0fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b0fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2200      	movs	r2, #0
 800b10a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b10c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	643b      	str	r3, [r7, #64]	@ 0x40
 800b118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b11c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	785b      	ldrb	r3, [r3, #1]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d177      	bne.n	800b218 <USB_EPStartXfer+0x85e>
 800b128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b12c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b138:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b142:	b29b      	uxth	r3, r3
 800b144:	461a      	mov	r2, r3
 800b146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b148:	4413      	add	r3, r2
 800b14a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b14c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	00da      	lsls	r2, r3, #3
 800b15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15c:	4413      	add	r3, r2
 800b15e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b162:	637b      	str	r3, [r7, #52]	@ 0x34
 800b164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b166:	881b      	ldrh	r3, [r3, #0]
 800b168:	b29b      	uxth	r3, r3
 800b16a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b16e:	b29a      	uxth	r2, r3
 800b170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b172:	801a      	strh	r2, [r3, #0]
 800b174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d10a      	bne.n	800b192 <USB_EPStartXfer+0x7d8>
 800b17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b17e:	881b      	ldrh	r3, [r3, #0]
 800b180:	b29b      	uxth	r3, r3
 800b182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b18a:	b29a      	uxth	r2, r3
 800b18c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b18e:	801a      	strh	r2, [r3, #0]
 800b190:	e067      	b.n	800b262 <USB_EPStartXfer+0x8a8>
 800b192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b196:	2b3e      	cmp	r3, #62	@ 0x3e
 800b198:	d81c      	bhi.n	800b1d4 <USB_EPStartXfer+0x81a>
 800b19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b19e:	085b      	lsrs	r3, r3, #1
 800b1a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1a8:	f003 0301 	and.w	r3, r3, #1
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d004      	beq.n	800b1ba <USB_EPStartXfer+0x800>
 800b1b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b1ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	029b      	lsls	r3, r3, #10
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d0:	801a      	strh	r2, [r3, #0]
 800b1d2:	e046      	b.n	800b262 <USB_EPStartXfer+0x8a8>
 800b1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1d8:	095b      	lsrs	r3, r3, #5
 800b1da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1e2:	f003 031f 	and.w	r3, r3, #31
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d104      	bne.n	800b1f4 <USB_EPStartXfer+0x83a>
 800b1ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b1f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1f6:	881b      	ldrh	r3, [r3, #0]
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	029b      	lsls	r3, r3, #10
 800b202:	b29b      	uxth	r3, r3
 800b204:	4313      	orrs	r3, r2
 800b206:	b29b      	uxth	r3, r3
 800b208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b20c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b210:	b29a      	uxth	r2, r3
 800b212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b214:	801a      	strh	r2, [r3, #0]
 800b216:	e024      	b.n	800b262 <USB_EPStartXfer+0x8a8>
 800b218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b21c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	785b      	ldrb	r3, [r3, #1]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d11c      	bne.n	800b262 <USB_EPStartXfer+0x8a8>
 800b228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b22c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b236:	b29b      	uxth	r3, r3
 800b238:	461a      	mov	r2, r3
 800b23a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b23c:	4413      	add	r3, r2
 800b23e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	00da      	lsls	r2, r3, #3
 800b24e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b250:	4413      	add	r3, r2
 800b252:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b256:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b25c:	b29a      	uxth	r2, r3
 800b25e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b260:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	895b      	ldrh	r3, [r3, #10]
 800b26e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	6959      	ldr	r1, [r3, #20]
 800b27e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b282:	b29b      	uxth	r3, r3
 800b284:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b288:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b28c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b290:	6800      	ldr	r0, [r0, #0]
 800b292:	f001 f87e 	bl	800c392 <USB_WritePMA>
 800b296:	e227      	b.n	800b6e8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b29c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	6a1b      	ldr	r3, [r3, #32]
 800b2a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b2a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	881b      	ldrh	r3, [r3, #0]
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b2ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2ce:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b2d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	441a      	add	r2, r3
 800b2ec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b2f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b300:	b29b      	uxth	r3, r3
 800b302:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b308:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b31e:	b29b      	uxth	r3, r3
 800b320:	461a      	mov	r2, r3
 800b322:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b324:	4413      	add	r3, r2
 800b326:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b32c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	00da      	lsls	r2, r3, #3
 800b336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b338:	4413      	add	r3, r2
 800b33a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b33e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b344:	b29a      	uxth	r2, r3
 800b346:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b348:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b34a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b34e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	891b      	ldrh	r3, [r3, #8]
 800b356:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b35a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b35e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	6959      	ldr	r1, [r3, #20]
 800b366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b370:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b374:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b378:	6800      	ldr	r0, [r0, #0]
 800b37a:	f001 f80a 	bl	800c392 <USB_WritePMA>
 800b37e:	e1b3      	b.n	800b6e8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	6a1a      	ldr	r2, [r3, #32]
 800b38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b390:	1ad2      	subs	r2, r2, r3
 800b392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b39e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	881b      	ldrh	r3, [r3, #0]
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 80c6 	beq.w	800b552 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b3c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	673b      	str	r3, [r7, #112]	@ 0x70
 800b3d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	785b      	ldrb	r3, [r3, #1]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d177      	bne.n	800b4d2 <USB_EPStartXfer+0xb18>
 800b3e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b3ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	461a      	mov	r2, r3
 800b400:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b402:	4413      	add	r3, r2
 800b404:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b40a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	00da      	lsls	r2, r3, #3
 800b414:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b416:	4413      	add	r3, r2
 800b418:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b41c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b41e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b420:	881b      	ldrh	r3, [r3, #0]
 800b422:	b29b      	uxth	r3, r3
 800b424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b428:	b29a      	uxth	r2, r3
 800b42a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b42c:	801a      	strh	r2, [r3, #0]
 800b42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10a      	bne.n	800b44c <USB_EPStartXfer+0xa92>
 800b436:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b438:	881b      	ldrh	r3, [r3, #0]
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b444:	b29a      	uxth	r2, r3
 800b446:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b448:	801a      	strh	r2, [r3, #0]
 800b44a:	e067      	b.n	800b51c <USB_EPStartXfer+0xb62>
 800b44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b450:	2b3e      	cmp	r3, #62	@ 0x3e
 800b452:	d81c      	bhi.n	800b48e <USB_EPStartXfer+0xad4>
 800b454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b458:	085b      	lsrs	r3, r3, #1
 800b45a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b462:	f003 0301 	and.w	r3, r3, #1
 800b466:	2b00      	cmp	r3, #0
 800b468:	d004      	beq.n	800b474 <USB_EPStartXfer+0xaba>
 800b46a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b46e:	3301      	adds	r3, #1
 800b470:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b476:	881b      	ldrh	r3, [r3, #0]
 800b478:	b29a      	uxth	r2, r3
 800b47a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b47e:	b29b      	uxth	r3, r3
 800b480:	029b      	lsls	r3, r3, #10
 800b482:	b29b      	uxth	r3, r3
 800b484:	4313      	orrs	r3, r2
 800b486:	b29a      	uxth	r2, r3
 800b488:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b48a:	801a      	strh	r2, [r3, #0]
 800b48c:	e046      	b.n	800b51c <USB_EPStartXfer+0xb62>
 800b48e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b492:	095b      	lsrs	r3, r3, #5
 800b494:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b49c:	f003 031f 	and.w	r3, r3, #31
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d104      	bne.n	800b4ae <USB_EPStartXfer+0xaf4>
 800b4a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b4ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	b29a      	uxth	r2, r3
 800b4b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	029b      	lsls	r3, r3, #10
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4ca:	b29a      	uxth	r2, r3
 800b4cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4ce:	801a      	strh	r2, [r3, #0]
 800b4d0:	e024      	b.n	800b51c <USB_EPStartXfer+0xb62>
 800b4d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	785b      	ldrb	r3, [r3, #1]
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d11c      	bne.n	800b51c <USB_EPStartXfer+0xb62>
 800b4e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b4f6:	4413      	add	r3, r2
 800b4f8:	673b      	str	r3, [r7, #112]	@ 0x70
 800b4fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	00da      	lsls	r2, r3, #3
 800b508:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b50a:	4413      	add	r3, r2
 800b50c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b510:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b516:	b29a      	uxth	r2, r3
 800b518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b51a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b51c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	895b      	ldrh	r3, [r3, #10]
 800b528:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b52c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	6959      	ldr	r1, [r3, #20]
 800b538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b542:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b546:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b54a:	6800      	ldr	r0, [r0, #0]
 800b54c:	f000 ff21 	bl	800c392 <USB_WritePMA>
 800b550:	e0ca      	b.n	800b6e8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	785b      	ldrb	r3, [r3, #1]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d177      	bne.n	800b652 <USB_EPStartXfer+0xc98>
 800b562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b566:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b56e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b572:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	461a      	mov	r2, r3
 800b580:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b582:	4413      	add	r3, r2
 800b584:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b58a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	00da      	lsls	r2, r3, #3
 800b594:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b596:	4413      	add	r3, r2
 800b598:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b59c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b59e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5ac:	801a      	strh	r2, [r3, #0]
 800b5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10a      	bne.n	800b5cc <USB_EPStartXfer+0xc12>
 800b5b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5b8:	881b      	ldrh	r3, [r3, #0]
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5c4:	b29a      	uxth	r2, r3
 800b5c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5c8:	801a      	strh	r2, [r3, #0]
 800b5ca:	e073      	b.n	800b6b4 <USB_EPStartXfer+0xcfa>
 800b5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5d0:	2b3e      	cmp	r3, #62	@ 0x3e
 800b5d2:	d81c      	bhi.n	800b60e <USB_EPStartXfer+0xc54>
 800b5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5d8:	085b      	lsrs	r3, r3, #1
 800b5da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5e2:	f003 0301 	and.w	r3, r3, #1
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d004      	beq.n	800b5f4 <USB_EPStartXfer+0xc3a>
 800b5ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b5f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5f6:	881b      	ldrh	r3, [r3, #0]
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	029b      	lsls	r3, r3, #10
 800b602:	b29b      	uxth	r3, r3
 800b604:	4313      	orrs	r3, r2
 800b606:	b29a      	uxth	r2, r3
 800b608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b60a:	801a      	strh	r2, [r3, #0]
 800b60c:	e052      	b.n	800b6b4 <USB_EPStartXfer+0xcfa>
 800b60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b612:	095b      	lsrs	r3, r3, #5
 800b614:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b61c:	f003 031f 	and.w	r3, r3, #31
 800b620:	2b00      	cmp	r3, #0
 800b622:	d104      	bne.n	800b62e <USB_EPStartXfer+0xc74>
 800b624:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b628:	3b01      	subs	r3, #1
 800b62a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b62e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b630:	881b      	ldrh	r3, [r3, #0]
 800b632:	b29a      	uxth	r2, r3
 800b634:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b638:	b29b      	uxth	r3, r3
 800b63a:	029b      	lsls	r3, r3, #10
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	4313      	orrs	r3, r2
 800b640:	b29b      	uxth	r3, r3
 800b642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b64e:	801a      	strh	r2, [r3, #0]
 800b650:	e030      	b.n	800b6b4 <USB_EPStartXfer+0xcfa>
 800b652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	785b      	ldrb	r3, [r3, #1]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d128      	bne.n	800b6b4 <USB_EPStartXfer+0xcfa>
 800b662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b666:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b67e:	b29b      	uxth	r3, r3
 800b680:	461a      	mov	r2, r3
 800b682:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b686:	4413      	add	r3, r2
 800b688:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b68c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	00da      	lsls	r2, r3, #3
 800b69a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b69e:	4413      	add	r3, r2
 800b6a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b6a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6ac:	b29a      	uxth	r2, r3
 800b6ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b6b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b6b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	891b      	ldrh	r3, [r3, #8]
 800b6c0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b6c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	6959      	ldr	r1, [r3, #20]
 800b6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b6da:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b6de:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b6e2:	6800      	ldr	r0, [r0, #0]
 800b6e4:	f000 fe55 	bl	800c392 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b6e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4413      	add	r3, r2
 800b702:	881b      	ldrh	r3, [r3, #0]
 800b704:	b29b      	uxth	r3, r3
 800b706:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b70a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b70e:	817b      	strh	r3, [r7, #10]
 800b710:	897b      	ldrh	r3, [r7, #10]
 800b712:	f083 0310 	eor.w	r3, r3, #16
 800b716:	817b      	strh	r3, [r7, #10]
 800b718:	897b      	ldrh	r3, [r7, #10]
 800b71a:	f083 0320 	eor.w	r3, r3, #32
 800b71e:	817b      	strh	r3, [r7, #10]
 800b720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b724:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b72e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	441a      	add	r2, r3
 800b73a:	897b      	ldrh	r3, [r7, #10]
 800b73c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b740:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b744:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	8013      	strh	r3, [r2, #0]
 800b750:	f000 bcdf 	b.w	800c112 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	7b1b      	ldrb	r3, [r3, #12]
 800b760:	2b00      	cmp	r3, #0
 800b762:	f040 80bc 	bne.w	800b8de <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b76a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	699a      	ldr	r2, [r3, #24]
 800b772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	691b      	ldr	r3, [r3, #16]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d917      	bls.n	800b7b2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800b792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b796:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	699a      	ldr	r2, [r3, #24]
 800b79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7a2:	1ad2      	subs	r2, r2, r3
 800b7a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	619a      	str	r2, [r3, #24]
 800b7b0:	e00e      	b.n	800b7d0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b7b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	699b      	ldr	r3, [r3, #24]
 800b7be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800b7c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b7d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b7de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b7f4:	4413      	add	r3, r2
 800b7f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b7fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	00da      	lsls	r2, r3, #3
 800b808:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b80c:	4413      	add	r3, r2
 800b80e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b812:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b81a:	881b      	ldrh	r3, [r3, #0]
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b822:	b29a      	uxth	r2, r3
 800b824:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b828:	801a      	strh	r2, [r3, #0]
 800b82a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d10d      	bne.n	800b84e <USB_EPStartXfer+0xe94>
 800b832:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b836:	881b      	ldrh	r3, [r3, #0]
 800b838:	b29b      	uxth	r3, r3
 800b83a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b83e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b842:	b29a      	uxth	r2, r3
 800b844:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b848:	801a      	strh	r2, [r3, #0]
 800b84a:	f000 bc28 	b.w	800c09e <USB_EPStartXfer+0x16e4>
 800b84e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b852:	2b3e      	cmp	r3, #62	@ 0x3e
 800b854:	d81f      	bhi.n	800b896 <USB_EPStartXfer+0xedc>
 800b856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b85a:	085b      	lsrs	r3, r3, #1
 800b85c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b864:	f003 0301 	and.w	r3, r3, #1
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d004      	beq.n	800b876 <USB_EPStartXfer+0xebc>
 800b86c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b870:	3301      	adds	r3, #1
 800b872:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b876:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b87a:	881b      	ldrh	r3, [r3, #0]
 800b87c:	b29a      	uxth	r2, r3
 800b87e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b882:	b29b      	uxth	r3, r3
 800b884:	029b      	lsls	r3, r3, #10
 800b886:	b29b      	uxth	r3, r3
 800b888:	4313      	orrs	r3, r2
 800b88a:	b29a      	uxth	r2, r3
 800b88c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b890:	801a      	strh	r2, [r3, #0]
 800b892:	f000 bc04 	b.w	800c09e <USB_EPStartXfer+0x16e4>
 800b896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b89a:	095b      	lsrs	r3, r3, #5
 800b89c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b8a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8a4:	f003 031f 	and.w	r3, r3, #31
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d104      	bne.n	800b8b6 <USB_EPStartXfer+0xefc>
 800b8ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b8b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8ba:	881b      	ldrh	r3, [r3, #0]
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	029b      	lsls	r3, r3, #10
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8da:	801a      	strh	r2, [r3, #0]
 800b8dc:	e3df      	b.n	800c09e <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b8de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	78db      	ldrb	r3, [r3, #3]
 800b8ea:	2b02      	cmp	r3, #2
 800b8ec:	f040 8218 	bne.w	800bd20 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b8f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	785b      	ldrb	r3, [r3, #1]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f040 809d 	bne.w	800ba3c <USB_EPStartXfer+0x1082>
 800b902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b906:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b914:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b91e:	b29b      	uxth	r3, r3
 800b920:	461a      	mov	r2, r3
 800b922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b926:	4413      	add	r3, r2
 800b928:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b92c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	00da      	lsls	r2, r3, #3
 800b93a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b93e:	4413      	add	r3, r2
 800b940:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b944:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b948:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b94c:	881b      	ldrh	r3, [r3, #0]
 800b94e:	b29b      	uxth	r3, r3
 800b950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b954:	b29a      	uxth	r2, r3
 800b956:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b95a:	801a      	strh	r2, [r3, #0]
 800b95c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10c      	bne.n	800b986 <USB_EPStartXfer+0xfcc>
 800b96c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b970:	881b      	ldrh	r3, [r3, #0]
 800b972:	b29b      	uxth	r3, r3
 800b974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b982:	801a      	strh	r2, [r3, #0]
 800b984:	e08f      	b.n	800baa6 <USB_EPStartXfer+0x10ec>
 800b986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b98a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	691b      	ldr	r3, [r3, #16]
 800b992:	2b3e      	cmp	r3, #62	@ 0x3e
 800b994:	d826      	bhi.n	800b9e4 <USB_EPStartXfer+0x102a>
 800b996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b99a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	085b      	lsrs	r3, r3, #1
 800b9a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b9a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	f003 0301 	and.w	r3, r3, #1
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d004      	beq.n	800b9c6 <USB_EPStartXfer+0x100c>
 800b9bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b9c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9ca:	881b      	ldrh	r3, [r3, #0]
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	029b      	lsls	r3, r3, #10
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9e0:	801a      	strh	r2, [r3, #0]
 800b9e2:	e060      	b.n	800baa6 <USB_EPStartXfer+0x10ec>
 800b9e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	691b      	ldr	r3, [r3, #16]
 800b9f0:	095b      	lsrs	r3, r3, #5
 800b9f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b9f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	f003 031f 	and.w	r3, r3, #31
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d104      	bne.n	800ba14 <USB_EPStartXfer+0x105a>
 800ba0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ba14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba18:	881b      	ldrh	r3, [r3, #0]
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	029b      	lsls	r3, r3, #10
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	4313      	orrs	r3, r2
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba32:	b29a      	uxth	r2, r3
 800ba34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba38:	801a      	strh	r2, [r3, #0]
 800ba3a:	e034      	b.n	800baa6 <USB_EPStartXfer+0x10ec>
 800ba3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	785b      	ldrb	r3, [r3, #1]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d12c      	bne.n	800baa6 <USB_EPStartXfer+0x10ec>
 800ba4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ba70:	4413      	add	r3, r2
 800ba72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	00da      	lsls	r2, r3, #3
 800ba84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ba88:	4413      	add	r3, r2
 800ba8a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ba8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ba92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800baa4:	801a      	strh	r2, [r3, #0]
 800baa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	785b      	ldrb	r3, [r3, #1]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f040 809d 	bne.w	800bc00 <USB_EPStartXfer+0x1246>
 800bac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bad8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	461a      	mov	r2, r3
 800bae6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800baea:	4413      	add	r3, r2
 800baec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800baf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	00da      	lsls	r2, r3, #3
 800bafe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bb02:	4413      	add	r3, r2
 800bb04:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bb0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb10:	881b      	ldrh	r3, [r3, #0]
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb1e:	801a      	strh	r2, [r3, #0]
 800bb20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10c      	bne.n	800bb4a <USB_EPStartXfer+0x1190>
 800bb30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb34:	881b      	ldrh	r3, [r3, #0]
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb46:	801a      	strh	r2, [r3, #0]
 800bb48:	e088      	b.n	800bc5c <USB_EPStartXfer+0x12a2>
 800bb4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	2b3e      	cmp	r3, #62	@ 0x3e
 800bb58:	d826      	bhi.n	800bba8 <USB_EPStartXfer+0x11ee>
 800bb5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	691b      	ldr	r3, [r3, #16]
 800bb66:	085b      	lsrs	r3, r3, #1
 800bb68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bb6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	f003 0301 	and.w	r3, r3, #1
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d004      	beq.n	800bb8a <USB_EPStartXfer+0x11d0>
 800bb80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb84:	3301      	adds	r3, #1
 800bb86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bb8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb8e:	881b      	ldrh	r3, [r3, #0]
 800bb90:	b29a      	uxth	r2, r3
 800bb92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	029b      	lsls	r3, r3, #10
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	b29a      	uxth	r2, r3
 800bba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bba4:	801a      	strh	r2, [r3, #0]
 800bba6:	e059      	b.n	800bc5c <USB_EPStartXfer+0x12a2>
 800bba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	095b      	lsrs	r3, r3, #5
 800bbb6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bbba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	f003 031f 	and.w	r3, r3, #31
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d104      	bne.n	800bbd8 <USB_EPStartXfer+0x121e>
 800bbce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bbd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bbdc:	881b      	ldrh	r3, [r3, #0]
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	029b      	lsls	r3, r3, #10
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	4313      	orrs	r3, r2
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbf6:	b29a      	uxth	r2, r3
 800bbf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bbfc:	801a      	strh	r2, [r3, #0]
 800bbfe:	e02d      	b.n	800bc5c <USB_EPStartXfer+0x12a2>
 800bc00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	785b      	ldrb	r3, [r3, #1]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d125      	bne.n	800bc5c <USB_EPStartXfer+0x12a2>
 800bc10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	461a      	mov	r2, r3
 800bc22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc26:	4413      	add	r3, r2
 800bc28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bc2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	00da      	lsls	r2, r3, #3
 800bc3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc3e:	4413      	add	r3, r2
 800bc40:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bc44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bc48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	691b      	ldr	r3, [r3, #16]
 800bc54:	b29a      	uxth	r2, r3
 800bc56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc5a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bc5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	69db      	ldr	r3, [r3, #28]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f000 8218 	beq.w	800c09e <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bc6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	4413      	add	r3, r2
 800bc88:	881b      	ldrh	r3, [r3, #0]
 800bc8a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bc8e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bc92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d005      	beq.n	800bca6 <USB_EPStartXfer+0x12ec>
 800bc9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bc9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10d      	bne.n	800bcc2 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bca6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bcaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f040 81f5 	bne.w	800c09e <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bcb4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bcb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f040 81ee 	bne.w	800c09e <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800bcc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	4413      	add	r3, r2
 800bcdc:	881b      	ldrh	r3, [r3, #0]
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bce8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800bcec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	441a      	add	r2, r3
 800bd06:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bd0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	8013      	strh	r3, [r2, #0]
 800bd1e:	e1be      	b.n	800c09e <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bd20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	78db      	ldrb	r3, [r3, #3]
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	f040 81b4 	bne.w	800c09a <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bd32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	699a      	ldr	r2, [r3, #24]
 800bd3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d917      	bls.n	800bd7e <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800bd4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800bd5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	699a      	ldr	r2, [r3, #24]
 800bd6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd6e:	1ad2      	subs	r2, r2, r3
 800bd70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	619a      	str	r2, [r3, #24]
 800bd7c:	e00e      	b.n	800bd9c <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800bd7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800bd8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bd9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bda0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	785b      	ldrb	r3, [r3, #1]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f040 8085 	bne.w	800beb8 <USB_EPStartXfer+0x14fe>
 800bdae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bdbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	461a      	mov	r2, r3
 800bdce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bdd2:	4413      	add	r3, r2
 800bdd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bdd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bddc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	00da      	lsls	r2, r3, #3
 800bde6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bdea:	4413      	add	r3, r2
 800bdec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bdf0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bdf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be00:	b29a      	uxth	r2, r3
 800be02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be06:	801a      	strh	r2, [r3, #0]
 800be08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d10c      	bne.n	800be2a <USB_EPStartXfer+0x1470>
 800be10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be14:	881b      	ldrh	r3, [r3, #0]
 800be16:	b29b      	uxth	r3, r3
 800be18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be20:	b29a      	uxth	r2, r3
 800be22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be26:	801a      	strh	r2, [r3, #0]
 800be28:	e077      	b.n	800bf1a <USB_EPStartXfer+0x1560>
 800be2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be2e:	2b3e      	cmp	r3, #62	@ 0x3e
 800be30:	d81e      	bhi.n	800be70 <USB_EPStartXfer+0x14b6>
 800be32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be36:	085b      	lsrs	r3, r3, #1
 800be38:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800be3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be40:	f003 0301 	and.w	r3, r3, #1
 800be44:	2b00      	cmp	r3, #0
 800be46:	d004      	beq.n	800be52 <USB_EPStartXfer+0x1498>
 800be48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be4c:	3301      	adds	r3, #1
 800be4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800be52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be56:	881b      	ldrh	r3, [r3, #0]
 800be58:	b29a      	uxth	r2, r3
 800be5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be5e:	b29b      	uxth	r3, r3
 800be60:	029b      	lsls	r3, r3, #10
 800be62:	b29b      	uxth	r3, r3
 800be64:	4313      	orrs	r3, r2
 800be66:	b29a      	uxth	r2, r3
 800be68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be6c:	801a      	strh	r2, [r3, #0]
 800be6e:	e054      	b.n	800bf1a <USB_EPStartXfer+0x1560>
 800be70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be74:	095b      	lsrs	r3, r3, #5
 800be76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800be7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be7e:	f003 031f 	and.w	r3, r3, #31
 800be82:	2b00      	cmp	r3, #0
 800be84:	d104      	bne.n	800be90 <USB_EPStartXfer+0x14d6>
 800be86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be8a:	3b01      	subs	r3, #1
 800be8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800be90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be94:	881b      	ldrh	r3, [r3, #0]
 800be96:	b29a      	uxth	r2, r3
 800be98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	029b      	lsls	r3, r3, #10
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	4313      	orrs	r3, r2
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800beaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800beae:	b29a      	uxth	r2, r3
 800beb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800beb4:	801a      	strh	r2, [r3, #0]
 800beb6:	e030      	b.n	800bf1a <USB_EPStartXfer+0x1560>
 800beb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	785b      	ldrb	r3, [r3, #1]
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d128      	bne.n	800bf1a <USB_EPStartXfer+0x1560>
 800bec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800becc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800beda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	461a      	mov	r2, r3
 800bee8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800beec:	4413      	add	r3, r2
 800beee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	00da      	lsls	r2, r3, #3
 800bf00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bf04:	4413      	add	r3, r2
 800bf06:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bf0a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bf0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf12:	b29a      	uxth	r2, r3
 800bf14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bf18:	801a      	strh	r2, [r3, #0]
 800bf1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bf28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	785b      	ldrb	r3, [r3, #1]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f040 8085 	bne.w	800c044 <USB_EPStartXfer+0x168a>
 800bf3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bf48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	461a      	mov	r2, r3
 800bf5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bf5e:	4413      	add	r3, r2
 800bf60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bf64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	00da      	lsls	r2, r3, #3
 800bf72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bf76:	4413      	add	r3, r2
 800bf78:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bf7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bf80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bf84:	881b      	ldrh	r3, [r3, #0]
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bf92:	801a      	strh	r2, [r3, #0]
 800bf94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d10c      	bne.n	800bfb6 <USB_EPStartXfer+0x15fc>
 800bf9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bfa0:	881b      	ldrh	r3, [r3, #0]
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfac:	b29a      	uxth	r2, r3
 800bfae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bfb2:	801a      	strh	r2, [r3, #0]
 800bfb4:	e073      	b.n	800c09e <USB_EPStartXfer+0x16e4>
 800bfb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfba:	2b3e      	cmp	r3, #62	@ 0x3e
 800bfbc:	d81e      	bhi.n	800bffc <USB_EPStartXfer+0x1642>
 800bfbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfc2:	085b      	lsrs	r3, r3, #1
 800bfc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bfc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfcc:	f003 0301 	and.w	r3, r3, #1
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d004      	beq.n	800bfde <USB_EPStartXfer+0x1624>
 800bfd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bfd8:	3301      	adds	r3, #1
 800bfda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bfde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bfe2:	881b      	ldrh	r3, [r3, #0]
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	029b      	lsls	r3, r3, #10
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	4313      	orrs	r3, r2
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bff8:	801a      	strh	r2, [r3, #0]
 800bffa:	e050      	b.n	800c09e <USB_EPStartXfer+0x16e4>
 800bffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c000:	095b      	lsrs	r3, r3, #5
 800c002:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c00a:	f003 031f 	and.w	r3, r3, #31
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d104      	bne.n	800c01c <USB_EPStartXfer+0x1662>
 800c012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c016:	3b01      	subs	r3, #1
 800c018:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c01c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c020:	881b      	ldrh	r3, [r3, #0]
 800c022:	b29a      	uxth	r2, r3
 800c024:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c028:	b29b      	uxth	r3, r3
 800c02a:	029b      	lsls	r3, r3, #10
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	4313      	orrs	r3, r2
 800c030:	b29b      	uxth	r3, r3
 800c032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c03a:	b29a      	uxth	r2, r3
 800c03c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c040:	801a      	strh	r2, [r3, #0]
 800c042:	e02c      	b.n	800c09e <USB_EPStartXfer+0x16e4>
 800c044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	785b      	ldrb	r3, [r3, #1]
 800c050:	2b01      	cmp	r3, #1
 800c052:	d124      	bne.n	800c09e <USB_EPStartXfer+0x16e4>
 800c054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c058:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c062:	b29b      	uxth	r3, r3
 800c064:	461a      	mov	r2, r3
 800c066:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c06a:	4413      	add	r3, r2
 800c06c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	00da      	lsls	r2, r3, #3
 800c07e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c082:	4413      	add	r3, r2
 800c084:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c088:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c090:	b29a      	uxth	r2, r3
 800c092:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c096:	801a      	strh	r2, [r3, #0]
 800c098:	e001      	b.n	800c09e <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800c09a:	2301      	movs	r3, #1
 800c09c:	e03a      	b.n	800c114 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c09e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4413      	add	r3, r2
 800c0b8:	881b      	ldrh	r3, [r3, #0]
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c0c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c0c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c0cc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c0d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c0d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c0d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c0dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c0e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	441a      	add	r2, r3
 800c0fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c0fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c102:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c10a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c10e:	b29b      	uxth	r3, r3
 800c110:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c11e:	b480      	push	{r7}
 800c120:	b085      	sub	sp, #20
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
 800c126:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	785b      	ldrb	r3, [r3, #1]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d020      	beq.n	800c172 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	4413      	add	r3, r2
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c146:	81bb      	strh	r3, [r7, #12]
 800c148:	89bb      	ldrh	r3, [r7, #12]
 800c14a:	f083 0310 	eor.w	r3, r3, #16
 800c14e:	81bb      	strh	r3, [r7, #12]
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	441a      	add	r2, r3
 800c15a:	89bb      	ldrh	r3, [r7, #12]
 800c15c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c160:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c164:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	8013      	strh	r3, [r2, #0]
 800c170:	e01f      	b.n	800c1b2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	4413      	add	r3, r2
 800c17c:	881b      	ldrh	r3, [r3, #0]
 800c17e:	b29b      	uxth	r3, r3
 800c180:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c188:	81fb      	strh	r3, [r7, #14]
 800c18a:	89fb      	ldrh	r3, [r7, #14]
 800c18c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c190:	81fb      	strh	r3, [r7, #14]
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	441a      	add	r2, r3
 800c19c:	89fb      	ldrh	r3, [r7, #14]
 800c19e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3714      	adds	r7, #20
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b087      	sub	sp, #28
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	7b1b      	ldrb	r3, [r3, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f040 809d 	bne.w	800c30e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	785b      	ldrb	r3, [r3, #1]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d04c      	beq.n	800c276 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4413      	add	r3, r2
 800c1e6:	881b      	ldrh	r3, [r3, #0]
 800c1e8:	823b      	strh	r3, [r7, #16]
 800c1ea:	8a3b      	ldrh	r3, [r7, #16]
 800c1ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d01b      	beq.n	800c22c <USB_EPClearStall+0x6c>
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4413      	add	r3, r2
 800c1fe:	881b      	ldrh	r3, [r3, #0]
 800c200:	b29b      	uxth	r3, r3
 800c202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c20a:	81fb      	strh	r3, [r7, #14]
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	441a      	add	r2, r3
 800c216:	89fb      	ldrh	r3, [r7, #14]
 800c218:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c21c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c224:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c228:	b29b      	uxth	r3, r3
 800c22a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	78db      	ldrb	r3, [r3, #3]
 800c230:	2b01      	cmp	r3, #1
 800c232:	d06c      	beq.n	800c30e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	4413      	add	r3, r2
 800c23e:	881b      	ldrh	r3, [r3, #0]
 800c240:	b29b      	uxth	r3, r3
 800c242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c246:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c24a:	81bb      	strh	r3, [r7, #12]
 800c24c:	89bb      	ldrh	r3, [r7, #12]
 800c24e:	f083 0320 	eor.w	r3, r3, #32
 800c252:	81bb      	strh	r3, [r7, #12]
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	441a      	add	r2, r3
 800c25e:	89bb      	ldrh	r3, [r7, #12]
 800c260:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c264:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c26c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c270:	b29b      	uxth	r3, r3
 800c272:	8013      	strh	r3, [r2, #0]
 800c274:	e04b      	b.n	800c30e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	4413      	add	r3, r2
 800c280:	881b      	ldrh	r3, [r3, #0]
 800c282:	82fb      	strh	r3, [r7, #22]
 800c284:	8afb      	ldrh	r3, [r7, #22]
 800c286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d01b      	beq.n	800c2c6 <USB_EPClearStall+0x106>
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	4413      	add	r3, r2
 800c298:	881b      	ldrh	r3, [r3, #0]
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2a4:	82bb      	strh	r3, [r7, #20]
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	441a      	add	r2, r3
 800c2b0:	8abb      	ldrh	r3, [r7, #20]
 800c2b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c2be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4413      	add	r3, r2
 800c2d0:	881b      	ldrh	r3, [r3, #0]
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c2d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2dc:	827b      	strh	r3, [r7, #18]
 800c2de:	8a7b      	ldrh	r3, [r7, #18]
 800c2e0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c2e4:	827b      	strh	r3, [r7, #18]
 800c2e6:	8a7b      	ldrh	r3, [r7, #18]
 800c2e8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c2ec:	827b      	strh	r3, [r7, #18]
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	441a      	add	r2, r3
 800c2f8:	8a7b      	ldrh	r3, [r7, #18]
 800c2fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c302:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	371c      	adds	r7, #28
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	460b      	mov	r3, r1
 800c326:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c328:	78fb      	ldrb	r3, [r7, #3]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d103      	bne.n	800c336 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2280      	movs	r2, #128	@ 0x80
 800c332:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c336:	2300      	movs	r3, #0
}
 800c338:	4618      	mov	r0, r3
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c352:	b29b      	uxth	r3, r3
 800c354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c35c:	b29a      	uxth	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr

0800c372 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c372:	b480      	push	{r7}
 800c374:	b085      	sub	sp, #20
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c380:	b29b      	uxth	r3, r3
 800c382:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c384:	68fb      	ldr	r3, [r7, #12]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c392:	b480      	push	{r7}
 800c394:	b08b      	sub	sp, #44	@ 0x2c
 800c396:	af00      	add	r7, sp, #0
 800c398:	60f8      	str	r0, [r7, #12]
 800c39a:	60b9      	str	r1, [r7, #8]
 800c39c:	4611      	mov	r1, r2
 800c39e:	461a      	mov	r2, r3
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	80fb      	strh	r3, [r7, #6]
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c3a8:	88bb      	ldrh	r3, [r7, #4]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	085b      	lsrs	r3, r3, #1
 800c3ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c3b8:	88fa      	ldrh	r2, [r7, #6]
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	4413      	add	r3, r2
 800c3be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c3c2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3c8:	e01b      	b.n	800c402 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	021b      	lsls	r3, r3, #8
 800c3d8:	b21a      	sxth	r2, r3
 800c3da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	b21b      	sxth	r3, r3
 800c3e2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c3e4:	6a3b      	ldr	r3, [r7, #32]
 800c3e6:	8a7a      	ldrh	r2, [r7, #18]
 800c3e8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c3ea:	6a3b      	ldr	r3, [r7, #32]
 800c3ec:	3302      	adds	r3, #2
 800c3ee:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c3f6:	69fb      	ldr	r3, [r7, #28]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fe:	3b01      	subs	r3, #1
 800c400:	627b      	str	r3, [r7, #36]	@ 0x24
 800c402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1e0      	bne.n	800c3ca <USB_WritePMA+0x38>
  }
}
 800c408:	bf00      	nop
 800c40a:	bf00      	nop
 800c40c:	372c      	adds	r7, #44	@ 0x2c
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c416:	b480      	push	{r7}
 800c418:	b08b      	sub	sp, #44	@ 0x2c
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	60b9      	str	r1, [r7, #8]
 800c420:	4611      	mov	r1, r2
 800c422:	461a      	mov	r2, r3
 800c424:	460b      	mov	r3, r1
 800c426:	80fb      	strh	r3, [r7, #6]
 800c428:	4613      	mov	r3, r2
 800c42a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c42c:	88bb      	ldrh	r3, [r7, #4]
 800c42e:	085b      	lsrs	r3, r3, #1
 800c430:	b29b      	uxth	r3, r3
 800c432:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c43c:	88fa      	ldrh	r2, [r7, #6]
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	4413      	add	r3, r2
 800c442:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c446:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c448:	69bb      	ldr	r3, [r7, #24]
 800c44a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c44c:	e018      	b.n	800c480 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	881b      	ldrh	r3, [r3, #0]
 800c452:	b29b      	uxth	r3, r3
 800c454:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c456:	6a3b      	ldr	r3, [r7, #32]
 800c458:	3302      	adds	r3, #2
 800c45a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	b2da      	uxtb	r2, r3
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	3301      	adds	r3, #1
 800c468:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	0a1b      	lsrs	r3, r3, #8
 800c46e:	b2da      	uxtb	r2, r3
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	3301      	adds	r3, #1
 800c478:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c47c:	3b01      	subs	r3, #1
 800c47e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1e3      	bne.n	800c44e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c486:	88bb      	ldrh	r3, [r7, #4]
 800c488:	f003 0301 	and.w	r3, r3, #1
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d007      	beq.n	800c4a2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c492:	6a3b      	ldr	r3, [r7, #32]
 800c494:	881b      	ldrh	r3, [r3, #0]
 800c496:	b29b      	uxth	r3, r3
 800c498:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	b2da      	uxtb	r2, r3
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	701a      	strb	r2, [r3, #0]
  }
}
 800c4a2:	bf00      	nop
 800c4a4:	372c      	adds	r7, #44	@ 0x2c
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr

0800c4ae <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b084      	sub	sp, #16
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c4ba:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c4be:	f002 f8f9 	bl	800e6b4 <USBD_static_malloc>
 800c4c2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d105      	bne.n	800c4d6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800c4d2:	2302      	movs	r3, #2
 800c4d4:	e066      	b.n	800c5a4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	68fa      	ldr	r2, [r7, #12]
 800c4da:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	7c1b      	ldrb	r3, [r3, #16]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d119      	bne.n	800c51a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c4e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c4ea:	2202      	movs	r2, #2
 800c4ec:	2181      	movs	r1, #129	@ 0x81
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f001 ff87 	bl	800e402 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c4fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c4fe:	2202      	movs	r2, #2
 800c500:	2101      	movs	r1, #1
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f001 ff7d 	bl	800e402 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2201      	movs	r2, #1
 800c50c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2210      	movs	r2, #16
 800c514:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800c518:	e016      	b.n	800c548 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c51a:	2340      	movs	r3, #64	@ 0x40
 800c51c:	2202      	movs	r2, #2
 800c51e:	2181      	movs	r1, #129	@ 0x81
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f001 ff6e 	bl	800e402 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2201      	movs	r2, #1
 800c52a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c52c:	2340      	movs	r3, #64	@ 0x40
 800c52e:	2202      	movs	r2, #2
 800c530:	2101      	movs	r1, #1
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f001 ff65 	bl	800e402 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2201      	movs	r2, #1
 800c53c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2210      	movs	r2, #16
 800c544:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c548:	2308      	movs	r3, #8
 800c54a:	2203      	movs	r2, #3
 800c54c:	2182      	movs	r1, #130	@ 0x82
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f001 ff57 	bl	800e402 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2200      	movs	r2, #0
 800c56a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2200      	movs	r2, #0
 800c572:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	7c1b      	ldrb	r3, [r3, #16]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d109      	bne.n	800c592 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c584:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c588:	2101      	movs	r1, #1
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f002 f828 	bl	800e5e0 <USBD_LL_PrepareReceive>
 800c590:	e007      	b.n	800c5a2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c598:	2340      	movs	r3, #64	@ 0x40
 800c59a:	2101      	movs	r1, #1
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f002 f81f 	bl	800e5e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c5a2:	2300      	movs	r3, #0
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3710      	adds	r7, #16
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c5b8:	2181      	movs	r1, #129	@ 0x81
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f001 ff47 	bl	800e44e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c5c6:	2101      	movs	r1, #1
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f001 ff40 	bl	800e44e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c5d6:	2182      	movs	r1, #130	@ 0x82
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f001 ff38 	bl	800e44e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00e      	beq.n	800c616 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c608:	4618      	mov	r0, r3
 800c60a:	f002 f861 	bl	800e6d0 <USBD_static_free>
    pdev->pClassData = NULL;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c616:	2300      	movs	r3, #0
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3708      	adds	r7, #8
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c630:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c632:	2300      	movs	r3, #0
 800c634:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c636:	2300      	movs	r3, #0
 800c638:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c63a:	2300      	movs	r3, #0
 800c63c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c644:	2303      	movs	r3, #3
 800c646:	e0af      	b.n	800c7a8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c650:	2b00      	cmp	r3, #0
 800c652:	d03f      	beq.n	800c6d4 <USBD_CDC_Setup+0xb4>
 800c654:	2b20      	cmp	r3, #32
 800c656:	f040 809f 	bne.w	800c798 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	88db      	ldrh	r3, [r3, #6]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d02e      	beq.n	800c6c0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	b25b      	sxtb	r3, r3
 800c668:	2b00      	cmp	r3, #0
 800c66a:	da16      	bge.n	800c69a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	683a      	ldr	r2, [r7, #0]
 800c676:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c678:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c67a:	683a      	ldr	r2, [r7, #0]
 800c67c:	88d2      	ldrh	r2, [r2, #6]
 800c67e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	88db      	ldrh	r3, [r3, #6]
 800c684:	2b07      	cmp	r3, #7
 800c686:	bf28      	it	cs
 800c688:	2307      	movcs	r3, #7
 800c68a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	89fa      	ldrh	r2, [r7, #14]
 800c690:	4619      	mov	r1, r3
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f001 facd 	bl	800dc32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c698:	e085      	b.n	800c7a6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	785a      	ldrb	r2, [r3, #1]
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	88db      	ldrh	r3, [r3, #6]
 800c6a8:	b2da      	uxtb	r2, r3
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c6b0:	6939      	ldr	r1, [r7, #16]
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	88db      	ldrh	r3, [r3, #6]
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f001 fae6 	bl	800dc8a <USBD_CtlPrepareRx>
      break;
 800c6be:	e072      	b.n	800c7a6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	683a      	ldr	r2, [r7, #0]
 800c6ca:	7850      	ldrb	r0, [r2, #1]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	6839      	ldr	r1, [r7, #0]
 800c6d0:	4798      	blx	r3
      break;
 800c6d2:	e068      	b.n	800c7a6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	785b      	ldrb	r3, [r3, #1]
 800c6d8:	2b0b      	cmp	r3, #11
 800c6da:	d852      	bhi.n	800c782 <USBD_CDC_Setup+0x162>
 800c6dc:	a201      	add	r2, pc, #4	@ (adr r2, 800c6e4 <USBD_CDC_Setup+0xc4>)
 800c6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e2:	bf00      	nop
 800c6e4:	0800c715 	.word	0x0800c715
 800c6e8:	0800c791 	.word	0x0800c791
 800c6ec:	0800c783 	.word	0x0800c783
 800c6f0:	0800c783 	.word	0x0800c783
 800c6f4:	0800c783 	.word	0x0800c783
 800c6f8:	0800c783 	.word	0x0800c783
 800c6fc:	0800c783 	.word	0x0800c783
 800c700:	0800c783 	.word	0x0800c783
 800c704:	0800c783 	.word	0x0800c783
 800c708:	0800c783 	.word	0x0800c783
 800c70c:	0800c73f 	.word	0x0800c73f
 800c710:	0800c769 	.word	0x0800c769
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	2b03      	cmp	r3, #3
 800c71e:	d107      	bne.n	800c730 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c720:	f107 030a 	add.w	r3, r7, #10
 800c724:	2202      	movs	r2, #2
 800c726:	4619      	mov	r1, r3
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f001 fa82 	bl	800dc32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c72e:	e032      	b.n	800c796 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c730:	6839      	ldr	r1, [r7, #0]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f001 fa0c 	bl	800db50 <USBD_CtlError>
            ret = USBD_FAIL;
 800c738:	2303      	movs	r3, #3
 800c73a:	75fb      	strb	r3, [r7, #23]
          break;
 800c73c:	e02b      	b.n	800c796 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c744:	b2db      	uxtb	r3, r3
 800c746:	2b03      	cmp	r3, #3
 800c748:	d107      	bne.n	800c75a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c74a:	f107 030d 	add.w	r3, r7, #13
 800c74e:	2201      	movs	r2, #1
 800c750:	4619      	mov	r1, r3
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f001 fa6d 	bl	800dc32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c758:	e01d      	b.n	800c796 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c75a:	6839      	ldr	r1, [r7, #0]
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f001 f9f7 	bl	800db50 <USBD_CtlError>
            ret = USBD_FAIL;
 800c762:	2303      	movs	r3, #3
 800c764:	75fb      	strb	r3, [r7, #23]
          break;
 800c766:	e016      	b.n	800c796 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	2b03      	cmp	r3, #3
 800c772:	d00f      	beq.n	800c794 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c774:	6839      	ldr	r1, [r7, #0]
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f001 f9ea 	bl	800db50 <USBD_CtlError>
            ret = USBD_FAIL;
 800c77c:	2303      	movs	r3, #3
 800c77e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c780:	e008      	b.n	800c794 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c782:	6839      	ldr	r1, [r7, #0]
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f001 f9e3 	bl	800db50 <USBD_CtlError>
          ret = USBD_FAIL;
 800c78a:	2303      	movs	r3, #3
 800c78c:	75fb      	strb	r3, [r7, #23]
          break;
 800c78e:	e002      	b.n	800c796 <USBD_CDC_Setup+0x176>
          break;
 800c790:	bf00      	nop
 800c792:	e008      	b.n	800c7a6 <USBD_CDC_Setup+0x186>
          break;
 800c794:	bf00      	nop
      }
      break;
 800c796:	e006      	b.n	800c7a6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c798:	6839      	ldr	r1, [r7, #0]
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f001 f9d8 	bl	800db50 <USBD_CtlError>
      ret = USBD_FAIL;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	75fb      	strb	r3, [r7, #23]
      break;
 800c7a4:	bf00      	nop
  }

  return (uint8_t)ret;
 800c7a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3718      	adds	r7, #24
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c7c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d101      	bne.n	800c7d2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c7ce:	2303      	movs	r3, #3
 800c7d0:	e04f      	b.n	800c872 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c7d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c7da:	78fa      	ldrb	r2, [r7, #3]
 800c7dc:	6879      	ldr	r1, [r7, #4]
 800c7de:	4613      	mov	r3, r2
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	4413      	add	r3, r2
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	440b      	add	r3, r1
 800c7e8:	3318      	adds	r3, #24
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d029      	beq.n	800c844 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c7f0:	78fa      	ldrb	r2, [r7, #3]
 800c7f2:	6879      	ldr	r1, [r7, #4]
 800c7f4:	4613      	mov	r3, r2
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	4413      	add	r3, r2
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	440b      	add	r3, r1
 800c7fe:	3318      	adds	r3, #24
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	78f9      	ldrb	r1, [r7, #3]
 800c804:	68f8      	ldr	r0, [r7, #12]
 800c806:	460b      	mov	r3, r1
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	440b      	add	r3, r1
 800c80c:	00db      	lsls	r3, r3, #3
 800c80e:	4403      	add	r3, r0
 800c810:	3320      	adds	r3, #32
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	fbb2 f1f3 	udiv	r1, r2, r3
 800c818:	fb01 f303 	mul.w	r3, r1, r3
 800c81c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d110      	bne.n	800c844 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c822:	78fa      	ldrb	r2, [r7, #3]
 800c824:	6879      	ldr	r1, [r7, #4]
 800c826:	4613      	mov	r3, r2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	4413      	add	r3, r2
 800c82c:	009b      	lsls	r3, r3, #2
 800c82e:	440b      	add	r3, r1
 800c830:	3318      	adds	r3, #24
 800c832:	2200      	movs	r2, #0
 800c834:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c836:	78f9      	ldrb	r1, [r7, #3]
 800c838:	2300      	movs	r3, #0
 800c83a:	2200      	movs	r2, #0
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f001 feae 	bl	800e59e <USBD_LL_Transmit>
 800c842:	e015      	b.n	800c870 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	2200      	movs	r2, #0
 800c848:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c852:	691b      	ldr	r3, [r3, #16]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00b      	beq.n	800c870 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c85e:	691b      	ldr	r3, [r3, #16]
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c866:	68ba      	ldr	r2, [r7, #8]
 800c868:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c86c:	78fa      	ldrb	r2, [r7, #3]
 800c86e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c870:	2300      	movs	r3, #0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b084      	sub	sp, #16
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
 800c882:	460b      	mov	r3, r1
 800c884:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c88c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c894:	2b00      	cmp	r3, #0
 800c896:	d101      	bne.n	800c89c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c898:	2303      	movs	r3, #3
 800c89a:	e015      	b.n	800c8c8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c89c:	78fb      	ldrb	r3, [r7, #3]
 800c89e:	4619      	mov	r1, r3
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f001 febe 	bl	800e622 <USBD_LL_GetRxDataSize>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	68fa      	ldr	r2, [r7, #12]
 800c8b8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c8c2:	4611      	mov	r1, r2
 800c8c4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3710      	adds	r7, #16
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c8de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d101      	bne.n	800c8ea <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c8e6:	2303      	movs	r3, #3
 800c8e8:	e01a      	b.n	800c920 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d014      	beq.n	800c91e <USBD_CDC_EP0_RxReady+0x4e>
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c8fa:	2bff      	cmp	r3, #255	@ 0xff
 800c8fc:	d00f      	beq.n	800c91e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	68fa      	ldr	r2, [r7, #12]
 800c908:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800c90c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c90e:	68fa      	ldr	r2, [r7, #12]
 800c910:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c914:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	22ff      	movs	r2, #255	@ 0xff
 800c91a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c91e:	2300      	movs	r3, #0
}
 800c920:	4618      	mov	r0, r3
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2243      	movs	r2, #67	@ 0x43
 800c934:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c936:	4b03      	ldr	r3, [pc, #12]	@ (800c944 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c938:	4618      	mov	r0, r3
 800c93a:	370c      	adds	r7, #12
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr
 800c944:	20000488 	.word	0x20000488

0800c948 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c948:	b480      	push	{r7}
 800c94a:	b083      	sub	sp, #12
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2243      	movs	r2, #67	@ 0x43
 800c954:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c956:	4b03      	ldr	r3, [pc, #12]	@ (800c964 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c958:	4618      	mov	r0, r3
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr
 800c964:	20000444 	.word	0x20000444

0800c968 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2243      	movs	r2, #67	@ 0x43
 800c974:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c976:	4b03      	ldr	r3, [pc, #12]	@ (800c984 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c978:	4618      	mov	r0, r3
 800c97a:	370c      	adds	r7, #12
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr
 800c984:	200004cc 	.word	0x200004cc

0800c988 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	220a      	movs	r2, #10
 800c994:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c996:	4b03      	ldr	r3, [pc, #12]	@ (800c9a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c998:	4618      	mov	r0, r3
 800c99a:	370c      	adds	r7, #12
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr
 800c9a4:	20000400 	.word	0x20000400

0800c9a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d101      	bne.n	800c9bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c9b8:	2303      	movs	r3, #3
 800c9ba:	e004      	b.n	800c9c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	683a      	ldr	r2, [r7, #0]
 800c9c0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	370c      	adds	r7, #12
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr

0800c9d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c9d2:	b480      	push	{r7}
 800c9d4:	b087      	sub	sp, #28
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	60f8      	str	r0, [r7, #12]
 800c9da:	60b9      	str	r1, [r7, #8]
 800c9dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c9e4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d101      	bne.n	800c9f0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c9ec:	2303      	movs	r3, #3
 800c9ee:	e008      	b.n	800ca02 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	68ba      	ldr	r2, [r7, #8]
 800c9f4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ca00:	2300      	movs	r3, #0
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	371c      	adds	r7, #28
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr

0800ca0e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ca0e:	b480      	push	{r7}
 800ca10:	b085      	sub	sp, #20
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
 800ca16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ca1e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d101      	bne.n	800ca2a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ca26:	2303      	movs	r3, #3
 800ca28:	e004      	b.n	800ca34 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	683a      	ldr	r2, [r7, #0]
 800ca2e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3714      	adds	r7, #20
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ca4e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ca50:	2301      	movs	r3, #1
 800ca52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d101      	bne.n	800ca62 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ca5e:	2303      	movs	r3, #3
 800ca60:	e01a      	b.n	800ca98 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d114      	bne.n	800ca96 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	2201      	movs	r2, #1
 800ca70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ca8a:	2181      	movs	r1, #129	@ 0x81
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f001 fd86 	bl	800e59e <USBD_LL_Transmit>

    ret = USBD_OK;
 800ca92:	2300      	movs	r3, #0
 800ca94:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ca96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3710      	adds	r7, #16
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800caae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d101      	bne.n	800cabe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800caba:	2303      	movs	r3, #3
 800cabc:	e016      	b.n	800caec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	7c1b      	ldrb	r3, [r3, #16]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d109      	bne.n	800cada <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cacc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cad0:	2101      	movs	r1, #1
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f001 fd84 	bl	800e5e0 <USBD_LL_PrepareReceive>
 800cad8:	e007      	b.n	800caea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cae0:	2340      	movs	r3, #64	@ 0x40
 800cae2:	2101      	movs	r1, #1
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f001 fd7b 	bl	800e5e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800caea:	2300      	movs	r3, #0
}
 800caec:	4618      	mov	r0, r3
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b086      	sub	sp, #24
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	4613      	mov	r3, r2
 800cb00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d101      	bne.n	800cb0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cb08:	2303      	movs	r3, #3
 800cb0a:	e01f      	b.n	800cb4c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2200      	movs	r2, #0
 800cb18:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d003      	beq.n	800cb32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	68ba      	ldr	r2, [r7, #8]
 800cb2e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2201      	movs	r2, #1
 800cb36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	79fa      	ldrb	r2, [r7, #7]
 800cb3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f001 fbe3 	bl	800e30c <USBD_LL_Init>
 800cb46:	4603      	mov	r3, r0
 800cb48:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cb4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3718      	adds	r7, #24
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d101      	bne.n	800cb6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cb68:	2303      	movs	r3, #3
 800cb6a:	e016      	b.n	800cb9a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	683a      	ldr	r2, [r7, #0]
 800cb70:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d00b      	beq.n	800cb98 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb88:	f107 020e 	add.w	r2, r7, #14
 800cb8c:	4610      	mov	r0, r2
 800cb8e:	4798      	blx	r3
 800cb90:	4602      	mov	r2, r0
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b082      	sub	sp, #8
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f001 fc0e 	bl	800e3cc <USBD_LL_Start>
 800cbb0:	4603      	mov	r3, r0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cbba:	b480      	push	{r7}
 800cbbc:	b083      	sub	sp, #12
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cbc2:	2300      	movs	r3, #0
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	460b      	mov	r3, r1
 800cbda:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cbdc:	2303      	movs	r3, #3
 800cbde:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d009      	beq.n	800cbfe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	78fa      	ldrb	r2, [r7, #3]
 800cbf4:	4611      	mov	r1, r2
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	4798      	blx	r3
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cbfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3710      	adds	r7, #16
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}

0800cc08 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	460b      	mov	r3, r1
 800cc12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d007      	beq.n	800cc2e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	78fa      	ldrb	r2, [r7, #3]
 800cc28:	4611      	mov	r1, r2
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	4798      	blx	r3
  }

  return USBD_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cc48:	6839      	ldr	r1, [r7, #0]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f000 ff46 	bl	800dadc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2201      	movs	r2, #1
 800cc54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800cc5e:	461a      	mov	r2, r3
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cc6c:	f003 031f 	and.w	r3, r3, #31
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	d01a      	beq.n	800ccaa <USBD_LL_SetupStage+0x72>
 800cc74:	2b02      	cmp	r3, #2
 800cc76:	d822      	bhi.n	800ccbe <USBD_LL_SetupStage+0x86>
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d002      	beq.n	800cc82 <USBD_LL_SetupStage+0x4a>
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d00a      	beq.n	800cc96 <USBD_LL_SetupStage+0x5e>
 800cc80:	e01d      	b.n	800ccbe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cc88:	4619      	mov	r1, r3
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 f9ee 	bl	800d06c <USBD_StdDevReq>
 800cc90:	4603      	mov	r3, r0
 800cc92:	73fb      	strb	r3, [r7, #15]
      break;
 800cc94:	e020      	b.n	800ccd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 fa52 	bl	800d148 <USBD_StdItfReq>
 800cca4:	4603      	mov	r3, r0
 800cca6:	73fb      	strb	r3, [r7, #15]
      break;
 800cca8:	e016      	b.n	800ccd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 fa91 	bl	800d1da <USBD_StdEPReq>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	73fb      	strb	r3, [r7, #15]
      break;
 800ccbc:	e00c      	b.n	800ccd8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ccc4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	4619      	mov	r1, r3
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f001 fbdd 	bl	800e48c <USBD_LL_StallEP>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	73fb      	strb	r3, [r7, #15]
      break;
 800ccd6:	bf00      	nop
  }

  return ret;
 800ccd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b086      	sub	sp, #24
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	60f8      	str	r0, [r7, #12]
 800ccea:	460b      	mov	r3, r1
 800ccec:	607a      	str	r2, [r7, #4]
 800ccee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ccf0:	7afb      	ldrb	r3, [r7, #11]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d138      	bne.n	800cd68 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ccfc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cd04:	2b03      	cmp	r3, #3
 800cd06:	d14a      	bne.n	800cd9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	689a      	ldr	r2, [r3, #8]
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d913      	bls.n	800cd3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	689a      	ldr	r2, [r3, #8]
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	1ad2      	subs	r2, r2, r3
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	68da      	ldr	r2, [r3, #12]
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	bf28      	it	cs
 800cd2e:	4613      	movcs	r3, r2
 800cd30:	461a      	mov	r2, r3
 800cd32:	6879      	ldr	r1, [r7, #4]
 800cd34:	68f8      	ldr	r0, [r7, #12]
 800cd36:	f000 ffc5 	bl	800dcc4 <USBD_CtlContinueRx>
 800cd3a:	e030      	b.n	800cd9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	2b03      	cmp	r3, #3
 800cd46:	d10b      	bne.n	800cd60 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd4e:	691b      	ldr	r3, [r3, #16]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d005      	beq.n	800cd60 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd5a:	691b      	ldr	r3, [r3, #16]
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f000 ffc0 	bl	800dce6 <USBD_CtlSendStatus>
 800cd66:	e01a      	b.n	800cd9e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd6e:	b2db      	uxtb	r3, r3
 800cd70:	2b03      	cmp	r3, #3
 800cd72:	d114      	bne.n	800cd9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd7a:	699b      	ldr	r3, [r3, #24]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d00e      	beq.n	800cd9e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd86:	699b      	ldr	r3, [r3, #24]
 800cd88:	7afa      	ldrb	r2, [r7, #11]
 800cd8a:	4611      	mov	r1, r2
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	4798      	blx	r3
 800cd90:	4603      	mov	r3, r0
 800cd92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cd94:	7dfb      	ldrb	r3, [r7, #23]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d001      	beq.n	800cd9e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800cd9a:	7dfb      	ldrb	r3, [r7, #23]
 800cd9c:	e000      	b.n	800cda0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800cd9e:	2300      	movs	r3, #0
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3718      	adds	r7, #24
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b086      	sub	sp, #24
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	607a      	str	r2, [r7, #4]
 800cdb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cdb6:	7afb      	ldrb	r3, [r7, #11]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d16b      	bne.n	800ce94 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	3314      	adds	r3, #20
 800cdc0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cdc8:	2b02      	cmp	r3, #2
 800cdca:	d156      	bne.n	800ce7a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	689a      	ldr	r2, [r3, #8]
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d914      	bls.n	800ce02 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	689a      	ldr	r2, [r3, #8]
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	1ad2      	subs	r2, r2, r3
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	689b      	ldr	r3, [r3, #8]
 800cdea:	461a      	mov	r2, r3
 800cdec:	6879      	ldr	r1, [r7, #4]
 800cdee:	68f8      	ldr	r0, [r7, #12]
 800cdf0:	f000 ff3a 	bl	800dc68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	68f8      	ldr	r0, [r7, #12]
 800cdfc:	f001 fbf0 	bl	800e5e0 <USBD_LL_PrepareReceive>
 800ce00:	e03b      	b.n	800ce7a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	68da      	ldr	r2, [r3, #12]
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d11c      	bne.n	800ce48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	685a      	ldr	r2, [r3, #4]
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d316      	bcc.n	800ce48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	685a      	ldr	r2, [r3, #4]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d20f      	bcs.n	800ce48 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ce28:	2200      	movs	r2, #0
 800ce2a:	2100      	movs	r1, #0
 800ce2c:	68f8      	ldr	r0, [r7, #12]
 800ce2e:	f000 ff1b 	bl	800dc68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2200      	movs	r2, #0
 800ce36:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	2100      	movs	r1, #0
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f001 fbcd 	bl	800e5e0 <USBD_LL_PrepareReceive>
 800ce46:	e018      	b.n	800ce7a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	2b03      	cmp	r3, #3
 800ce52:	d10b      	bne.n	800ce6c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce5a:	68db      	ldr	r3, [r3, #12]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d005      	beq.n	800ce6c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce6c:	2180      	movs	r1, #128	@ 0x80
 800ce6e:	68f8      	ldr	r0, [r7, #12]
 800ce70:	f001 fb0c 	bl	800e48c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ce74:	68f8      	ldr	r0, [r7, #12]
 800ce76:	f000 ff49 	bl	800dd0c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d122      	bne.n	800ceca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f7ff fe98 	bl	800cbba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ce92:	e01a      	b.n	800ceca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	2b03      	cmp	r3, #3
 800ce9e:	d114      	bne.n	800ceca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cea6:	695b      	ldr	r3, [r3, #20]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d00e      	beq.n	800ceca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ceb2:	695b      	ldr	r3, [r3, #20]
 800ceb4:	7afa      	ldrb	r2, [r7, #11]
 800ceb6:	4611      	mov	r1, r2
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	4798      	blx	r3
 800cebc:	4603      	mov	r3, r0
 800cebe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cec0:	7dfb      	ldrb	r3, [r7, #23]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d001      	beq.n	800ceca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800cec6:	7dfb      	ldrb	r3, [r7, #23]
 800cec8:	e000      	b.n	800cecc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3718      	adds	r7, #24
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2201      	movs	r2, #1
 800cee0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2200      	movs	r2, #0
 800cef0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d101      	bne.n	800cf08 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800cf04:	2303      	movs	r3, #3
 800cf06:	e02f      	b.n	800cf68 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d00f      	beq.n	800cf32 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d009      	beq.n	800cf32 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	6852      	ldr	r2, [r2, #4]
 800cf2a:	b2d2      	uxtb	r2, r2
 800cf2c:	4611      	mov	r1, r2
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf32:	2340      	movs	r3, #64	@ 0x40
 800cf34:	2200      	movs	r2, #0
 800cf36:	2100      	movs	r1, #0
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f001 fa62 	bl	800e402 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2201      	movs	r2, #1
 800cf42:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2240      	movs	r2, #64	@ 0x40
 800cf4a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf4e:	2340      	movs	r3, #64	@ 0x40
 800cf50:	2200      	movs	r2, #0
 800cf52:	2180      	movs	r1, #128	@ 0x80
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f001 fa54 	bl	800e402 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2240      	movs	r2, #64	@ 0x40
 800cf64:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800cf66:	2300      	movs	r3, #0
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3708      	adds	r7, #8
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	460b      	mov	r3, r1
 800cf7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	78fa      	ldrb	r2, [r7, #3]
 800cf80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cf82:	2300      	movs	r3, #0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	370c      	adds	r7, #12
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf9e:	b2da      	uxtb	r2, r3
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2204      	movs	r2, #4
 800cfaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cfae:	2300      	movs	r3, #0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	2b04      	cmp	r3, #4
 800cfce:	d106      	bne.n	800cfde <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cfd6:	b2da      	uxtb	r2, r3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cfde:	2300      	movs	r3, #0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr

0800cfec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d101      	bne.n	800d002 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800cffe:	2303      	movs	r3, #3
 800d000:	e012      	b.n	800d028 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	2b03      	cmp	r3, #3
 800d00c:	d10b      	bne.n	800d026 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d014:	69db      	ldr	r3, [r3, #28]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d005      	beq.n	800d026 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d020:	69db      	ldr	r3, [r3, #28]
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d026:	2300      	movs	r3, #0
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3708      	adds	r7, #8
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d030:	b480      	push	{r7}
 800d032:	b087      	sub	sp, #28
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	3301      	adds	r3, #1
 800d046:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d04e:	8a3b      	ldrh	r3, [r7, #16]
 800d050:	021b      	lsls	r3, r3, #8
 800d052:	b21a      	sxth	r2, r3
 800d054:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d058:	4313      	orrs	r3, r2
 800d05a:	b21b      	sxth	r3, r3
 800d05c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d05e:	89fb      	ldrh	r3, [r7, #14]
}
 800d060:	4618      	mov	r0, r3
 800d062:	371c      	adds	r7, #28
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d076:	2300      	movs	r3, #0
 800d078:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d082:	2b40      	cmp	r3, #64	@ 0x40
 800d084:	d005      	beq.n	800d092 <USBD_StdDevReq+0x26>
 800d086:	2b40      	cmp	r3, #64	@ 0x40
 800d088:	d853      	bhi.n	800d132 <USBD_StdDevReq+0xc6>
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d00b      	beq.n	800d0a6 <USBD_StdDevReq+0x3a>
 800d08e:	2b20      	cmp	r3, #32
 800d090:	d14f      	bne.n	800d132 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	6839      	ldr	r1, [r7, #0]
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	4798      	blx	r3
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	73fb      	strb	r3, [r7, #15]
      break;
 800d0a4:	e04a      	b.n	800d13c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	785b      	ldrb	r3, [r3, #1]
 800d0aa:	2b09      	cmp	r3, #9
 800d0ac:	d83b      	bhi.n	800d126 <USBD_StdDevReq+0xba>
 800d0ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d0b4 <USBD_StdDevReq+0x48>)
 800d0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b4:	0800d109 	.word	0x0800d109
 800d0b8:	0800d11d 	.word	0x0800d11d
 800d0bc:	0800d127 	.word	0x0800d127
 800d0c0:	0800d113 	.word	0x0800d113
 800d0c4:	0800d127 	.word	0x0800d127
 800d0c8:	0800d0e7 	.word	0x0800d0e7
 800d0cc:	0800d0dd 	.word	0x0800d0dd
 800d0d0:	0800d127 	.word	0x0800d127
 800d0d4:	0800d0ff 	.word	0x0800d0ff
 800d0d8:	0800d0f1 	.word	0x0800d0f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d0dc:	6839      	ldr	r1, [r7, #0]
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 f9de 	bl	800d4a0 <USBD_GetDescriptor>
          break;
 800d0e4:	e024      	b.n	800d130 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d0e6:	6839      	ldr	r1, [r7, #0]
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f000 fb6d 	bl	800d7c8 <USBD_SetAddress>
          break;
 800d0ee:	e01f      	b.n	800d130 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d0f0:	6839      	ldr	r1, [r7, #0]
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 fbac 	bl	800d850 <USBD_SetConfig>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	73fb      	strb	r3, [r7, #15]
          break;
 800d0fc:	e018      	b.n	800d130 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d0fe:	6839      	ldr	r1, [r7, #0]
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 fc4b 	bl	800d99c <USBD_GetConfig>
          break;
 800d106:	e013      	b.n	800d130 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d108:	6839      	ldr	r1, [r7, #0]
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 fc7c 	bl	800da08 <USBD_GetStatus>
          break;
 800d110:	e00e      	b.n	800d130 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d112:	6839      	ldr	r1, [r7, #0]
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 fcab 	bl	800da70 <USBD_SetFeature>
          break;
 800d11a:	e009      	b.n	800d130 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d11c:	6839      	ldr	r1, [r7, #0]
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 fcba 	bl	800da98 <USBD_ClrFeature>
          break;
 800d124:	e004      	b.n	800d130 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d126:	6839      	ldr	r1, [r7, #0]
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 fd11 	bl	800db50 <USBD_CtlError>
          break;
 800d12e:	bf00      	nop
      }
      break;
 800d130:	e004      	b.n	800d13c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d132:	6839      	ldr	r1, [r7, #0]
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 fd0b 	bl	800db50 <USBD_CtlError>
      break;
 800d13a:	bf00      	nop
  }

  return ret;
 800d13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3710      	adds	r7, #16
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop

0800d148 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d152:	2300      	movs	r3, #0
 800d154:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d15e:	2b40      	cmp	r3, #64	@ 0x40
 800d160:	d005      	beq.n	800d16e <USBD_StdItfReq+0x26>
 800d162:	2b40      	cmp	r3, #64	@ 0x40
 800d164:	d82f      	bhi.n	800d1c6 <USBD_StdItfReq+0x7e>
 800d166:	2b00      	cmp	r3, #0
 800d168:	d001      	beq.n	800d16e <USBD_StdItfReq+0x26>
 800d16a:	2b20      	cmp	r3, #32
 800d16c:	d12b      	bne.n	800d1c6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d174:	b2db      	uxtb	r3, r3
 800d176:	3b01      	subs	r3, #1
 800d178:	2b02      	cmp	r3, #2
 800d17a:	d81d      	bhi.n	800d1b8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	889b      	ldrh	r3, [r3, #4]
 800d180:	b2db      	uxtb	r3, r3
 800d182:	2b01      	cmp	r3, #1
 800d184:	d813      	bhi.n	800d1ae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	6839      	ldr	r1, [r7, #0]
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	4798      	blx	r3
 800d194:	4603      	mov	r3, r0
 800d196:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	88db      	ldrh	r3, [r3, #6]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d110      	bne.n	800d1c2 <USBD_StdItfReq+0x7a>
 800d1a0:	7bfb      	ldrb	r3, [r7, #15]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d10d      	bne.n	800d1c2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 fd9d 	bl	800dce6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d1ac:	e009      	b.n	800d1c2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d1ae:	6839      	ldr	r1, [r7, #0]
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f000 fccd 	bl	800db50 <USBD_CtlError>
          break;
 800d1b6:	e004      	b.n	800d1c2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d1b8:	6839      	ldr	r1, [r7, #0]
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 fcc8 	bl	800db50 <USBD_CtlError>
          break;
 800d1c0:	e000      	b.n	800d1c4 <USBD_StdItfReq+0x7c>
          break;
 800d1c2:	bf00      	nop
      }
      break;
 800d1c4:	e004      	b.n	800d1d0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d1c6:	6839      	ldr	r1, [r7, #0]
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 fcc1 	bl	800db50 <USBD_CtlError>
      break;
 800d1ce:	bf00      	nop
  }

  return ret;
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b084      	sub	sp, #16
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
 800d1e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	889b      	ldrh	r3, [r3, #4]
 800d1ec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d1f6:	2b40      	cmp	r3, #64	@ 0x40
 800d1f8:	d007      	beq.n	800d20a <USBD_StdEPReq+0x30>
 800d1fa:	2b40      	cmp	r3, #64	@ 0x40
 800d1fc:	f200 8145 	bhi.w	800d48a <USBD_StdEPReq+0x2b0>
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00c      	beq.n	800d21e <USBD_StdEPReq+0x44>
 800d204:	2b20      	cmp	r3, #32
 800d206:	f040 8140 	bne.w	800d48a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	6839      	ldr	r1, [r7, #0]
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	4798      	blx	r3
 800d218:	4603      	mov	r3, r0
 800d21a:	73fb      	strb	r3, [r7, #15]
      break;
 800d21c:	e13a      	b.n	800d494 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	785b      	ldrb	r3, [r3, #1]
 800d222:	2b03      	cmp	r3, #3
 800d224:	d007      	beq.n	800d236 <USBD_StdEPReq+0x5c>
 800d226:	2b03      	cmp	r3, #3
 800d228:	f300 8129 	bgt.w	800d47e <USBD_StdEPReq+0x2a4>
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d07f      	beq.n	800d330 <USBD_StdEPReq+0x156>
 800d230:	2b01      	cmp	r3, #1
 800d232:	d03c      	beq.n	800d2ae <USBD_StdEPReq+0xd4>
 800d234:	e123      	b.n	800d47e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	2b02      	cmp	r3, #2
 800d240:	d002      	beq.n	800d248 <USBD_StdEPReq+0x6e>
 800d242:	2b03      	cmp	r3, #3
 800d244:	d016      	beq.n	800d274 <USBD_StdEPReq+0x9a>
 800d246:	e02c      	b.n	800d2a2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d248:	7bbb      	ldrb	r3, [r7, #14]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d00d      	beq.n	800d26a <USBD_StdEPReq+0x90>
 800d24e:	7bbb      	ldrb	r3, [r7, #14]
 800d250:	2b80      	cmp	r3, #128	@ 0x80
 800d252:	d00a      	beq.n	800d26a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d254:	7bbb      	ldrb	r3, [r7, #14]
 800d256:	4619      	mov	r1, r3
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f001 f917 	bl	800e48c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d25e:	2180      	movs	r1, #128	@ 0x80
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f001 f913 	bl	800e48c <USBD_LL_StallEP>
 800d266:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d268:	e020      	b.n	800d2ac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d26a:	6839      	ldr	r1, [r7, #0]
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 fc6f 	bl	800db50 <USBD_CtlError>
              break;
 800d272:	e01b      	b.n	800d2ac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	885b      	ldrh	r3, [r3, #2]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10e      	bne.n	800d29a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d27c:	7bbb      	ldrb	r3, [r7, #14]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d00b      	beq.n	800d29a <USBD_StdEPReq+0xc0>
 800d282:	7bbb      	ldrb	r3, [r7, #14]
 800d284:	2b80      	cmp	r3, #128	@ 0x80
 800d286:	d008      	beq.n	800d29a <USBD_StdEPReq+0xc0>
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	88db      	ldrh	r3, [r3, #6]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d104      	bne.n	800d29a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d290:	7bbb      	ldrb	r3, [r7, #14]
 800d292:	4619      	mov	r1, r3
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f001 f8f9 	bl	800e48c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 fd23 	bl	800dce6 <USBD_CtlSendStatus>

              break;
 800d2a0:	e004      	b.n	800d2ac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d2a2:	6839      	ldr	r1, [r7, #0]
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 fc53 	bl	800db50 <USBD_CtlError>
              break;
 800d2aa:	bf00      	nop
          }
          break;
 800d2ac:	e0ec      	b.n	800d488 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2b4:	b2db      	uxtb	r3, r3
 800d2b6:	2b02      	cmp	r3, #2
 800d2b8:	d002      	beq.n	800d2c0 <USBD_StdEPReq+0xe6>
 800d2ba:	2b03      	cmp	r3, #3
 800d2bc:	d016      	beq.n	800d2ec <USBD_StdEPReq+0x112>
 800d2be:	e030      	b.n	800d322 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d2c0:	7bbb      	ldrb	r3, [r7, #14]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d00d      	beq.n	800d2e2 <USBD_StdEPReq+0x108>
 800d2c6:	7bbb      	ldrb	r3, [r7, #14]
 800d2c8:	2b80      	cmp	r3, #128	@ 0x80
 800d2ca:	d00a      	beq.n	800d2e2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d2cc:	7bbb      	ldrb	r3, [r7, #14]
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f001 f8db 	bl	800e48c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d2d6:	2180      	movs	r1, #128	@ 0x80
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f001 f8d7 	bl	800e48c <USBD_LL_StallEP>
 800d2de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d2e0:	e025      	b.n	800d32e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d2e2:	6839      	ldr	r1, [r7, #0]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 fc33 	bl	800db50 <USBD_CtlError>
              break;
 800d2ea:	e020      	b.n	800d32e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	885b      	ldrh	r3, [r3, #2]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d11b      	bne.n	800d32c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d2f4:	7bbb      	ldrb	r3, [r7, #14]
 800d2f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d004      	beq.n	800d308 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d2fe:	7bbb      	ldrb	r3, [r7, #14]
 800d300:	4619      	mov	r1, r3
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f001 f8e1 	bl	800e4ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 fcec 	bl	800dce6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d314:	689b      	ldr	r3, [r3, #8]
 800d316:	6839      	ldr	r1, [r7, #0]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	4798      	blx	r3
 800d31c:	4603      	mov	r3, r0
 800d31e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d320:	e004      	b.n	800d32c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d322:	6839      	ldr	r1, [r7, #0]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 fc13 	bl	800db50 <USBD_CtlError>
              break;
 800d32a:	e000      	b.n	800d32e <USBD_StdEPReq+0x154>
              break;
 800d32c:	bf00      	nop
          }
          break;
 800d32e:	e0ab      	b.n	800d488 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d336:	b2db      	uxtb	r3, r3
 800d338:	2b02      	cmp	r3, #2
 800d33a:	d002      	beq.n	800d342 <USBD_StdEPReq+0x168>
 800d33c:	2b03      	cmp	r3, #3
 800d33e:	d032      	beq.n	800d3a6 <USBD_StdEPReq+0x1cc>
 800d340:	e097      	b.n	800d472 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d342:	7bbb      	ldrb	r3, [r7, #14]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d007      	beq.n	800d358 <USBD_StdEPReq+0x17e>
 800d348:	7bbb      	ldrb	r3, [r7, #14]
 800d34a:	2b80      	cmp	r3, #128	@ 0x80
 800d34c:	d004      	beq.n	800d358 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d34e:	6839      	ldr	r1, [r7, #0]
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f000 fbfd 	bl	800db50 <USBD_CtlError>
                break;
 800d356:	e091      	b.n	800d47c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	da0b      	bge.n	800d378 <USBD_StdEPReq+0x19e>
 800d360:	7bbb      	ldrb	r3, [r7, #14]
 800d362:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d366:	4613      	mov	r3, r2
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	4413      	add	r3, r2
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	3310      	adds	r3, #16
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	4413      	add	r3, r2
 800d374:	3304      	adds	r3, #4
 800d376:	e00b      	b.n	800d390 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d378:	7bbb      	ldrb	r3, [r7, #14]
 800d37a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d37e:	4613      	mov	r3, r2
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	4413      	add	r3, r2
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	4413      	add	r3, r2
 800d38e:	3304      	adds	r3, #4
 800d390:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	2200      	movs	r2, #0
 800d396:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	2202      	movs	r2, #2
 800d39c:	4619      	mov	r1, r3
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 fc47 	bl	800dc32 <USBD_CtlSendData>
              break;
 800d3a4:	e06a      	b.n	800d47c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d3a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	da11      	bge.n	800d3d2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d3ae:	7bbb      	ldrb	r3, [r7, #14]
 800d3b0:	f003 020f 	and.w	r2, r3, #15
 800d3b4:	6879      	ldr	r1, [r7, #4]
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	4413      	add	r3, r2
 800d3bc:	009b      	lsls	r3, r3, #2
 800d3be:	440b      	add	r3, r1
 800d3c0:	3324      	adds	r3, #36	@ 0x24
 800d3c2:	881b      	ldrh	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d117      	bne.n	800d3f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d3c8:	6839      	ldr	r1, [r7, #0]
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 fbc0 	bl	800db50 <USBD_CtlError>
                  break;
 800d3d0:	e054      	b.n	800d47c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d3d2:	7bbb      	ldrb	r3, [r7, #14]
 800d3d4:	f003 020f 	and.w	r2, r3, #15
 800d3d8:	6879      	ldr	r1, [r7, #4]
 800d3da:	4613      	mov	r3, r2
 800d3dc:	009b      	lsls	r3, r3, #2
 800d3de:	4413      	add	r3, r2
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	440b      	add	r3, r1
 800d3e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d3e8:	881b      	ldrh	r3, [r3, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d104      	bne.n	800d3f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d3ee:	6839      	ldr	r1, [r7, #0]
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 fbad 	bl	800db50 <USBD_CtlError>
                  break;
 800d3f6:	e041      	b.n	800d47c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	da0b      	bge.n	800d418 <USBD_StdEPReq+0x23e>
 800d400:	7bbb      	ldrb	r3, [r7, #14]
 800d402:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d406:	4613      	mov	r3, r2
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	4413      	add	r3, r2
 800d40c:	009b      	lsls	r3, r3, #2
 800d40e:	3310      	adds	r3, #16
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	4413      	add	r3, r2
 800d414:	3304      	adds	r3, #4
 800d416:	e00b      	b.n	800d430 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d418:	7bbb      	ldrb	r3, [r7, #14]
 800d41a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d41e:	4613      	mov	r3, r2
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	4413      	add	r3, r2
 800d424:	009b      	lsls	r3, r3, #2
 800d426:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	4413      	add	r3, r2
 800d42e:	3304      	adds	r3, #4
 800d430:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d432:	7bbb      	ldrb	r3, [r7, #14]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d002      	beq.n	800d43e <USBD_StdEPReq+0x264>
 800d438:	7bbb      	ldrb	r3, [r7, #14]
 800d43a:	2b80      	cmp	r3, #128	@ 0x80
 800d43c:	d103      	bne.n	800d446 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	2200      	movs	r2, #0
 800d442:	601a      	str	r2, [r3, #0]
 800d444:	e00e      	b.n	800d464 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d446:	7bbb      	ldrb	r3, [r7, #14]
 800d448:	4619      	mov	r1, r3
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f001 f85c 	bl	800e508 <USBD_LL_IsStallEP>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d003      	beq.n	800d45e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	2201      	movs	r2, #1
 800d45a:	601a      	str	r2, [r3, #0]
 800d45c:	e002      	b.n	800d464 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	2200      	movs	r2, #0
 800d462:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	2202      	movs	r2, #2
 800d468:	4619      	mov	r1, r3
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 fbe1 	bl	800dc32 <USBD_CtlSendData>
              break;
 800d470:	e004      	b.n	800d47c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d472:	6839      	ldr	r1, [r7, #0]
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 fb6b 	bl	800db50 <USBD_CtlError>
              break;
 800d47a:	bf00      	nop
          }
          break;
 800d47c:	e004      	b.n	800d488 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d47e:	6839      	ldr	r1, [r7, #0]
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 fb65 	bl	800db50 <USBD_CtlError>
          break;
 800d486:	bf00      	nop
      }
      break;
 800d488:	e004      	b.n	800d494 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d48a:	6839      	ldr	r1, [r7, #0]
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 fb5f 	bl	800db50 <USBD_CtlError>
      break;
 800d492:	bf00      	nop
  }

  return ret;
 800d494:	7bfb      	ldrb	r3, [r7, #15]
}
 800d496:	4618      	mov	r0, r3
 800d498:	3710      	adds	r7, #16
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
	...

0800d4a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	885b      	ldrh	r3, [r3, #2]
 800d4ba:	0a1b      	lsrs	r3, r3, #8
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	3b01      	subs	r3, #1
 800d4c0:	2b0e      	cmp	r3, #14
 800d4c2:	f200 8152 	bhi.w	800d76a <USBD_GetDescriptor+0x2ca>
 800d4c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d4cc <USBD_GetDescriptor+0x2c>)
 800d4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4cc:	0800d53d 	.word	0x0800d53d
 800d4d0:	0800d555 	.word	0x0800d555
 800d4d4:	0800d595 	.word	0x0800d595
 800d4d8:	0800d76b 	.word	0x0800d76b
 800d4dc:	0800d76b 	.word	0x0800d76b
 800d4e0:	0800d70b 	.word	0x0800d70b
 800d4e4:	0800d737 	.word	0x0800d737
 800d4e8:	0800d76b 	.word	0x0800d76b
 800d4ec:	0800d76b 	.word	0x0800d76b
 800d4f0:	0800d76b 	.word	0x0800d76b
 800d4f4:	0800d76b 	.word	0x0800d76b
 800d4f8:	0800d76b 	.word	0x0800d76b
 800d4fc:	0800d76b 	.word	0x0800d76b
 800d500:	0800d76b 	.word	0x0800d76b
 800d504:	0800d509 	.word	0x0800d509
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d50e:	69db      	ldr	r3, [r3, #28]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00b      	beq.n	800d52c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d51a:	69db      	ldr	r3, [r3, #28]
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	7c12      	ldrb	r2, [r2, #16]
 800d520:	f107 0108 	add.w	r1, r7, #8
 800d524:	4610      	mov	r0, r2
 800d526:	4798      	blx	r3
 800d528:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d52a:	e126      	b.n	800d77a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d52c:	6839      	ldr	r1, [r7, #0]
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 fb0e 	bl	800db50 <USBD_CtlError>
        err++;
 800d534:	7afb      	ldrb	r3, [r7, #11]
 800d536:	3301      	adds	r3, #1
 800d538:	72fb      	strb	r3, [r7, #11]
      break;
 800d53a:	e11e      	b.n	800d77a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	7c12      	ldrb	r2, [r2, #16]
 800d548:	f107 0108 	add.w	r1, r7, #8
 800d54c:	4610      	mov	r0, r2
 800d54e:	4798      	blx	r3
 800d550:	60f8      	str	r0, [r7, #12]
      break;
 800d552:	e112      	b.n	800d77a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	7c1b      	ldrb	r3, [r3, #16]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d10d      	bne.n	800d578 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d564:	f107 0208 	add.w	r2, r7, #8
 800d568:	4610      	mov	r0, r2
 800d56a:	4798      	blx	r3
 800d56c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	3301      	adds	r3, #1
 800d572:	2202      	movs	r2, #2
 800d574:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d576:	e100      	b.n	800d77a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d57e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d580:	f107 0208 	add.w	r2, r7, #8
 800d584:	4610      	mov	r0, r2
 800d586:	4798      	blx	r3
 800d588:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	3301      	adds	r3, #1
 800d58e:	2202      	movs	r2, #2
 800d590:	701a      	strb	r2, [r3, #0]
      break;
 800d592:	e0f2      	b.n	800d77a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	885b      	ldrh	r3, [r3, #2]
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	2b05      	cmp	r3, #5
 800d59c:	f200 80ac 	bhi.w	800d6f8 <USBD_GetDescriptor+0x258>
 800d5a0:	a201      	add	r2, pc, #4	@ (adr r2, 800d5a8 <USBD_GetDescriptor+0x108>)
 800d5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5a6:	bf00      	nop
 800d5a8:	0800d5c1 	.word	0x0800d5c1
 800d5ac:	0800d5f5 	.word	0x0800d5f5
 800d5b0:	0800d629 	.word	0x0800d629
 800d5b4:	0800d65d 	.word	0x0800d65d
 800d5b8:	0800d691 	.word	0x0800d691
 800d5bc:	0800d6c5 	.word	0x0800d6c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00b      	beq.n	800d5e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	7c12      	ldrb	r2, [r2, #16]
 800d5d8:	f107 0108 	add.w	r1, r7, #8
 800d5dc:	4610      	mov	r0, r2
 800d5de:	4798      	blx	r3
 800d5e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5e2:	e091      	b.n	800d708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d5e4:	6839      	ldr	r1, [r7, #0]
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 fab2 	bl	800db50 <USBD_CtlError>
            err++;
 800d5ec:	7afb      	ldrb	r3, [r7, #11]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	72fb      	strb	r3, [r7, #11]
          break;
 800d5f2:	e089      	b.n	800d708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d00b      	beq.n	800d618 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	687a      	ldr	r2, [r7, #4]
 800d60a:	7c12      	ldrb	r2, [r2, #16]
 800d60c:	f107 0108 	add.w	r1, r7, #8
 800d610:	4610      	mov	r0, r2
 800d612:	4798      	blx	r3
 800d614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d616:	e077      	b.n	800d708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d618:	6839      	ldr	r1, [r7, #0]
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 fa98 	bl	800db50 <USBD_CtlError>
            err++;
 800d620:	7afb      	ldrb	r3, [r7, #11]
 800d622:	3301      	adds	r3, #1
 800d624:	72fb      	strb	r3, [r7, #11]
          break;
 800d626:	e06f      	b.n	800d708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d62e:	68db      	ldr	r3, [r3, #12]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00b      	beq.n	800d64c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d63a:	68db      	ldr	r3, [r3, #12]
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	7c12      	ldrb	r2, [r2, #16]
 800d640:	f107 0108 	add.w	r1, r7, #8
 800d644:	4610      	mov	r0, r2
 800d646:	4798      	blx	r3
 800d648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d64a:	e05d      	b.n	800d708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d64c:	6839      	ldr	r1, [r7, #0]
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 fa7e 	bl	800db50 <USBD_CtlError>
            err++;
 800d654:	7afb      	ldrb	r3, [r7, #11]
 800d656:	3301      	adds	r3, #1
 800d658:	72fb      	strb	r3, [r7, #11]
          break;
 800d65a:	e055      	b.n	800d708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d662:	691b      	ldr	r3, [r3, #16]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d00b      	beq.n	800d680 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d66e:	691b      	ldr	r3, [r3, #16]
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	7c12      	ldrb	r2, [r2, #16]
 800d674:	f107 0108 	add.w	r1, r7, #8
 800d678:	4610      	mov	r0, r2
 800d67a:	4798      	blx	r3
 800d67c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d67e:	e043      	b.n	800d708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d680:	6839      	ldr	r1, [r7, #0]
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 fa64 	bl	800db50 <USBD_CtlError>
            err++;
 800d688:	7afb      	ldrb	r3, [r7, #11]
 800d68a:	3301      	adds	r3, #1
 800d68c:	72fb      	strb	r3, [r7, #11]
          break;
 800d68e:	e03b      	b.n	800d708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d696:	695b      	ldr	r3, [r3, #20]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d00b      	beq.n	800d6b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6a2:	695b      	ldr	r3, [r3, #20]
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	7c12      	ldrb	r2, [r2, #16]
 800d6a8:	f107 0108 	add.w	r1, r7, #8
 800d6ac:	4610      	mov	r0, r2
 800d6ae:	4798      	blx	r3
 800d6b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6b2:	e029      	b.n	800d708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d6b4:	6839      	ldr	r1, [r7, #0]
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 fa4a 	bl	800db50 <USBD_CtlError>
            err++;
 800d6bc:	7afb      	ldrb	r3, [r7, #11]
 800d6be:	3301      	adds	r3, #1
 800d6c0:	72fb      	strb	r3, [r7, #11]
          break;
 800d6c2:	e021      	b.n	800d708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6ca:	699b      	ldr	r3, [r3, #24]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d00b      	beq.n	800d6e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6d6:	699b      	ldr	r3, [r3, #24]
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	7c12      	ldrb	r2, [r2, #16]
 800d6dc:	f107 0108 	add.w	r1, r7, #8
 800d6e0:	4610      	mov	r0, r2
 800d6e2:	4798      	blx	r3
 800d6e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6e6:	e00f      	b.n	800d708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d6e8:	6839      	ldr	r1, [r7, #0]
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 fa30 	bl	800db50 <USBD_CtlError>
            err++;
 800d6f0:	7afb      	ldrb	r3, [r7, #11]
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	72fb      	strb	r3, [r7, #11]
          break;
 800d6f6:	e007      	b.n	800d708 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d6f8:	6839      	ldr	r1, [r7, #0]
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 fa28 	bl	800db50 <USBD_CtlError>
          err++;
 800d700:	7afb      	ldrb	r3, [r7, #11]
 800d702:	3301      	adds	r3, #1
 800d704:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d706:	bf00      	nop
      }
      break;
 800d708:	e037      	b.n	800d77a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	7c1b      	ldrb	r3, [r3, #16]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d109      	bne.n	800d726 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d71a:	f107 0208 	add.w	r2, r7, #8
 800d71e:	4610      	mov	r0, r2
 800d720:	4798      	blx	r3
 800d722:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d724:	e029      	b.n	800d77a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d726:	6839      	ldr	r1, [r7, #0]
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f000 fa11 	bl	800db50 <USBD_CtlError>
        err++;
 800d72e:	7afb      	ldrb	r3, [r7, #11]
 800d730:	3301      	adds	r3, #1
 800d732:	72fb      	strb	r3, [r7, #11]
      break;
 800d734:	e021      	b.n	800d77a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	7c1b      	ldrb	r3, [r3, #16]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d10d      	bne.n	800d75a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d746:	f107 0208 	add.w	r2, r7, #8
 800d74a:	4610      	mov	r0, r2
 800d74c:	4798      	blx	r3
 800d74e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	3301      	adds	r3, #1
 800d754:	2207      	movs	r2, #7
 800d756:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d758:	e00f      	b.n	800d77a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d75a:	6839      	ldr	r1, [r7, #0]
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 f9f7 	bl	800db50 <USBD_CtlError>
        err++;
 800d762:	7afb      	ldrb	r3, [r7, #11]
 800d764:	3301      	adds	r3, #1
 800d766:	72fb      	strb	r3, [r7, #11]
      break;
 800d768:	e007      	b.n	800d77a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d76a:	6839      	ldr	r1, [r7, #0]
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 f9ef 	bl	800db50 <USBD_CtlError>
      err++;
 800d772:	7afb      	ldrb	r3, [r7, #11]
 800d774:	3301      	adds	r3, #1
 800d776:	72fb      	strb	r3, [r7, #11]
      break;
 800d778:	bf00      	nop
  }

  if (err != 0U)
 800d77a:	7afb      	ldrb	r3, [r7, #11]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d11e      	bne.n	800d7be <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	88db      	ldrh	r3, [r3, #6]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d016      	beq.n	800d7b6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d788:	893b      	ldrh	r3, [r7, #8]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d00e      	beq.n	800d7ac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	88da      	ldrh	r2, [r3, #6]
 800d792:	893b      	ldrh	r3, [r7, #8]
 800d794:	4293      	cmp	r3, r2
 800d796:	bf28      	it	cs
 800d798:	4613      	movcs	r3, r2
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d79e:	893b      	ldrh	r3, [r7, #8]
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	68f9      	ldr	r1, [r7, #12]
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f000 fa44 	bl	800dc32 <USBD_CtlSendData>
 800d7aa:	e009      	b.n	800d7c0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d7ac:	6839      	ldr	r1, [r7, #0]
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 f9ce 	bl	800db50 <USBD_CtlError>
 800d7b4:	e004      	b.n	800d7c0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 fa95 	bl	800dce6 <USBD_CtlSendStatus>
 800d7bc:	e000      	b.n	800d7c0 <USBD_GetDescriptor+0x320>
    return;
 800d7be:	bf00      	nop
  }
}
 800d7c0:	3710      	adds	r7, #16
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop

0800d7c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	889b      	ldrh	r3, [r3, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d131      	bne.n	800d83e <USBD_SetAddress+0x76>
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	88db      	ldrh	r3, [r3, #6]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d12d      	bne.n	800d83e <USBD_SetAddress+0x76>
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	885b      	ldrh	r3, [r3, #2]
 800d7e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800d7e8:	d829      	bhi.n	800d83e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	885b      	ldrh	r3, [r3, #2]
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	2b03      	cmp	r3, #3
 800d800:	d104      	bne.n	800d80c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d802:	6839      	ldr	r1, [r7, #0]
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f000 f9a3 	bl	800db50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d80a:	e01d      	b.n	800d848 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	7bfa      	ldrb	r2, [r7, #15]
 800d810:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d814:	7bfb      	ldrb	r3, [r7, #15]
 800d816:	4619      	mov	r1, r3
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 fea1 	bl	800e560 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 fa61 	bl	800dce6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d824:	7bfb      	ldrb	r3, [r7, #15]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d004      	beq.n	800d834 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2202      	movs	r2, #2
 800d82e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d832:	e009      	b.n	800d848 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d83c:	e004      	b.n	800d848 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d83e:	6839      	ldr	r1, [r7, #0]
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f000 f985 	bl	800db50 <USBD_CtlError>
  }
}
 800d846:	bf00      	nop
 800d848:	bf00      	nop
 800d84a:	3710      	adds	r7, #16
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d85a:	2300      	movs	r3, #0
 800d85c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	885b      	ldrh	r3, [r3, #2]
 800d862:	b2da      	uxtb	r2, r3
 800d864:	4b4c      	ldr	r3, [pc, #304]	@ (800d998 <USBD_SetConfig+0x148>)
 800d866:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d868:	4b4b      	ldr	r3, [pc, #300]	@ (800d998 <USBD_SetConfig+0x148>)
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d905      	bls.n	800d87c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d870:	6839      	ldr	r1, [r7, #0]
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 f96c 	bl	800db50 <USBD_CtlError>
    return USBD_FAIL;
 800d878:	2303      	movs	r3, #3
 800d87a:	e088      	b.n	800d98e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d882:	b2db      	uxtb	r3, r3
 800d884:	2b02      	cmp	r3, #2
 800d886:	d002      	beq.n	800d88e <USBD_SetConfig+0x3e>
 800d888:	2b03      	cmp	r3, #3
 800d88a:	d025      	beq.n	800d8d8 <USBD_SetConfig+0x88>
 800d88c:	e071      	b.n	800d972 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d88e:	4b42      	ldr	r3, [pc, #264]	@ (800d998 <USBD_SetConfig+0x148>)
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d01c      	beq.n	800d8d0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d896:	4b40      	ldr	r3, [pc, #256]	@ (800d998 <USBD_SetConfig+0x148>)
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	461a      	mov	r2, r3
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d8a0:	4b3d      	ldr	r3, [pc, #244]	@ (800d998 <USBD_SetConfig+0x148>)
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f7ff f992 	bl	800cbd0 <USBD_SetClassConfig>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d8b0:	7bfb      	ldrb	r3, [r7, #15]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d004      	beq.n	800d8c0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d8b6:	6839      	ldr	r1, [r7, #0]
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 f949 	bl	800db50 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d8be:	e065      	b.n	800d98c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 fa10 	bl	800dce6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2203      	movs	r2, #3
 800d8ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d8ce:	e05d      	b.n	800d98c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f000 fa08 	bl	800dce6 <USBD_CtlSendStatus>
      break;
 800d8d6:	e059      	b.n	800d98c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d8d8:	4b2f      	ldr	r3, [pc, #188]	@ (800d998 <USBD_SetConfig+0x148>)
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d112      	bne.n	800d906 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2202      	movs	r2, #2
 800d8e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d8e8:	4b2b      	ldr	r3, [pc, #172]	@ (800d998 <USBD_SetConfig+0x148>)
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d8f2:	4b29      	ldr	r3, [pc, #164]	@ (800d998 <USBD_SetConfig+0x148>)
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f7ff f985 	bl	800cc08 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 f9f1 	bl	800dce6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d904:	e042      	b.n	800d98c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d906:	4b24      	ldr	r3, [pc, #144]	@ (800d998 <USBD_SetConfig+0x148>)
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	461a      	mov	r2, r3
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	429a      	cmp	r2, r3
 800d912:	d02a      	beq.n	800d96a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	4619      	mov	r1, r3
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f7ff f973 	bl	800cc08 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d922:	4b1d      	ldr	r3, [pc, #116]	@ (800d998 <USBD_SetConfig+0x148>)
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	461a      	mov	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d92c:	4b1a      	ldr	r3, [pc, #104]	@ (800d998 <USBD_SetConfig+0x148>)
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	4619      	mov	r1, r3
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f7ff f94c 	bl	800cbd0 <USBD_SetClassConfig>
 800d938:	4603      	mov	r3, r0
 800d93a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d93c:	7bfb      	ldrb	r3, [r7, #15]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d00f      	beq.n	800d962 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d942:	6839      	ldr	r1, [r7, #0]
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f000 f903 	bl	800db50 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	4619      	mov	r1, r3
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f7ff f958 	bl	800cc08 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2202      	movs	r2, #2
 800d95c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d960:	e014      	b.n	800d98c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 f9bf 	bl	800dce6 <USBD_CtlSendStatus>
      break;
 800d968:	e010      	b.n	800d98c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 f9bb 	bl	800dce6 <USBD_CtlSendStatus>
      break;
 800d970:	e00c      	b.n	800d98c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d972:	6839      	ldr	r1, [r7, #0]
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 f8eb 	bl	800db50 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d97a:	4b07      	ldr	r3, [pc, #28]	@ (800d998 <USBD_SetConfig+0x148>)
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	4619      	mov	r1, r3
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f7ff f941 	bl	800cc08 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d986:	2303      	movs	r3, #3
 800d988:	73fb      	strb	r3, [r7, #15]
      break;
 800d98a:	bf00      	nop
  }

  return ret;
 800d98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3710      	adds	r7, #16
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	20000ac8 	.word	0x20000ac8

0800d99c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	88db      	ldrh	r3, [r3, #6]
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d004      	beq.n	800d9b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d9ae:	6839      	ldr	r1, [r7, #0]
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 f8cd 	bl	800db50 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d9b6:	e023      	b.n	800da00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	2b02      	cmp	r3, #2
 800d9c2:	dc02      	bgt.n	800d9ca <USBD_GetConfig+0x2e>
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	dc03      	bgt.n	800d9d0 <USBD_GetConfig+0x34>
 800d9c8:	e015      	b.n	800d9f6 <USBD_GetConfig+0x5a>
 800d9ca:	2b03      	cmp	r3, #3
 800d9cc:	d00b      	beq.n	800d9e6 <USBD_GetConfig+0x4a>
 800d9ce:	e012      	b.n	800d9f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	3308      	adds	r3, #8
 800d9da:	2201      	movs	r2, #1
 800d9dc:	4619      	mov	r1, r3
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 f927 	bl	800dc32 <USBD_CtlSendData>
        break;
 800d9e4:	e00c      	b.n	800da00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	3304      	adds	r3, #4
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f000 f91f 	bl	800dc32 <USBD_CtlSendData>
        break;
 800d9f4:	e004      	b.n	800da00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d9f6:	6839      	ldr	r1, [r7, #0]
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 f8a9 	bl	800db50 <USBD_CtlError>
        break;
 800d9fe:	bf00      	nop
}
 800da00:	bf00      	nop
 800da02:	3708      	adds	r7, #8
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	3b01      	subs	r3, #1
 800da1c:	2b02      	cmp	r3, #2
 800da1e:	d81e      	bhi.n	800da5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	88db      	ldrh	r3, [r3, #6]
 800da24:	2b02      	cmp	r3, #2
 800da26:	d004      	beq.n	800da32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800da28:	6839      	ldr	r1, [r7, #0]
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 f890 	bl	800db50 <USBD_CtlError>
        break;
 800da30:	e01a      	b.n	800da68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2201      	movs	r2, #1
 800da36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d005      	beq.n	800da4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	68db      	ldr	r3, [r3, #12]
 800da46:	f043 0202 	orr.w	r2, r3, #2
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	330c      	adds	r3, #12
 800da52:	2202      	movs	r2, #2
 800da54:	4619      	mov	r1, r3
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f000 f8eb 	bl	800dc32 <USBD_CtlSendData>
      break;
 800da5c:	e004      	b.n	800da68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800da5e:	6839      	ldr	r1, [r7, #0]
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 f875 	bl	800db50 <USBD_CtlError>
      break;
 800da66:	bf00      	nop
  }
}
 800da68:	bf00      	nop
 800da6a:	3708      	adds	r7, #8
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	885b      	ldrh	r3, [r3, #2]
 800da7e:	2b01      	cmp	r3, #1
 800da80:	d106      	bne.n	800da90 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2201      	movs	r2, #1
 800da86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 f92b 	bl	800dce6 <USBD_CtlSendStatus>
  }
}
 800da90:	bf00      	nop
 800da92:	3708      	adds	r7, #8
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	3b01      	subs	r3, #1
 800daac:	2b02      	cmp	r3, #2
 800daae:	d80b      	bhi.n	800dac8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	885b      	ldrh	r3, [r3, #2]
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d10c      	bne.n	800dad2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2200      	movs	r2, #0
 800dabc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f000 f910 	bl	800dce6 <USBD_CtlSendStatus>
      }
      break;
 800dac6:	e004      	b.n	800dad2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dac8:	6839      	ldr	r1, [r7, #0]
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f000 f840 	bl	800db50 <USBD_CtlError>
      break;
 800dad0:	e000      	b.n	800dad4 <USBD_ClrFeature+0x3c>
      break;
 800dad2:	bf00      	nop
  }
}
 800dad4:	bf00      	nop
 800dad6:	3708      	adds	r7, #8
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	781a      	ldrb	r2, [r3, #0]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	3301      	adds	r3, #1
 800daf6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	781a      	ldrb	r2, [r3, #0]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	3301      	adds	r3, #1
 800db04:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800db06:	68f8      	ldr	r0, [r7, #12]
 800db08:	f7ff fa92 	bl	800d030 <SWAPBYTE>
 800db0c:	4603      	mov	r3, r0
 800db0e:	461a      	mov	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	3301      	adds	r3, #1
 800db18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	3301      	adds	r3, #1
 800db1e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f7ff fa85 	bl	800d030 <SWAPBYTE>
 800db26:	4603      	mov	r3, r0
 800db28:	461a      	mov	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	3301      	adds	r3, #1
 800db32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	3301      	adds	r3, #1
 800db38:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f7ff fa78 	bl	800d030 <SWAPBYTE>
 800db40:	4603      	mov	r3, r0
 800db42:	461a      	mov	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	80da      	strh	r2, [r3, #6]
}
 800db48:	bf00      	nop
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800db5a:	2180      	movs	r1, #128	@ 0x80
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 fc95 	bl	800e48c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800db62:	2100      	movs	r1, #0
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f000 fc91 	bl	800e48c <USBD_LL_StallEP>
}
 800db6a:	bf00      	nop
 800db6c:	3708      	adds	r7, #8
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}

0800db72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800db72:	b580      	push	{r7, lr}
 800db74:	b086      	sub	sp, #24
 800db76:	af00      	add	r7, sp, #0
 800db78:	60f8      	str	r0, [r7, #12]
 800db7a:	60b9      	str	r1, [r7, #8]
 800db7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800db7e:	2300      	movs	r3, #0
 800db80:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d036      	beq.n	800dbf6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800db8c:	6938      	ldr	r0, [r7, #16]
 800db8e:	f000 f836 	bl	800dbfe <USBD_GetLen>
 800db92:	4603      	mov	r3, r0
 800db94:	3301      	adds	r3, #1
 800db96:	b29b      	uxth	r3, r3
 800db98:	005b      	lsls	r3, r3, #1
 800db9a:	b29a      	uxth	r2, r3
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dba0:	7dfb      	ldrb	r3, [r7, #23]
 800dba2:	68ba      	ldr	r2, [r7, #8]
 800dba4:	4413      	add	r3, r2
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	7812      	ldrb	r2, [r2, #0]
 800dbaa:	701a      	strb	r2, [r3, #0]
  idx++;
 800dbac:	7dfb      	ldrb	r3, [r7, #23]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dbb2:	7dfb      	ldrb	r3, [r7, #23]
 800dbb4:	68ba      	ldr	r2, [r7, #8]
 800dbb6:	4413      	add	r3, r2
 800dbb8:	2203      	movs	r2, #3
 800dbba:	701a      	strb	r2, [r3, #0]
  idx++;
 800dbbc:	7dfb      	ldrb	r3, [r7, #23]
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dbc2:	e013      	b.n	800dbec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dbc4:	7dfb      	ldrb	r3, [r7, #23]
 800dbc6:	68ba      	ldr	r2, [r7, #8]
 800dbc8:	4413      	add	r3, r2
 800dbca:	693a      	ldr	r2, [r7, #16]
 800dbcc:	7812      	ldrb	r2, [r2, #0]
 800dbce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	613b      	str	r3, [r7, #16]
    idx++;
 800dbd6:	7dfb      	ldrb	r3, [r7, #23]
 800dbd8:	3301      	adds	r3, #1
 800dbda:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dbdc:	7dfb      	ldrb	r3, [r7, #23]
 800dbde:	68ba      	ldr	r2, [r7, #8]
 800dbe0:	4413      	add	r3, r2
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	701a      	strb	r2, [r3, #0]
    idx++;
 800dbe6:	7dfb      	ldrb	r3, [r7, #23]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d1e7      	bne.n	800dbc4 <USBD_GetString+0x52>
 800dbf4:	e000      	b.n	800dbf8 <USBD_GetString+0x86>
    return;
 800dbf6:	bf00      	nop
  }
}
 800dbf8:	3718      	adds	r7, #24
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}

0800dbfe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dbfe:	b480      	push	{r7}
 800dc00:	b085      	sub	sp, #20
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dc06:	2300      	movs	r3, #0
 800dc08:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dc0e:	e005      	b.n	800dc1c <USBD_GetLen+0x1e>
  {
    len++;
 800dc10:	7bfb      	ldrb	r3, [r7, #15]
 800dc12:	3301      	adds	r3, #1
 800dc14:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	3301      	adds	r3, #1
 800dc1a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d1f5      	bne.n	800dc10 <USBD_GetLen+0x12>
  }

  return len;
 800dc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3714      	adds	r7, #20
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr

0800dc32 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b084      	sub	sp, #16
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	60f8      	str	r0, [r7, #12]
 800dc3a:	60b9      	str	r1, [r7, #8]
 800dc3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2202      	movs	r2, #2
 800dc42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	687a      	ldr	r2, [r7, #4]
 800dc50:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	68ba      	ldr	r2, [r7, #8]
 800dc56:	2100      	movs	r1, #0
 800dc58:	68f8      	ldr	r0, [r7, #12]
 800dc5a:	f000 fca0 	bl	800e59e <USBD_LL_Transmit>

  return USBD_OK;
 800dc5e:	2300      	movs	r3, #0
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3710      	adds	r7, #16
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	68ba      	ldr	r2, [r7, #8]
 800dc78:	2100      	movs	r1, #0
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f000 fc8f 	bl	800e59e <USBD_LL_Transmit>

  return USBD_OK;
 800dc80:	2300      	movs	r3, #0
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}

0800dc8a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b084      	sub	sp, #16
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	60f8      	str	r0, [r7, #12]
 800dc92:	60b9      	str	r1, [r7, #8]
 800dc94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2203      	movs	r2, #3
 800dc9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	68ba      	ldr	r2, [r7, #8]
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f000 fc93 	bl	800e5e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcba:	2300      	movs	r3, #0
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3710      	adds	r7, #16
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	68ba      	ldr	r2, [r7, #8]
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	68f8      	ldr	r0, [r7, #12]
 800dcd8:	f000 fc82 	bl	800e5e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcdc:	2300      	movs	r3, #0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b082      	sub	sp, #8
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2204      	movs	r2, #4
 800dcf2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 fc4e 	bl	800e59e <USBD_LL_Transmit>

  return USBD_OK;
 800dd02:	2300      	movs	r3, #0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2205      	movs	r2, #5
 800dd18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	2200      	movs	r2, #0
 800dd20:	2100      	movs	r1, #0
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 fc5c 	bl	800e5e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd28:	2300      	movs	r3, #0
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3708      	adds	r7, #8
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
	...

0800dd34 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800dd38:	2200      	movs	r2, #0
 800dd3a:	4912      	ldr	r1, [pc, #72]	@ (800dd84 <MX_USB_Device_Init+0x50>)
 800dd3c:	4812      	ldr	r0, [pc, #72]	@ (800dd88 <MX_USB_Device_Init+0x54>)
 800dd3e:	f7fe fed9 	bl	800caf4 <USBD_Init>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d001      	beq.n	800dd4c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800dd48:	f7f4 f886 	bl	8001e58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800dd4c:	490f      	ldr	r1, [pc, #60]	@ (800dd8c <MX_USB_Device_Init+0x58>)
 800dd4e:	480e      	ldr	r0, [pc, #56]	@ (800dd88 <MX_USB_Device_Init+0x54>)
 800dd50:	f7fe ff00 	bl	800cb54 <USBD_RegisterClass>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d001      	beq.n	800dd5e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800dd5a:	f7f4 f87d 	bl	8001e58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800dd5e:	490c      	ldr	r1, [pc, #48]	@ (800dd90 <MX_USB_Device_Init+0x5c>)
 800dd60:	4809      	ldr	r0, [pc, #36]	@ (800dd88 <MX_USB_Device_Init+0x54>)
 800dd62:	f7fe fe21 	bl	800c9a8 <USBD_CDC_RegisterInterface>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d001      	beq.n	800dd70 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800dd6c:	f7f4 f874 	bl	8001e58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800dd70:	4805      	ldr	r0, [pc, #20]	@ (800dd88 <MX_USB_Device_Init+0x54>)
 800dd72:	f7fe ff16 	bl	800cba2 <USBD_Start>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d001      	beq.n	800dd80 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800dd7c:	f7f4 f86c 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800dd80:	bf00      	nop
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	20000524 	.word	0x20000524
 800dd88:	20000acc 	.word	0x20000acc
 800dd8c:	2000040c 	.word	0x2000040c
 800dd90:	20000510 	.word	0x20000510

0800dd94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dd98:	2200      	movs	r2, #0
 800dd9a:	4905      	ldr	r1, [pc, #20]	@ (800ddb0 <CDC_Init_FS+0x1c>)
 800dd9c:	4805      	ldr	r0, [pc, #20]	@ (800ddb4 <CDC_Init_FS+0x20>)
 800dd9e:	f7fe fe18 	bl	800c9d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dda2:	4905      	ldr	r1, [pc, #20]	@ (800ddb8 <CDC_Init_FS+0x24>)
 800dda4:	4803      	ldr	r0, [pc, #12]	@ (800ddb4 <CDC_Init_FS+0x20>)
 800dda6:	f7fe fe32 	bl	800ca0e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ddaa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	2000119c 	.word	0x2000119c
 800ddb4:	20000acc 	.word	0x20000acc
 800ddb8:	20000d9c 	.word	0x20000d9c

0800ddbc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ddc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr

0800ddcc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	6039      	str	r1, [r7, #0]
 800ddd6:	71fb      	strb	r3, [r7, #7]
 800ddd8:	4613      	mov	r3, r2
 800ddda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dddc:	79fb      	ldrb	r3, [r7, #7]
 800ddde:	2b23      	cmp	r3, #35	@ 0x23
 800dde0:	d84a      	bhi.n	800de78 <CDC_Control_FS+0xac>
 800dde2:	a201      	add	r2, pc, #4	@ (adr r2, 800dde8 <CDC_Control_FS+0x1c>)
 800dde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde8:	0800de79 	.word	0x0800de79
 800ddec:	0800de79 	.word	0x0800de79
 800ddf0:	0800de79 	.word	0x0800de79
 800ddf4:	0800de79 	.word	0x0800de79
 800ddf8:	0800de79 	.word	0x0800de79
 800ddfc:	0800de79 	.word	0x0800de79
 800de00:	0800de79 	.word	0x0800de79
 800de04:	0800de79 	.word	0x0800de79
 800de08:	0800de79 	.word	0x0800de79
 800de0c:	0800de79 	.word	0x0800de79
 800de10:	0800de79 	.word	0x0800de79
 800de14:	0800de79 	.word	0x0800de79
 800de18:	0800de79 	.word	0x0800de79
 800de1c:	0800de79 	.word	0x0800de79
 800de20:	0800de79 	.word	0x0800de79
 800de24:	0800de79 	.word	0x0800de79
 800de28:	0800de79 	.word	0x0800de79
 800de2c:	0800de79 	.word	0x0800de79
 800de30:	0800de79 	.word	0x0800de79
 800de34:	0800de79 	.word	0x0800de79
 800de38:	0800de79 	.word	0x0800de79
 800de3c:	0800de79 	.word	0x0800de79
 800de40:	0800de79 	.word	0x0800de79
 800de44:	0800de79 	.word	0x0800de79
 800de48:	0800de79 	.word	0x0800de79
 800de4c:	0800de79 	.word	0x0800de79
 800de50:	0800de79 	.word	0x0800de79
 800de54:	0800de79 	.word	0x0800de79
 800de58:	0800de79 	.word	0x0800de79
 800de5c:	0800de79 	.word	0x0800de79
 800de60:	0800de79 	.word	0x0800de79
 800de64:	0800de79 	.word	0x0800de79
 800de68:	0800de79 	.word	0x0800de79
 800de6c:	0800de79 	.word	0x0800de79
 800de70:	0800de79 	.word	0x0800de79
 800de74:	0800de79 	.word	0x0800de79
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800de78:	bf00      	nop
  }

  return (USBD_OK);
 800de7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	370c      	adds	r7, #12
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800de92:	6879      	ldr	r1, [r7, #4]
 800de94:	4805      	ldr	r0, [pc, #20]	@ (800deac <CDC_Receive_FS+0x24>)
 800de96:	f7fe fdba 	bl	800ca0e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800de9a:	4804      	ldr	r0, [pc, #16]	@ (800deac <CDC_Receive_FS+0x24>)
 800de9c:	f7fe fe00 	bl	800caa0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dea0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3708      	adds	r7, #8
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop
 800deac:	20000acc 	.word	0x20000acc

0800deb0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	460b      	mov	r3, r1
 800deba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800debc:	2300      	movs	r3, #0
 800debe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dec0:	4b0d      	ldr	r3, [pc, #52]	@ (800def8 <CDC_Transmit_FS+0x48>)
 800dec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dec6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d001      	beq.n	800ded6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ded2:	2301      	movs	r3, #1
 800ded4:	e00b      	b.n	800deee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ded6:	887b      	ldrh	r3, [r7, #2]
 800ded8:	461a      	mov	r2, r3
 800deda:	6879      	ldr	r1, [r7, #4]
 800dedc:	4806      	ldr	r0, [pc, #24]	@ (800def8 <CDC_Transmit_FS+0x48>)
 800dede:	f7fe fd78 	bl	800c9d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dee2:	4805      	ldr	r0, [pc, #20]	@ (800def8 <CDC_Transmit_FS+0x48>)
 800dee4:	f7fe fdac 	bl	800ca40 <USBD_CDC_TransmitPacket>
 800dee8:	4603      	mov	r3, r0
 800deea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800deec:	7bfb      	ldrb	r3, [r7, #15]
}
 800deee:	4618      	mov	r0, r3
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	20000acc 	.word	0x20000acc

0800defc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800defc:	b480      	push	{r7}
 800defe:	b087      	sub	sp, #28
 800df00:	af00      	add	r7, sp, #0
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	4613      	mov	r3, r2
 800df08:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800df0a:	2300      	movs	r3, #0
 800df0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800df0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df12:	4618      	mov	r0, r3
 800df14:	371c      	adds	r7, #28
 800df16:	46bd      	mov	sp, r7
 800df18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1c:	4770      	bx	lr
	...

0800df20 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df20:	b480      	push	{r7}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	4603      	mov	r3, r0
 800df28:	6039      	str	r1, [r7, #0]
 800df2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	2212      	movs	r2, #18
 800df30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800df32:	4b03      	ldr	r3, [pc, #12]	@ (800df40 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800df34:	4618      	mov	r0, r3
 800df36:	370c      	adds	r7, #12
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr
 800df40:	20000544 	.word	0x20000544

0800df44 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
 800df4a:	4603      	mov	r3, r0
 800df4c:	6039      	str	r1, [r7, #0]
 800df4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	2204      	movs	r2, #4
 800df54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800df56:	4b03      	ldr	r3, [pc, #12]	@ (800df64 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800df58:	4618      	mov	r0, r3
 800df5a:	370c      	adds	r7, #12
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr
 800df64:	20000558 	.word	0x20000558

0800df68 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	4603      	mov	r3, r0
 800df70:	6039      	str	r1, [r7, #0]
 800df72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800df74:	79fb      	ldrb	r3, [r7, #7]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d105      	bne.n	800df86 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800df7a:	683a      	ldr	r2, [r7, #0]
 800df7c:	4907      	ldr	r1, [pc, #28]	@ (800df9c <USBD_CDC_ProductStrDescriptor+0x34>)
 800df7e:	4808      	ldr	r0, [pc, #32]	@ (800dfa0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800df80:	f7ff fdf7 	bl	800db72 <USBD_GetString>
 800df84:	e004      	b.n	800df90 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800df86:	683a      	ldr	r2, [r7, #0]
 800df88:	4904      	ldr	r1, [pc, #16]	@ (800df9c <USBD_CDC_ProductStrDescriptor+0x34>)
 800df8a:	4805      	ldr	r0, [pc, #20]	@ (800dfa0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800df8c:	f7ff fdf1 	bl	800db72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800df90:	4b02      	ldr	r3, [pc, #8]	@ (800df9c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800df92:	4618      	mov	r0, r3
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	2000159c 	.word	0x2000159c
 800dfa0:	08011418 	.word	0x08011418

0800dfa4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	4603      	mov	r3, r0
 800dfac:	6039      	str	r1, [r7, #0]
 800dfae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dfb0:	683a      	ldr	r2, [r7, #0]
 800dfb2:	4904      	ldr	r1, [pc, #16]	@ (800dfc4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800dfb4:	4804      	ldr	r0, [pc, #16]	@ (800dfc8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800dfb6:	f7ff fddc 	bl	800db72 <USBD_GetString>
  return USBD_StrDesc;
 800dfba:	4b02      	ldr	r3, [pc, #8]	@ (800dfc4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3708      	adds	r7, #8
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	2000159c 	.word	0x2000159c
 800dfc8:	08011430 	.word	0x08011430

0800dfcc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	6039      	str	r1, [r7, #0]
 800dfd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	221a      	movs	r2, #26
 800dfdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dfde:	f000 f843 	bl	800e068 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800dfe2:	4b02      	ldr	r3, [pc, #8]	@ (800dfec <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	2000055c 	.word	0x2000055c

0800dff0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b082      	sub	sp, #8
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	4603      	mov	r3, r0
 800dff8:	6039      	str	r1, [r7, #0]
 800dffa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dffc:	79fb      	ldrb	r3, [r7, #7]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d105      	bne.n	800e00e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e002:	683a      	ldr	r2, [r7, #0]
 800e004:	4907      	ldr	r1, [pc, #28]	@ (800e024 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e006:	4808      	ldr	r0, [pc, #32]	@ (800e028 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e008:	f7ff fdb3 	bl	800db72 <USBD_GetString>
 800e00c:	e004      	b.n	800e018 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e00e:	683a      	ldr	r2, [r7, #0]
 800e010:	4904      	ldr	r1, [pc, #16]	@ (800e024 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e012:	4805      	ldr	r0, [pc, #20]	@ (800e028 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e014:	f7ff fdad 	bl	800db72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e018:	4b02      	ldr	r3, [pc, #8]	@ (800e024 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3708      	adds	r7, #8
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop
 800e024:	2000159c 	.word	0x2000159c
 800e028:	08011444 	.word	0x08011444

0800e02c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	4603      	mov	r3, r0
 800e034:	6039      	str	r1, [r7, #0]
 800e036:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e038:	79fb      	ldrb	r3, [r7, #7]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d105      	bne.n	800e04a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e03e:	683a      	ldr	r2, [r7, #0]
 800e040:	4907      	ldr	r1, [pc, #28]	@ (800e060 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e042:	4808      	ldr	r0, [pc, #32]	@ (800e064 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e044:	f7ff fd95 	bl	800db72 <USBD_GetString>
 800e048:	e004      	b.n	800e054 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e04a:	683a      	ldr	r2, [r7, #0]
 800e04c:	4904      	ldr	r1, [pc, #16]	@ (800e060 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e04e:	4805      	ldr	r0, [pc, #20]	@ (800e064 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e050:	f7ff fd8f 	bl	800db72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e054:	4b02      	ldr	r3, [pc, #8]	@ (800e060 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800e056:	4618      	mov	r0, r3
 800e058:	3708      	adds	r7, #8
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	2000159c 	.word	0x2000159c
 800e064:	08011450 	.word	0x08011450

0800e068 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b084      	sub	sp, #16
 800e06c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e06e:	4b0f      	ldr	r3, [pc, #60]	@ (800e0ac <Get_SerialNum+0x44>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e074:	4b0e      	ldr	r3, [pc, #56]	@ (800e0b0 <Get_SerialNum+0x48>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e07a:	4b0e      	ldr	r3, [pc, #56]	@ (800e0b4 <Get_SerialNum+0x4c>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e080:	68fa      	ldr	r2, [r7, #12]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	4413      	add	r3, r2
 800e086:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d009      	beq.n	800e0a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e08e:	2208      	movs	r2, #8
 800e090:	4909      	ldr	r1, [pc, #36]	@ (800e0b8 <Get_SerialNum+0x50>)
 800e092:	68f8      	ldr	r0, [r7, #12]
 800e094:	f000 f814 	bl	800e0c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e098:	2204      	movs	r2, #4
 800e09a:	4908      	ldr	r1, [pc, #32]	@ (800e0bc <Get_SerialNum+0x54>)
 800e09c:	68b8      	ldr	r0, [r7, #8]
 800e09e:	f000 f80f 	bl	800e0c0 <IntToUnicode>
  }
}
 800e0a2:	bf00      	nop
 800e0a4:	3710      	adds	r7, #16
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
 800e0aa:	bf00      	nop
 800e0ac:	1fff7590 	.word	0x1fff7590
 800e0b0:	1fff7594 	.word	0x1fff7594
 800e0b4:	1fff7598 	.word	0x1fff7598
 800e0b8:	2000055e 	.word	0x2000055e
 800e0bc:	2000056e 	.word	0x2000056e

0800e0c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b087      	sub	sp, #28
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	60f8      	str	r0, [r7, #12]
 800e0c8:	60b9      	str	r1, [r7, #8]
 800e0ca:	4613      	mov	r3, r2
 800e0cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	75fb      	strb	r3, [r7, #23]
 800e0d6:	e027      	b.n	800e128 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	0f1b      	lsrs	r3, r3, #28
 800e0dc:	2b09      	cmp	r3, #9
 800e0de:	d80b      	bhi.n	800e0f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	0f1b      	lsrs	r3, r3, #28
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	7dfb      	ldrb	r3, [r7, #23]
 800e0e8:	005b      	lsls	r3, r3, #1
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	440b      	add	r3, r1
 800e0f0:	3230      	adds	r2, #48	@ 0x30
 800e0f2:	b2d2      	uxtb	r2, r2
 800e0f4:	701a      	strb	r2, [r3, #0]
 800e0f6:	e00a      	b.n	800e10e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	0f1b      	lsrs	r3, r3, #28
 800e0fc:	b2da      	uxtb	r2, r3
 800e0fe:	7dfb      	ldrb	r3, [r7, #23]
 800e100:	005b      	lsls	r3, r3, #1
 800e102:	4619      	mov	r1, r3
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	440b      	add	r3, r1
 800e108:	3237      	adds	r2, #55	@ 0x37
 800e10a:	b2d2      	uxtb	r2, r2
 800e10c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	011b      	lsls	r3, r3, #4
 800e112:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e114:	7dfb      	ldrb	r3, [r7, #23]
 800e116:	005b      	lsls	r3, r3, #1
 800e118:	3301      	adds	r3, #1
 800e11a:	68ba      	ldr	r2, [r7, #8]
 800e11c:	4413      	add	r3, r2
 800e11e:	2200      	movs	r2, #0
 800e120:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e122:	7dfb      	ldrb	r3, [r7, #23]
 800e124:	3301      	adds	r3, #1
 800e126:	75fb      	strb	r3, [r7, #23]
 800e128:	7dfa      	ldrb	r2, [r7, #23]
 800e12a:	79fb      	ldrb	r3, [r7, #7]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d3d3      	bcc.n	800e0d8 <IntToUnicode+0x18>
  }
}
 800e130:	bf00      	nop
 800e132:	bf00      	nop
 800e134:	371c      	adds	r7, #28
 800e136:	46bd      	mov	sp, r7
 800e138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13c:	4770      	bx	lr
	...

0800e140 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b094      	sub	sp, #80	@ 0x50
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e148:	f107 030c 	add.w	r3, r7, #12
 800e14c:	2244      	movs	r2, #68	@ 0x44
 800e14e:	2100      	movs	r1, #0
 800e150:	4618      	mov	r0, r3
 800e152:	f001 f876 	bl	800f242 <memset>
  if(pcdHandle->Instance==USB)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4a15      	ldr	r2, [pc, #84]	@ (800e1b0 <HAL_PCD_MspInit+0x70>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d122      	bne.n	800e1a6 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e160:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e164:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e166:	2300      	movs	r3, #0
 800e168:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e16a:	f107 030c 	add.w	r3, r7, #12
 800e16e:	4618      	mov	r0, r3
 800e170:	f7f9 f974 	bl	800745c <HAL_RCCEx_PeriphCLKConfig>
 800e174:	4603      	mov	r3, r0
 800e176:	2b00      	cmp	r3, #0
 800e178:	d001      	beq.n	800e17e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800e17a:	f7f3 fe6d 	bl	8001e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e17e:	4b0d      	ldr	r3, [pc, #52]	@ (800e1b4 <HAL_PCD_MspInit+0x74>)
 800e180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e182:	4a0c      	ldr	r2, [pc, #48]	@ (800e1b4 <HAL_PCD_MspInit+0x74>)
 800e184:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e188:	6593      	str	r3, [r2, #88]	@ 0x58
 800e18a:	4b0a      	ldr	r3, [pc, #40]	@ (800e1b4 <HAL_PCD_MspInit+0x74>)
 800e18c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e18e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e192:	60bb      	str	r3, [r7, #8]
 800e194:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e196:	2200      	movs	r2, #0
 800e198:	2100      	movs	r1, #0
 800e19a:	2014      	movs	r0, #20
 800e19c:	f7f6 f8d3 	bl	8004346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e1a0:	2014      	movs	r0, #20
 800e1a2:	f7f6 f8ea 	bl	800437a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e1a6:	bf00      	nop
 800e1a8:	3750      	adds	r7, #80	@ 0x50
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	40005c00 	.word	0x40005c00
 800e1b4:	40021000 	.word	0x40021000

0800e1b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	4610      	mov	r0, r2
 800e1d0:	f7fe fd32 	bl	800cc38 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e1d4:	bf00      	nop
 800e1d6:	3708      	adds	r7, #8
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e1ee:	78fa      	ldrb	r2, [r7, #3]
 800e1f0:	6879      	ldr	r1, [r7, #4]
 800e1f2:	4613      	mov	r3, r2
 800e1f4:	009b      	lsls	r3, r3, #2
 800e1f6:	4413      	add	r3, r2
 800e1f8:	00db      	lsls	r3, r3, #3
 800e1fa:	440b      	add	r3, r1
 800e1fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	78fb      	ldrb	r3, [r7, #3]
 800e204:	4619      	mov	r1, r3
 800e206:	f7fe fd6c 	bl	800cce2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e20a:	bf00      	nop
 800e20c:	3708      	adds	r7, #8
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}

0800e212 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e212:	b580      	push	{r7, lr}
 800e214:	b082      	sub	sp, #8
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
 800e21a:	460b      	mov	r3, r1
 800e21c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e224:	78fa      	ldrb	r2, [r7, #3]
 800e226:	6879      	ldr	r1, [r7, #4]
 800e228:	4613      	mov	r3, r2
 800e22a:	009b      	lsls	r3, r3, #2
 800e22c:	4413      	add	r3, r2
 800e22e:	00db      	lsls	r3, r3, #3
 800e230:	440b      	add	r3, r1
 800e232:	3324      	adds	r3, #36	@ 0x24
 800e234:	681a      	ldr	r2, [r3, #0]
 800e236:	78fb      	ldrb	r3, [r7, #3]
 800e238:	4619      	mov	r1, r3
 800e23a:	f7fe fdb5 	bl	800cda8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e23e:	bf00      	nop
 800e240:	3708      	adds	r7, #8
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b082      	sub	sp, #8
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e254:	4618      	mov	r0, r3
 800e256:	f7fe fec9 	bl	800cfec <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e25a:	bf00      	nop
 800e25c:	3708      	adds	r7, #8
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e262:	b580      	push	{r7, lr}
 800e264:	b084      	sub	sp, #16
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e26a:	2301      	movs	r3, #1
 800e26c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	795b      	ldrb	r3, [r3, #5]
 800e272:	2b02      	cmp	r3, #2
 800e274:	d001      	beq.n	800e27a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e276:	f7f3 fdef 	bl	8001e58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e280:	7bfa      	ldrb	r2, [r7, #15]
 800e282:	4611      	mov	r1, r2
 800e284:	4618      	mov	r0, r3
 800e286:	f7fe fe73 	bl	800cf70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e290:	4618      	mov	r0, r3
 800e292:	f7fe fe1f 	bl	800ced4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e296:	bf00      	nop
 800e298:	3710      	adds	r7, #16
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
	...

0800e2a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7fe fe6e 	bl	800cf90 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	7a5b      	ldrb	r3, [r3, #9]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d005      	beq.n	800e2c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e2bc:	4b04      	ldr	r3, [pc, #16]	@ (800e2d0 <HAL_PCD_SuspendCallback+0x30>)
 800e2be:	691b      	ldr	r3, [r3, #16]
 800e2c0:	4a03      	ldr	r2, [pc, #12]	@ (800e2d0 <HAL_PCD_SuspendCallback+0x30>)
 800e2c2:	f043 0306 	orr.w	r3, r3, #6
 800e2c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e2c8:	bf00      	nop
 800e2ca:	3708      	adds	r7, #8
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	e000ed00 	.word	0xe000ed00

0800e2d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	7a5b      	ldrb	r3, [r3, #9]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d007      	beq.n	800e2f4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e2e4:	4b08      	ldr	r3, [pc, #32]	@ (800e308 <HAL_PCD_ResumeCallback+0x34>)
 800e2e6:	691b      	ldr	r3, [r3, #16]
 800e2e8:	4a07      	ldr	r2, [pc, #28]	@ (800e308 <HAL_PCD_ResumeCallback+0x34>)
 800e2ea:	f023 0306 	bic.w	r3, r3, #6
 800e2ee:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e2f0:	f000 f9f8 	bl	800e6e4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7fe fe5e 	bl	800cfbc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e300:	bf00      	nop
 800e302:	3708      	adds	r7, #8
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	e000ed00 	.word	0xe000ed00

0800e30c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e314:	4a2b      	ldr	r2, [pc, #172]	@ (800e3c4 <USBD_LL_Init+0xb8>)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	4a29      	ldr	r2, [pc, #164]	@ (800e3c4 <USBD_LL_Init+0xb8>)
 800e320:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e324:	4b27      	ldr	r3, [pc, #156]	@ (800e3c4 <USBD_LL_Init+0xb8>)
 800e326:	4a28      	ldr	r2, [pc, #160]	@ (800e3c8 <USBD_LL_Init+0xbc>)
 800e328:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e32a:	4b26      	ldr	r3, [pc, #152]	@ (800e3c4 <USBD_LL_Init+0xb8>)
 800e32c:	2208      	movs	r2, #8
 800e32e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e330:	4b24      	ldr	r3, [pc, #144]	@ (800e3c4 <USBD_LL_Init+0xb8>)
 800e332:	2202      	movs	r2, #2
 800e334:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e336:	4b23      	ldr	r3, [pc, #140]	@ (800e3c4 <USBD_LL_Init+0xb8>)
 800e338:	2202      	movs	r2, #2
 800e33a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e33c:	4b21      	ldr	r3, [pc, #132]	@ (800e3c4 <USBD_LL_Init+0xb8>)
 800e33e:	2200      	movs	r2, #0
 800e340:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e342:	4b20      	ldr	r3, [pc, #128]	@ (800e3c4 <USBD_LL_Init+0xb8>)
 800e344:	2200      	movs	r2, #0
 800e346:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e348:	4b1e      	ldr	r3, [pc, #120]	@ (800e3c4 <USBD_LL_Init+0xb8>)
 800e34a:	2200      	movs	r2, #0
 800e34c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e34e:	4b1d      	ldr	r3, [pc, #116]	@ (800e3c4 <USBD_LL_Init+0xb8>)
 800e350:	2200      	movs	r2, #0
 800e352:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e354:	481b      	ldr	r0, [pc, #108]	@ (800e3c4 <USBD_LL_Init+0xb8>)
 800e356:	f7f6 fd69 	bl	8004e2c <HAL_PCD_Init>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d001      	beq.n	800e364 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800e360:	f7f3 fd7a 	bl	8001e58 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e36a:	2318      	movs	r3, #24
 800e36c:	2200      	movs	r2, #0
 800e36e:	2100      	movs	r1, #0
 800e370:	f7f8 fa24 	bl	80067bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e37a:	2358      	movs	r3, #88	@ 0x58
 800e37c:	2200      	movs	r2, #0
 800e37e:	2180      	movs	r1, #128	@ 0x80
 800e380:	f7f8 fa1c 	bl	80067bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e38a:	23c0      	movs	r3, #192	@ 0xc0
 800e38c:	2200      	movs	r2, #0
 800e38e:	2181      	movs	r1, #129	@ 0x81
 800e390:	f7f8 fa14 	bl	80067bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e39a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e39e:	2200      	movs	r2, #0
 800e3a0:	2101      	movs	r1, #1
 800e3a2:	f7f8 fa0b 	bl	80067bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e3ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	2182      	movs	r1, #130	@ 0x82
 800e3b4:	f7f8 fa02 	bl	80067bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e3b8:	2300      	movs	r3, #0
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3708      	adds	r7, #8
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	2000179c 	.word	0x2000179c
 800e3c8:	40005c00 	.word	0x40005c00

0800e3cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b084      	sub	sp, #16
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7f6 fdf0 	bl	8004fc8 <HAL_PCD_Start>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3ec:	7bfb      	ldrb	r3, [r7, #15]
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f000 f97e 	bl	800e6f0 <USBD_Get_USB_Status>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3710      	adds	r7, #16
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}

0800e402 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e402:	b580      	push	{r7, lr}
 800e404:	b084      	sub	sp, #16
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
 800e40a:	4608      	mov	r0, r1
 800e40c:	4611      	mov	r1, r2
 800e40e:	461a      	mov	r2, r3
 800e410:	4603      	mov	r3, r0
 800e412:	70fb      	strb	r3, [r7, #3]
 800e414:	460b      	mov	r3, r1
 800e416:	70bb      	strb	r3, [r7, #2]
 800e418:	4613      	mov	r3, r2
 800e41a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e41c:	2300      	movs	r3, #0
 800e41e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e420:	2300      	movs	r3, #0
 800e422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e42a:	78bb      	ldrb	r3, [r7, #2]
 800e42c:	883a      	ldrh	r2, [r7, #0]
 800e42e:	78f9      	ldrb	r1, [r7, #3]
 800e430:	f7f6 ff37 	bl	80052a2 <HAL_PCD_EP_Open>
 800e434:	4603      	mov	r3, r0
 800e436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e438:	7bfb      	ldrb	r3, [r7, #15]
 800e43a:	4618      	mov	r0, r3
 800e43c:	f000 f958 	bl	800e6f0 <USBD_Get_USB_Status>
 800e440:	4603      	mov	r3, r0
 800e442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e444:	7bbb      	ldrb	r3, [r7, #14]
}
 800e446:	4618      	mov	r0, r3
 800e448:	3710      	adds	r7, #16
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e44e:	b580      	push	{r7, lr}
 800e450:	b084      	sub	sp, #16
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
 800e456:	460b      	mov	r3, r1
 800e458:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e45a:	2300      	movs	r3, #0
 800e45c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e45e:	2300      	movs	r3, #0
 800e460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e468:	78fa      	ldrb	r2, [r7, #3]
 800e46a:	4611      	mov	r1, r2
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7f6 ff77 	bl	8005360 <HAL_PCD_EP_Close>
 800e472:	4603      	mov	r3, r0
 800e474:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e476:	7bfb      	ldrb	r3, [r7, #15]
 800e478:	4618      	mov	r0, r3
 800e47a:	f000 f939 	bl	800e6f0 <USBD_Get_USB_Status>
 800e47e:	4603      	mov	r3, r0
 800e480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e482:	7bbb      	ldrb	r3, [r7, #14]
}
 800e484:	4618      	mov	r0, r3
 800e486:	3710      	adds	r7, #16
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	460b      	mov	r3, r1
 800e496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e498:	2300      	movs	r3, #0
 800e49a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e49c:	2300      	movs	r3, #0
 800e49e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e4a6:	78fa      	ldrb	r2, [r7, #3]
 800e4a8:	4611      	mov	r1, r2
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7f7 f820 	bl	80054f0 <HAL_PCD_EP_SetStall>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4b4:	7bfb      	ldrb	r3, [r7, #15]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f000 f91a 	bl	800e6f0 <USBD_Get_USB_Status>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3710      	adds	r7, #16
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}

0800e4ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b084      	sub	sp, #16
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e4e4:	78fa      	ldrb	r2, [r7, #3]
 800e4e6:	4611      	mov	r1, r2
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7f7 f853 	bl	8005594 <HAL_PCD_EP_ClrStall>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4f2:	7bfb      	ldrb	r3, [r7, #15]
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f000 f8fb 	bl	800e6f0 <USBD_Get_USB_Status>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800e500:	4618      	mov	r0, r3
 800e502:	3710      	adds	r7, #16
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e508:	b480      	push	{r7}
 800e50a:	b085      	sub	sp, #20
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	460b      	mov	r3, r1
 800e512:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e51a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e51c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e520:	2b00      	cmp	r3, #0
 800e522:	da0b      	bge.n	800e53c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e524:	78fb      	ldrb	r3, [r7, #3]
 800e526:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e52a:	68f9      	ldr	r1, [r7, #12]
 800e52c:	4613      	mov	r3, r2
 800e52e:	009b      	lsls	r3, r3, #2
 800e530:	4413      	add	r3, r2
 800e532:	00db      	lsls	r3, r3, #3
 800e534:	440b      	add	r3, r1
 800e536:	3312      	adds	r3, #18
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	e00b      	b.n	800e554 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e53c:	78fb      	ldrb	r3, [r7, #3]
 800e53e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e542:	68f9      	ldr	r1, [r7, #12]
 800e544:	4613      	mov	r3, r2
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	4413      	add	r3, r2
 800e54a:	00db      	lsls	r3, r3, #3
 800e54c:	440b      	add	r3, r1
 800e54e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800e552:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e554:	4618      	mov	r0, r3
 800e556:	3714      	adds	r7, #20
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr

0800e560 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b084      	sub	sp, #16
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	460b      	mov	r3, r1
 800e56a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e56c:	2300      	movs	r3, #0
 800e56e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e570:	2300      	movs	r3, #0
 800e572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e57a:	78fa      	ldrb	r2, [r7, #3]
 800e57c:	4611      	mov	r1, r2
 800e57e:	4618      	mov	r0, r3
 800e580:	f7f6 fe6b 	bl	800525a <HAL_PCD_SetAddress>
 800e584:	4603      	mov	r3, r0
 800e586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e588:	7bfb      	ldrb	r3, [r7, #15]
 800e58a:	4618      	mov	r0, r3
 800e58c:	f000 f8b0 	bl	800e6f0 <USBD_Get_USB_Status>
 800e590:	4603      	mov	r3, r0
 800e592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e594:	7bbb      	ldrb	r3, [r7, #14]
}
 800e596:	4618      	mov	r0, r3
 800e598:	3710      	adds	r7, #16
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b086      	sub	sp, #24
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	60f8      	str	r0, [r7, #12]
 800e5a6:	607a      	str	r2, [r7, #4]
 800e5a8:	603b      	str	r3, [r7, #0]
 800e5aa:	460b      	mov	r3, r1
 800e5ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e5bc:	7af9      	ldrb	r1, [r7, #11]
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	687a      	ldr	r2, [r7, #4]
 800e5c2:	f7f6 ff5e 	bl	8005482 <HAL_PCD_EP_Transmit>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5ca:	7dfb      	ldrb	r3, [r7, #23]
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f000 f88f 	bl	800e6f0 <USBD_Get_USB_Status>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e5d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3718      	adds	r7, #24
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b086      	sub	sp, #24
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	60f8      	str	r0, [r7, #12]
 800e5e8:	607a      	str	r2, [r7, #4]
 800e5ea:	603b      	str	r3, [r7, #0]
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e5fe:	7af9      	ldrb	r1, [r7, #11]
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	687a      	ldr	r2, [r7, #4]
 800e604:	f7f6 fef4 	bl	80053f0 <HAL_PCD_EP_Receive>
 800e608:	4603      	mov	r3, r0
 800e60a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e60c:	7dfb      	ldrb	r3, [r7, #23]
 800e60e:	4618      	mov	r0, r3
 800e610:	f000 f86e 	bl	800e6f0 <USBD_Get_USB_Status>
 800e614:	4603      	mov	r3, r0
 800e616:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e618:	7dbb      	ldrb	r3, [r7, #22]
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3718      	adds	r7, #24
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}

0800e622 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e622:	b580      	push	{r7, lr}
 800e624:	b082      	sub	sp, #8
 800e626:	af00      	add	r7, sp, #0
 800e628:	6078      	str	r0, [r7, #4]
 800e62a:	460b      	mov	r3, r1
 800e62c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e634:	78fa      	ldrb	r2, [r7, #3]
 800e636:	4611      	mov	r1, r2
 800e638:	4618      	mov	r0, r3
 800e63a:	f7f6 ff0a 	bl	8005452 <HAL_PCD_EP_GetRxCount>
 800e63e:	4603      	mov	r3, r0
}
 800e640:	4618      	mov	r0, r3
 800e642:	3708      	adds	r7, #8
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	460b      	mov	r3, r1
 800e652:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e654:	78fb      	ldrb	r3, [r7, #3]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d002      	beq.n	800e660 <HAL_PCDEx_LPM_Callback+0x18>
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	d013      	beq.n	800e686 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e65e:	e023      	b.n	800e6a8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	7a5b      	ldrb	r3, [r3, #9]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d007      	beq.n	800e678 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e668:	f000 f83c 	bl	800e6e4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e66c:	4b10      	ldr	r3, [pc, #64]	@ (800e6b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800e66e:	691b      	ldr	r3, [r3, #16]
 800e670:	4a0f      	ldr	r2, [pc, #60]	@ (800e6b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800e672:	f023 0306 	bic.w	r3, r3, #6
 800e676:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e67e:	4618      	mov	r0, r3
 800e680:	f7fe fc9c 	bl	800cfbc <USBD_LL_Resume>
    break;
 800e684:	e010      	b.n	800e6a8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e68c:	4618      	mov	r0, r3
 800e68e:	f7fe fc7f 	bl	800cf90 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	7a5b      	ldrb	r3, [r3, #9]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d005      	beq.n	800e6a6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e69a:	4b05      	ldr	r3, [pc, #20]	@ (800e6b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800e69c:	691b      	ldr	r3, [r3, #16]
 800e69e:	4a04      	ldr	r2, [pc, #16]	@ (800e6b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800e6a0:	f043 0306 	orr.w	r3, r3, #6
 800e6a4:	6113      	str	r3, [r2, #16]
    break;
 800e6a6:	bf00      	nop
}
 800e6a8:	bf00      	nop
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	e000ed00 	.word	0xe000ed00

0800e6b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e6bc:	4b03      	ldr	r3, [pc, #12]	@ (800e6cc <USBD_static_malloc+0x18>)
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	370c      	adds	r7, #12
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr
 800e6ca:	bf00      	nop
 800e6cc:	20001a78 	.word	0x20001a78

0800e6d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]

}
 800e6d8:	bf00      	nop
 800e6da:	370c      	adds	r7, #12
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr

0800e6e4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e6e8:	f7f2 feba 	bl	8001460 <SystemClock_Config>
}
 800e6ec:	bf00      	nop
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b085      	sub	sp, #20
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e6fe:	79fb      	ldrb	r3, [r7, #7]
 800e700:	2b03      	cmp	r3, #3
 800e702:	d817      	bhi.n	800e734 <USBD_Get_USB_Status+0x44>
 800e704:	a201      	add	r2, pc, #4	@ (adr r2, 800e70c <USBD_Get_USB_Status+0x1c>)
 800e706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e70a:	bf00      	nop
 800e70c:	0800e71d 	.word	0x0800e71d
 800e710:	0800e723 	.word	0x0800e723
 800e714:	0800e729 	.word	0x0800e729
 800e718:	0800e72f 	.word	0x0800e72f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e71c:	2300      	movs	r3, #0
 800e71e:	73fb      	strb	r3, [r7, #15]
    break;
 800e720:	e00b      	b.n	800e73a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e722:	2303      	movs	r3, #3
 800e724:	73fb      	strb	r3, [r7, #15]
    break;
 800e726:	e008      	b.n	800e73a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e728:	2301      	movs	r3, #1
 800e72a:	73fb      	strb	r3, [r7, #15]
    break;
 800e72c:	e005      	b.n	800e73a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e72e:	2303      	movs	r3, #3
 800e730:	73fb      	strb	r3, [r7, #15]
    break;
 800e732:	e002      	b.n	800e73a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e734:	2303      	movs	r3, #3
 800e736:	73fb      	strb	r3, [r7, #15]
    break;
 800e738:	bf00      	nop
  }
  return usb_status;
 800e73a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3714      	adds	r7, #20
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr

0800e748 <__cvt>:
 800e748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e74c:	ec57 6b10 	vmov	r6, r7, d0
 800e750:	2f00      	cmp	r7, #0
 800e752:	460c      	mov	r4, r1
 800e754:	4619      	mov	r1, r3
 800e756:	463b      	mov	r3, r7
 800e758:	bfbb      	ittet	lt
 800e75a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e75e:	461f      	movlt	r7, r3
 800e760:	2300      	movge	r3, #0
 800e762:	232d      	movlt	r3, #45	@ 0x2d
 800e764:	700b      	strb	r3, [r1, #0]
 800e766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e768:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e76c:	4691      	mov	r9, r2
 800e76e:	f023 0820 	bic.w	r8, r3, #32
 800e772:	bfbc      	itt	lt
 800e774:	4632      	movlt	r2, r6
 800e776:	4616      	movlt	r6, r2
 800e778:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e77c:	d005      	beq.n	800e78a <__cvt+0x42>
 800e77e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e782:	d100      	bne.n	800e786 <__cvt+0x3e>
 800e784:	3401      	adds	r4, #1
 800e786:	2102      	movs	r1, #2
 800e788:	e000      	b.n	800e78c <__cvt+0x44>
 800e78a:	2103      	movs	r1, #3
 800e78c:	ab03      	add	r3, sp, #12
 800e78e:	9301      	str	r3, [sp, #4]
 800e790:	ab02      	add	r3, sp, #8
 800e792:	9300      	str	r3, [sp, #0]
 800e794:	ec47 6b10 	vmov	d0, r6, r7
 800e798:	4653      	mov	r3, sl
 800e79a:	4622      	mov	r2, r4
 800e79c:	f000 fe5c 	bl	800f458 <_dtoa_r>
 800e7a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e7a4:	4605      	mov	r5, r0
 800e7a6:	d119      	bne.n	800e7dc <__cvt+0x94>
 800e7a8:	f019 0f01 	tst.w	r9, #1
 800e7ac:	d00e      	beq.n	800e7cc <__cvt+0x84>
 800e7ae:	eb00 0904 	add.w	r9, r0, r4
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	4639      	mov	r1, r7
 800e7ba:	f7f2 f9ad 	bl	8000b18 <__aeabi_dcmpeq>
 800e7be:	b108      	cbz	r0, 800e7c4 <__cvt+0x7c>
 800e7c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e7c4:	2230      	movs	r2, #48	@ 0x30
 800e7c6:	9b03      	ldr	r3, [sp, #12]
 800e7c8:	454b      	cmp	r3, r9
 800e7ca:	d31e      	bcc.n	800e80a <__cvt+0xc2>
 800e7cc:	9b03      	ldr	r3, [sp, #12]
 800e7ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7d0:	1b5b      	subs	r3, r3, r5
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	6013      	str	r3, [r2, #0]
 800e7d6:	b004      	add	sp, #16
 800e7d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e7e0:	eb00 0904 	add.w	r9, r0, r4
 800e7e4:	d1e5      	bne.n	800e7b2 <__cvt+0x6a>
 800e7e6:	7803      	ldrb	r3, [r0, #0]
 800e7e8:	2b30      	cmp	r3, #48	@ 0x30
 800e7ea:	d10a      	bne.n	800e802 <__cvt+0xba>
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	4630      	mov	r0, r6
 800e7f2:	4639      	mov	r1, r7
 800e7f4:	f7f2 f990 	bl	8000b18 <__aeabi_dcmpeq>
 800e7f8:	b918      	cbnz	r0, 800e802 <__cvt+0xba>
 800e7fa:	f1c4 0401 	rsb	r4, r4, #1
 800e7fe:	f8ca 4000 	str.w	r4, [sl]
 800e802:	f8da 3000 	ldr.w	r3, [sl]
 800e806:	4499      	add	r9, r3
 800e808:	e7d3      	b.n	800e7b2 <__cvt+0x6a>
 800e80a:	1c59      	adds	r1, r3, #1
 800e80c:	9103      	str	r1, [sp, #12]
 800e80e:	701a      	strb	r2, [r3, #0]
 800e810:	e7d9      	b.n	800e7c6 <__cvt+0x7e>

0800e812 <__exponent>:
 800e812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e814:	2900      	cmp	r1, #0
 800e816:	bfba      	itte	lt
 800e818:	4249      	neglt	r1, r1
 800e81a:	232d      	movlt	r3, #45	@ 0x2d
 800e81c:	232b      	movge	r3, #43	@ 0x2b
 800e81e:	2909      	cmp	r1, #9
 800e820:	7002      	strb	r2, [r0, #0]
 800e822:	7043      	strb	r3, [r0, #1]
 800e824:	dd29      	ble.n	800e87a <__exponent+0x68>
 800e826:	f10d 0307 	add.w	r3, sp, #7
 800e82a:	461d      	mov	r5, r3
 800e82c:	270a      	movs	r7, #10
 800e82e:	461a      	mov	r2, r3
 800e830:	fbb1 f6f7 	udiv	r6, r1, r7
 800e834:	fb07 1416 	mls	r4, r7, r6, r1
 800e838:	3430      	adds	r4, #48	@ 0x30
 800e83a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e83e:	460c      	mov	r4, r1
 800e840:	2c63      	cmp	r4, #99	@ 0x63
 800e842:	f103 33ff 	add.w	r3, r3, #4294967295
 800e846:	4631      	mov	r1, r6
 800e848:	dcf1      	bgt.n	800e82e <__exponent+0x1c>
 800e84a:	3130      	adds	r1, #48	@ 0x30
 800e84c:	1e94      	subs	r4, r2, #2
 800e84e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e852:	1c41      	adds	r1, r0, #1
 800e854:	4623      	mov	r3, r4
 800e856:	42ab      	cmp	r3, r5
 800e858:	d30a      	bcc.n	800e870 <__exponent+0x5e>
 800e85a:	f10d 0309 	add.w	r3, sp, #9
 800e85e:	1a9b      	subs	r3, r3, r2
 800e860:	42ac      	cmp	r4, r5
 800e862:	bf88      	it	hi
 800e864:	2300      	movhi	r3, #0
 800e866:	3302      	adds	r3, #2
 800e868:	4403      	add	r3, r0
 800e86a:	1a18      	subs	r0, r3, r0
 800e86c:	b003      	add	sp, #12
 800e86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e870:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e874:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e878:	e7ed      	b.n	800e856 <__exponent+0x44>
 800e87a:	2330      	movs	r3, #48	@ 0x30
 800e87c:	3130      	adds	r1, #48	@ 0x30
 800e87e:	7083      	strb	r3, [r0, #2]
 800e880:	70c1      	strb	r1, [r0, #3]
 800e882:	1d03      	adds	r3, r0, #4
 800e884:	e7f1      	b.n	800e86a <__exponent+0x58>
	...

0800e888 <_printf_float>:
 800e888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e88c:	b08d      	sub	sp, #52	@ 0x34
 800e88e:	460c      	mov	r4, r1
 800e890:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e894:	4616      	mov	r6, r2
 800e896:	461f      	mov	r7, r3
 800e898:	4605      	mov	r5, r0
 800e89a:	f000 fcdb 	bl	800f254 <_localeconv_r>
 800e89e:	6803      	ldr	r3, [r0, #0]
 800e8a0:	9304      	str	r3, [sp, #16]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7f1 fd0c 	bl	80002c0 <strlen>
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8ac:	f8d8 3000 	ldr.w	r3, [r8]
 800e8b0:	9005      	str	r0, [sp, #20]
 800e8b2:	3307      	adds	r3, #7
 800e8b4:	f023 0307 	bic.w	r3, r3, #7
 800e8b8:	f103 0208 	add.w	r2, r3, #8
 800e8bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e8c0:	f8d4 b000 	ldr.w	fp, [r4]
 800e8c4:	f8c8 2000 	str.w	r2, [r8]
 800e8c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e8cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e8d0:	9307      	str	r3, [sp, #28]
 800e8d2:	f8cd 8018 	str.w	r8, [sp, #24]
 800e8d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e8da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8de:	4b9c      	ldr	r3, [pc, #624]	@ (800eb50 <_printf_float+0x2c8>)
 800e8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e8e4:	f7f2 f94a 	bl	8000b7c <__aeabi_dcmpun>
 800e8e8:	bb70      	cbnz	r0, 800e948 <_printf_float+0xc0>
 800e8ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8ee:	4b98      	ldr	r3, [pc, #608]	@ (800eb50 <_printf_float+0x2c8>)
 800e8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e8f4:	f7f2 f924 	bl	8000b40 <__aeabi_dcmple>
 800e8f8:	bb30      	cbnz	r0, 800e948 <_printf_float+0xc0>
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	4640      	mov	r0, r8
 800e900:	4649      	mov	r1, r9
 800e902:	f7f2 f913 	bl	8000b2c <__aeabi_dcmplt>
 800e906:	b110      	cbz	r0, 800e90e <_printf_float+0x86>
 800e908:	232d      	movs	r3, #45	@ 0x2d
 800e90a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e90e:	4a91      	ldr	r2, [pc, #580]	@ (800eb54 <_printf_float+0x2cc>)
 800e910:	4b91      	ldr	r3, [pc, #580]	@ (800eb58 <_printf_float+0x2d0>)
 800e912:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e916:	bf94      	ite	ls
 800e918:	4690      	movls	r8, r2
 800e91a:	4698      	movhi	r8, r3
 800e91c:	2303      	movs	r3, #3
 800e91e:	6123      	str	r3, [r4, #16]
 800e920:	f02b 0304 	bic.w	r3, fp, #4
 800e924:	6023      	str	r3, [r4, #0]
 800e926:	f04f 0900 	mov.w	r9, #0
 800e92a:	9700      	str	r7, [sp, #0]
 800e92c:	4633      	mov	r3, r6
 800e92e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e930:	4621      	mov	r1, r4
 800e932:	4628      	mov	r0, r5
 800e934:	f000 f9d2 	bl	800ecdc <_printf_common>
 800e938:	3001      	adds	r0, #1
 800e93a:	f040 808d 	bne.w	800ea58 <_printf_float+0x1d0>
 800e93e:	f04f 30ff 	mov.w	r0, #4294967295
 800e942:	b00d      	add	sp, #52	@ 0x34
 800e944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e948:	4642      	mov	r2, r8
 800e94a:	464b      	mov	r3, r9
 800e94c:	4640      	mov	r0, r8
 800e94e:	4649      	mov	r1, r9
 800e950:	f7f2 f914 	bl	8000b7c <__aeabi_dcmpun>
 800e954:	b140      	cbz	r0, 800e968 <_printf_float+0xe0>
 800e956:	464b      	mov	r3, r9
 800e958:	2b00      	cmp	r3, #0
 800e95a:	bfbc      	itt	lt
 800e95c:	232d      	movlt	r3, #45	@ 0x2d
 800e95e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e962:	4a7e      	ldr	r2, [pc, #504]	@ (800eb5c <_printf_float+0x2d4>)
 800e964:	4b7e      	ldr	r3, [pc, #504]	@ (800eb60 <_printf_float+0x2d8>)
 800e966:	e7d4      	b.n	800e912 <_printf_float+0x8a>
 800e968:	6863      	ldr	r3, [r4, #4]
 800e96a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e96e:	9206      	str	r2, [sp, #24]
 800e970:	1c5a      	adds	r2, r3, #1
 800e972:	d13b      	bne.n	800e9ec <_printf_float+0x164>
 800e974:	2306      	movs	r3, #6
 800e976:	6063      	str	r3, [r4, #4]
 800e978:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e97c:	2300      	movs	r3, #0
 800e97e:	6022      	str	r2, [r4, #0]
 800e980:	9303      	str	r3, [sp, #12]
 800e982:	ab0a      	add	r3, sp, #40	@ 0x28
 800e984:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e988:	ab09      	add	r3, sp, #36	@ 0x24
 800e98a:	9300      	str	r3, [sp, #0]
 800e98c:	6861      	ldr	r1, [r4, #4]
 800e98e:	ec49 8b10 	vmov	d0, r8, r9
 800e992:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e996:	4628      	mov	r0, r5
 800e998:	f7ff fed6 	bl	800e748 <__cvt>
 800e99c:	9b06      	ldr	r3, [sp, #24]
 800e99e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e9a0:	2b47      	cmp	r3, #71	@ 0x47
 800e9a2:	4680      	mov	r8, r0
 800e9a4:	d129      	bne.n	800e9fa <_printf_float+0x172>
 800e9a6:	1cc8      	adds	r0, r1, #3
 800e9a8:	db02      	blt.n	800e9b0 <_printf_float+0x128>
 800e9aa:	6863      	ldr	r3, [r4, #4]
 800e9ac:	4299      	cmp	r1, r3
 800e9ae:	dd41      	ble.n	800ea34 <_printf_float+0x1ac>
 800e9b0:	f1aa 0a02 	sub.w	sl, sl, #2
 800e9b4:	fa5f fa8a 	uxtb.w	sl, sl
 800e9b8:	3901      	subs	r1, #1
 800e9ba:	4652      	mov	r2, sl
 800e9bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e9c0:	9109      	str	r1, [sp, #36]	@ 0x24
 800e9c2:	f7ff ff26 	bl	800e812 <__exponent>
 800e9c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e9c8:	1813      	adds	r3, r2, r0
 800e9ca:	2a01      	cmp	r2, #1
 800e9cc:	4681      	mov	r9, r0
 800e9ce:	6123      	str	r3, [r4, #16]
 800e9d0:	dc02      	bgt.n	800e9d8 <_printf_float+0x150>
 800e9d2:	6822      	ldr	r2, [r4, #0]
 800e9d4:	07d2      	lsls	r2, r2, #31
 800e9d6:	d501      	bpl.n	800e9dc <_printf_float+0x154>
 800e9d8:	3301      	adds	r3, #1
 800e9da:	6123      	str	r3, [r4, #16]
 800e9dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d0a2      	beq.n	800e92a <_printf_float+0xa2>
 800e9e4:	232d      	movs	r3, #45	@ 0x2d
 800e9e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e9ea:	e79e      	b.n	800e92a <_printf_float+0xa2>
 800e9ec:	9a06      	ldr	r2, [sp, #24]
 800e9ee:	2a47      	cmp	r2, #71	@ 0x47
 800e9f0:	d1c2      	bne.n	800e978 <_printf_float+0xf0>
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d1c0      	bne.n	800e978 <_printf_float+0xf0>
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	e7bd      	b.n	800e976 <_printf_float+0xee>
 800e9fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e9fe:	d9db      	bls.n	800e9b8 <_printf_float+0x130>
 800ea00:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ea04:	d118      	bne.n	800ea38 <_printf_float+0x1b0>
 800ea06:	2900      	cmp	r1, #0
 800ea08:	6863      	ldr	r3, [r4, #4]
 800ea0a:	dd0b      	ble.n	800ea24 <_printf_float+0x19c>
 800ea0c:	6121      	str	r1, [r4, #16]
 800ea0e:	b913      	cbnz	r3, 800ea16 <_printf_float+0x18e>
 800ea10:	6822      	ldr	r2, [r4, #0]
 800ea12:	07d0      	lsls	r0, r2, #31
 800ea14:	d502      	bpl.n	800ea1c <_printf_float+0x194>
 800ea16:	3301      	adds	r3, #1
 800ea18:	440b      	add	r3, r1
 800ea1a:	6123      	str	r3, [r4, #16]
 800ea1c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ea1e:	f04f 0900 	mov.w	r9, #0
 800ea22:	e7db      	b.n	800e9dc <_printf_float+0x154>
 800ea24:	b913      	cbnz	r3, 800ea2c <_printf_float+0x1a4>
 800ea26:	6822      	ldr	r2, [r4, #0]
 800ea28:	07d2      	lsls	r2, r2, #31
 800ea2a:	d501      	bpl.n	800ea30 <_printf_float+0x1a8>
 800ea2c:	3302      	adds	r3, #2
 800ea2e:	e7f4      	b.n	800ea1a <_printf_float+0x192>
 800ea30:	2301      	movs	r3, #1
 800ea32:	e7f2      	b.n	800ea1a <_printf_float+0x192>
 800ea34:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ea38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea3a:	4299      	cmp	r1, r3
 800ea3c:	db05      	blt.n	800ea4a <_printf_float+0x1c2>
 800ea3e:	6823      	ldr	r3, [r4, #0]
 800ea40:	6121      	str	r1, [r4, #16]
 800ea42:	07d8      	lsls	r0, r3, #31
 800ea44:	d5ea      	bpl.n	800ea1c <_printf_float+0x194>
 800ea46:	1c4b      	adds	r3, r1, #1
 800ea48:	e7e7      	b.n	800ea1a <_printf_float+0x192>
 800ea4a:	2900      	cmp	r1, #0
 800ea4c:	bfd4      	ite	le
 800ea4e:	f1c1 0202 	rsble	r2, r1, #2
 800ea52:	2201      	movgt	r2, #1
 800ea54:	4413      	add	r3, r2
 800ea56:	e7e0      	b.n	800ea1a <_printf_float+0x192>
 800ea58:	6823      	ldr	r3, [r4, #0]
 800ea5a:	055a      	lsls	r2, r3, #21
 800ea5c:	d407      	bmi.n	800ea6e <_printf_float+0x1e6>
 800ea5e:	6923      	ldr	r3, [r4, #16]
 800ea60:	4642      	mov	r2, r8
 800ea62:	4631      	mov	r1, r6
 800ea64:	4628      	mov	r0, r5
 800ea66:	47b8      	blx	r7
 800ea68:	3001      	adds	r0, #1
 800ea6a:	d12b      	bne.n	800eac4 <_printf_float+0x23c>
 800ea6c:	e767      	b.n	800e93e <_printf_float+0xb6>
 800ea6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ea72:	f240 80dd 	bls.w	800ec30 <_printf_float+0x3a8>
 800ea76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	f7f2 f84b 	bl	8000b18 <__aeabi_dcmpeq>
 800ea82:	2800      	cmp	r0, #0
 800ea84:	d033      	beq.n	800eaee <_printf_float+0x266>
 800ea86:	4a37      	ldr	r2, [pc, #220]	@ (800eb64 <_printf_float+0x2dc>)
 800ea88:	2301      	movs	r3, #1
 800ea8a:	4631      	mov	r1, r6
 800ea8c:	4628      	mov	r0, r5
 800ea8e:	47b8      	blx	r7
 800ea90:	3001      	adds	r0, #1
 800ea92:	f43f af54 	beq.w	800e93e <_printf_float+0xb6>
 800ea96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ea9a:	4543      	cmp	r3, r8
 800ea9c:	db02      	blt.n	800eaa4 <_printf_float+0x21c>
 800ea9e:	6823      	ldr	r3, [r4, #0]
 800eaa0:	07d8      	lsls	r0, r3, #31
 800eaa2:	d50f      	bpl.n	800eac4 <_printf_float+0x23c>
 800eaa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eaa8:	4631      	mov	r1, r6
 800eaaa:	4628      	mov	r0, r5
 800eaac:	47b8      	blx	r7
 800eaae:	3001      	adds	r0, #1
 800eab0:	f43f af45 	beq.w	800e93e <_printf_float+0xb6>
 800eab4:	f04f 0900 	mov.w	r9, #0
 800eab8:	f108 38ff 	add.w	r8, r8, #4294967295
 800eabc:	f104 0a1a 	add.w	sl, r4, #26
 800eac0:	45c8      	cmp	r8, r9
 800eac2:	dc09      	bgt.n	800ead8 <_printf_float+0x250>
 800eac4:	6823      	ldr	r3, [r4, #0]
 800eac6:	079b      	lsls	r3, r3, #30
 800eac8:	f100 8103 	bmi.w	800ecd2 <_printf_float+0x44a>
 800eacc:	68e0      	ldr	r0, [r4, #12]
 800eace:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ead0:	4298      	cmp	r0, r3
 800ead2:	bfb8      	it	lt
 800ead4:	4618      	movlt	r0, r3
 800ead6:	e734      	b.n	800e942 <_printf_float+0xba>
 800ead8:	2301      	movs	r3, #1
 800eada:	4652      	mov	r2, sl
 800eadc:	4631      	mov	r1, r6
 800eade:	4628      	mov	r0, r5
 800eae0:	47b8      	blx	r7
 800eae2:	3001      	adds	r0, #1
 800eae4:	f43f af2b 	beq.w	800e93e <_printf_float+0xb6>
 800eae8:	f109 0901 	add.w	r9, r9, #1
 800eaec:	e7e8      	b.n	800eac0 <_printf_float+0x238>
 800eaee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	dc39      	bgt.n	800eb68 <_printf_float+0x2e0>
 800eaf4:	4a1b      	ldr	r2, [pc, #108]	@ (800eb64 <_printf_float+0x2dc>)
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	4631      	mov	r1, r6
 800eafa:	4628      	mov	r0, r5
 800eafc:	47b8      	blx	r7
 800eafe:	3001      	adds	r0, #1
 800eb00:	f43f af1d 	beq.w	800e93e <_printf_float+0xb6>
 800eb04:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800eb08:	ea59 0303 	orrs.w	r3, r9, r3
 800eb0c:	d102      	bne.n	800eb14 <_printf_float+0x28c>
 800eb0e:	6823      	ldr	r3, [r4, #0]
 800eb10:	07d9      	lsls	r1, r3, #31
 800eb12:	d5d7      	bpl.n	800eac4 <_printf_float+0x23c>
 800eb14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb18:	4631      	mov	r1, r6
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	47b8      	blx	r7
 800eb1e:	3001      	adds	r0, #1
 800eb20:	f43f af0d 	beq.w	800e93e <_printf_float+0xb6>
 800eb24:	f04f 0a00 	mov.w	sl, #0
 800eb28:	f104 0b1a 	add.w	fp, r4, #26
 800eb2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb2e:	425b      	negs	r3, r3
 800eb30:	4553      	cmp	r3, sl
 800eb32:	dc01      	bgt.n	800eb38 <_printf_float+0x2b0>
 800eb34:	464b      	mov	r3, r9
 800eb36:	e793      	b.n	800ea60 <_printf_float+0x1d8>
 800eb38:	2301      	movs	r3, #1
 800eb3a:	465a      	mov	r2, fp
 800eb3c:	4631      	mov	r1, r6
 800eb3e:	4628      	mov	r0, r5
 800eb40:	47b8      	blx	r7
 800eb42:	3001      	adds	r0, #1
 800eb44:	f43f aefb 	beq.w	800e93e <_printf_float+0xb6>
 800eb48:	f10a 0a01 	add.w	sl, sl, #1
 800eb4c:	e7ee      	b.n	800eb2c <_printf_float+0x2a4>
 800eb4e:	bf00      	nop
 800eb50:	7fefffff 	.word	0x7fefffff
 800eb54:	080114a0 	.word	0x080114a0
 800eb58:	080114a4 	.word	0x080114a4
 800eb5c:	080114a8 	.word	0x080114a8
 800eb60:	080114ac 	.word	0x080114ac
 800eb64:	080114b0 	.word	0x080114b0
 800eb68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eb6a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eb6e:	4553      	cmp	r3, sl
 800eb70:	bfa8      	it	ge
 800eb72:	4653      	movge	r3, sl
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	4699      	mov	r9, r3
 800eb78:	dc36      	bgt.n	800ebe8 <_printf_float+0x360>
 800eb7a:	f04f 0b00 	mov.w	fp, #0
 800eb7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb82:	f104 021a 	add.w	r2, r4, #26
 800eb86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eb88:	9306      	str	r3, [sp, #24]
 800eb8a:	eba3 0309 	sub.w	r3, r3, r9
 800eb8e:	455b      	cmp	r3, fp
 800eb90:	dc31      	bgt.n	800ebf6 <_printf_float+0x36e>
 800eb92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb94:	459a      	cmp	sl, r3
 800eb96:	dc3a      	bgt.n	800ec0e <_printf_float+0x386>
 800eb98:	6823      	ldr	r3, [r4, #0]
 800eb9a:	07da      	lsls	r2, r3, #31
 800eb9c:	d437      	bmi.n	800ec0e <_printf_float+0x386>
 800eb9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eba0:	ebaa 0903 	sub.w	r9, sl, r3
 800eba4:	9b06      	ldr	r3, [sp, #24]
 800eba6:	ebaa 0303 	sub.w	r3, sl, r3
 800ebaa:	4599      	cmp	r9, r3
 800ebac:	bfa8      	it	ge
 800ebae:	4699      	movge	r9, r3
 800ebb0:	f1b9 0f00 	cmp.w	r9, #0
 800ebb4:	dc33      	bgt.n	800ec1e <_printf_float+0x396>
 800ebb6:	f04f 0800 	mov.w	r8, #0
 800ebba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebbe:	f104 0b1a 	add.w	fp, r4, #26
 800ebc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebc4:	ebaa 0303 	sub.w	r3, sl, r3
 800ebc8:	eba3 0309 	sub.w	r3, r3, r9
 800ebcc:	4543      	cmp	r3, r8
 800ebce:	f77f af79 	ble.w	800eac4 <_printf_float+0x23c>
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	465a      	mov	r2, fp
 800ebd6:	4631      	mov	r1, r6
 800ebd8:	4628      	mov	r0, r5
 800ebda:	47b8      	blx	r7
 800ebdc:	3001      	adds	r0, #1
 800ebde:	f43f aeae 	beq.w	800e93e <_printf_float+0xb6>
 800ebe2:	f108 0801 	add.w	r8, r8, #1
 800ebe6:	e7ec      	b.n	800ebc2 <_printf_float+0x33a>
 800ebe8:	4642      	mov	r2, r8
 800ebea:	4631      	mov	r1, r6
 800ebec:	4628      	mov	r0, r5
 800ebee:	47b8      	blx	r7
 800ebf0:	3001      	adds	r0, #1
 800ebf2:	d1c2      	bne.n	800eb7a <_printf_float+0x2f2>
 800ebf4:	e6a3      	b.n	800e93e <_printf_float+0xb6>
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	4631      	mov	r1, r6
 800ebfa:	4628      	mov	r0, r5
 800ebfc:	9206      	str	r2, [sp, #24]
 800ebfe:	47b8      	blx	r7
 800ec00:	3001      	adds	r0, #1
 800ec02:	f43f ae9c 	beq.w	800e93e <_printf_float+0xb6>
 800ec06:	9a06      	ldr	r2, [sp, #24]
 800ec08:	f10b 0b01 	add.w	fp, fp, #1
 800ec0c:	e7bb      	b.n	800eb86 <_printf_float+0x2fe>
 800ec0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec12:	4631      	mov	r1, r6
 800ec14:	4628      	mov	r0, r5
 800ec16:	47b8      	blx	r7
 800ec18:	3001      	adds	r0, #1
 800ec1a:	d1c0      	bne.n	800eb9e <_printf_float+0x316>
 800ec1c:	e68f      	b.n	800e93e <_printf_float+0xb6>
 800ec1e:	9a06      	ldr	r2, [sp, #24]
 800ec20:	464b      	mov	r3, r9
 800ec22:	4442      	add	r2, r8
 800ec24:	4631      	mov	r1, r6
 800ec26:	4628      	mov	r0, r5
 800ec28:	47b8      	blx	r7
 800ec2a:	3001      	adds	r0, #1
 800ec2c:	d1c3      	bne.n	800ebb6 <_printf_float+0x32e>
 800ec2e:	e686      	b.n	800e93e <_printf_float+0xb6>
 800ec30:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ec34:	f1ba 0f01 	cmp.w	sl, #1
 800ec38:	dc01      	bgt.n	800ec3e <_printf_float+0x3b6>
 800ec3a:	07db      	lsls	r3, r3, #31
 800ec3c:	d536      	bpl.n	800ecac <_printf_float+0x424>
 800ec3e:	2301      	movs	r3, #1
 800ec40:	4642      	mov	r2, r8
 800ec42:	4631      	mov	r1, r6
 800ec44:	4628      	mov	r0, r5
 800ec46:	47b8      	blx	r7
 800ec48:	3001      	adds	r0, #1
 800ec4a:	f43f ae78 	beq.w	800e93e <_printf_float+0xb6>
 800ec4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec52:	4631      	mov	r1, r6
 800ec54:	4628      	mov	r0, r5
 800ec56:	47b8      	blx	r7
 800ec58:	3001      	adds	r0, #1
 800ec5a:	f43f ae70 	beq.w	800e93e <_printf_float+0xb6>
 800ec5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ec62:	2200      	movs	r2, #0
 800ec64:	2300      	movs	r3, #0
 800ec66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec6a:	f7f1 ff55 	bl	8000b18 <__aeabi_dcmpeq>
 800ec6e:	b9c0      	cbnz	r0, 800eca2 <_printf_float+0x41a>
 800ec70:	4653      	mov	r3, sl
 800ec72:	f108 0201 	add.w	r2, r8, #1
 800ec76:	4631      	mov	r1, r6
 800ec78:	4628      	mov	r0, r5
 800ec7a:	47b8      	blx	r7
 800ec7c:	3001      	adds	r0, #1
 800ec7e:	d10c      	bne.n	800ec9a <_printf_float+0x412>
 800ec80:	e65d      	b.n	800e93e <_printf_float+0xb6>
 800ec82:	2301      	movs	r3, #1
 800ec84:	465a      	mov	r2, fp
 800ec86:	4631      	mov	r1, r6
 800ec88:	4628      	mov	r0, r5
 800ec8a:	47b8      	blx	r7
 800ec8c:	3001      	adds	r0, #1
 800ec8e:	f43f ae56 	beq.w	800e93e <_printf_float+0xb6>
 800ec92:	f108 0801 	add.w	r8, r8, #1
 800ec96:	45d0      	cmp	r8, sl
 800ec98:	dbf3      	blt.n	800ec82 <_printf_float+0x3fa>
 800ec9a:	464b      	mov	r3, r9
 800ec9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800eca0:	e6df      	b.n	800ea62 <_printf_float+0x1da>
 800eca2:	f04f 0800 	mov.w	r8, #0
 800eca6:	f104 0b1a 	add.w	fp, r4, #26
 800ecaa:	e7f4      	b.n	800ec96 <_printf_float+0x40e>
 800ecac:	2301      	movs	r3, #1
 800ecae:	4642      	mov	r2, r8
 800ecb0:	e7e1      	b.n	800ec76 <_printf_float+0x3ee>
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	464a      	mov	r2, r9
 800ecb6:	4631      	mov	r1, r6
 800ecb8:	4628      	mov	r0, r5
 800ecba:	47b8      	blx	r7
 800ecbc:	3001      	adds	r0, #1
 800ecbe:	f43f ae3e 	beq.w	800e93e <_printf_float+0xb6>
 800ecc2:	f108 0801 	add.w	r8, r8, #1
 800ecc6:	68e3      	ldr	r3, [r4, #12]
 800ecc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ecca:	1a5b      	subs	r3, r3, r1
 800eccc:	4543      	cmp	r3, r8
 800ecce:	dcf0      	bgt.n	800ecb2 <_printf_float+0x42a>
 800ecd0:	e6fc      	b.n	800eacc <_printf_float+0x244>
 800ecd2:	f04f 0800 	mov.w	r8, #0
 800ecd6:	f104 0919 	add.w	r9, r4, #25
 800ecda:	e7f4      	b.n	800ecc6 <_printf_float+0x43e>

0800ecdc <_printf_common>:
 800ecdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ece0:	4616      	mov	r6, r2
 800ece2:	4698      	mov	r8, r3
 800ece4:	688a      	ldr	r2, [r1, #8]
 800ece6:	690b      	ldr	r3, [r1, #16]
 800ece8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ecec:	4293      	cmp	r3, r2
 800ecee:	bfb8      	it	lt
 800ecf0:	4613      	movlt	r3, r2
 800ecf2:	6033      	str	r3, [r6, #0]
 800ecf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ecf8:	4607      	mov	r7, r0
 800ecfa:	460c      	mov	r4, r1
 800ecfc:	b10a      	cbz	r2, 800ed02 <_printf_common+0x26>
 800ecfe:	3301      	adds	r3, #1
 800ed00:	6033      	str	r3, [r6, #0]
 800ed02:	6823      	ldr	r3, [r4, #0]
 800ed04:	0699      	lsls	r1, r3, #26
 800ed06:	bf42      	ittt	mi
 800ed08:	6833      	ldrmi	r3, [r6, #0]
 800ed0a:	3302      	addmi	r3, #2
 800ed0c:	6033      	strmi	r3, [r6, #0]
 800ed0e:	6825      	ldr	r5, [r4, #0]
 800ed10:	f015 0506 	ands.w	r5, r5, #6
 800ed14:	d106      	bne.n	800ed24 <_printf_common+0x48>
 800ed16:	f104 0a19 	add.w	sl, r4, #25
 800ed1a:	68e3      	ldr	r3, [r4, #12]
 800ed1c:	6832      	ldr	r2, [r6, #0]
 800ed1e:	1a9b      	subs	r3, r3, r2
 800ed20:	42ab      	cmp	r3, r5
 800ed22:	dc26      	bgt.n	800ed72 <_printf_common+0x96>
 800ed24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ed28:	6822      	ldr	r2, [r4, #0]
 800ed2a:	3b00      	subs	r3, #0
 800ed2c:	bf18      	it	ne
 800ed2e:	2301      	movne	r3, #1
 800ed30:	0692      	lsls	r2, r2, #26
 800ed32:	d42b      	bmi.n	800ed8c <_printf_common+0xb0>
 800ed34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ed38:	4641      	mov	r1, r8
 800ed3a:	4638      	mov	r0, r7
 800ed3c:	47c8      	blx	r9
 800ed3e:	3001      	adds	r0, #1
 800ed40:	d01e      	beq.n	800ed80 <_printf_common+0xa4>
 800ed42:	6823      	ldr	r3, [r4, #0]
 800ed44:	6922      	ldr	r2, [r4, #16]
 800ed46:	f003 0306 	and.w	r3, r3, #6
 800ed4a:	2b04      	cmp	r3, #4
 800ed4c:	bf02      	ittt	eq
 800ed4e:	68e5      	ldreq	r5, [r4, #12]
 800ed50:	6833      	ldreq	r3, [r6, #0]
 800ed52:	1aed      	subeq	r5, r5, r3
 800ed54:	68a3      	ldr	r3, [r4, #8]
 800ed56:	bf0c      	ite	eq
 800ed58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed5c:	2500      	movne	r5, #0
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	bfc4      	itt	gt
 800ed62:	1a9b      	subgt	r3, r3, r2
 800ed64:	18ed      	addgt	r5, r5, r3
 800ed66:	2600      	movs	r6, #0
 800ed68:	341a      	adds	r4, #26
 800ed6a:	42b5      	cmp	r5, r6
 800ed6c:	d11a      	bne.n	800eda4 <_printf_common+0xc8>
 800ed6e:	2000      	movs	r0, #0
 800ed70:	e008      	b.n	800ed84 <_printf_common+0xa8>
 800ed72:	2301      	movs	r3, #1
 800ed74:	4652      	mov	r2, sl
 800ed76:	4641      	mov	r1, r8
 800ed78:	4638      	mov	r0, r7
 800ed7a:	47c8      	blx	r9
 800ed7c:	3001      	adds	r0, #1
 800ed7e:	d103      	bne.n	800ed88 <_printf_common+0xac>
 800ed80:	f04f 30ff 	mov.w	r0, #4294967295
 800ed84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed88:	3501      	adds	r5, #1
 800ed8a:	e7c6      	b.n	800ed1a <_printf_common+0x3e>
 800ed8c:	18e1      	adds	r1, r4, r3
 800ed8e:	1c5a      	adds	r2, r3, #1
 800ed90:	2030      	movs	r0, #48	@ 0x30
 800ed92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ed96:	4422      	add	r2, r4
 800ed98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ed9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eda0:	3302      	adds	r3, #2
 800eda2:	e7c7      	b.n	800ed34 <_printf_common+0x58>
 800eda4:	2301      	movs	r3, #1
 800eda6:	4622      	mov	r2, r4
 800eda8:	4641      	mov	r1, r8
 800edaa:	4638      	mov	r0, r7
 800edac:	47c8      	blx	r9
 800edae:	3001      	adds	r0, #1
 800edb0:	d0e6      	beq.n	800ed80 <_printf_common+0xa4>
 800edb2:	3601      	adds	r6, #1
 800edb4:	e7d9      	b.n	800ed6a <_printf_common+0x8e>
	...

0800edb8 <_printf_i>:
 800edb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edbc:	7e0f      	ldrb	r7, [r1, #24]
 800edbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800edc0:	2f78      	cmp	r7, #120	@ 0x78
 800edc2:	4691      	mov	r9, r2
 800edc4:	4680      	mov	r8, r0
 800edc6:	460c      	mov	r4, r1
 800edc8:	469a      	mov	sl, r3
 800edca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800edce:	d807      	bhi.n	800ede0 <_printf_i+0x28>
 800edd0:	2f62      	cmp	r7, #98	@ 0x62
 800edd2:	d80a      	bhi.n	800edea <_printf_i+0x32>
 800edd4:	2f00      	cmp	r7, #0
 800edd6:	f000 80d2 	beq.w	800ef7e <_printf_i+0x1c6>
 800edda:	2f58      	cmp	r7, #88	@ 0x58
 800eddc:	f000 80b9 	beq.w	800ef52 <_printf_i+0x19a>
 800ede0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ede4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ede8:	e03a      	b.n	800ee60 <_printf_i+0xa8>
 800edea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800edee:	2b15      	cmp	r3, #21
 800edf0:	d8f6      	bhi.n	800ede0 <_printf_i+0x28>
 800edf2:	a101      	add	r1, pc, #4	@ (adr r1, 800edf8 <_printf_i+0x40>)
 800edf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800edf8:	0800ee51 	.word	0x0800ee51
 800edfc:	0800ee65 	.word	0x0800ee65
 800ee00:	0800ede1 	.word	0x0800ede1
 800ee04:	0800ede1 	.word	0x0800ede1
 800ee08:	0800ede1 	.word	0x0800ede1
 800ee0c:	0800ede1 	.word	0x0800ede1
 800ee10:	0800ee65 	.word	0x0800ee65
 800ee14:	0800ede1 	.word	0x0800ede1
 800ee18:	0800ede1 	.word	0x0800ede1
 800ee1c:	0800ede1 	.word	0x0800ede1
 800ee20:	0800ede1 	.word	0x0800ede1
 800ee24:	0800ef65 	.word	0x0800ef65
 800ee28:	0800ee8f 	.word	0x0800ee8f
 800ee2c:	0800ef1f 	.word	0x0800ef1f
 800ee30:	0800ede1 	.word	0x0800ede1
 800ee34:	0800ede1 	.word	0x0800ede1
 800ee38:	0800ef87 	.word	0x0800ef87
 800ee3c:	0800ede1 	.word	0x0800ede1
 800ee40:	0800ee8f 	.word	0x0800ee8f
 800ee44:	0800ede1 	.word	0x0800ede1
 800ee48:	0800ede1 	.word	0x0800ede1
 800ee4c:	0800ef27 	.word	0x0800ef27
 800ee50:	6833      	ldr	r3, [r6, #0]
 800ee52:	1d1a      	adds	r2, r3, #4
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	6032      	str	r2, [r6, #0]
 800ee58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ee60:	2301      	movs	r3, #1
 800ee62:	e09d      	b.n	800efa0 <_printf_i+0x1e8>
 800ee64:	6833      	ldr	r3, [r6, #0]
 800ee66:	6820      	ldr	r0, [r4, #0]
 800ee68:	1d19      	adds	r1, r3, #4
 800ee6a:	6031      	str	r1, [r6, #0]
 800ee6c:	0606      	lsls	r6, r0, #24
 800ee6e:	d501      	bpl.n	800ee74 <_printf_i+0xbc>
 800ee70:	681d      	ldr	r5, [r3, #0]
 800ee72:	e003      	b.n	800ee7c <_printf_i+0xc4>
 800ee74:	0645      	lsls	r5, r0, #25
 800ee76:	d5fb      	bpl.n	800ee70 <_printf_i+0xb8>
 800ee78:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ee7c:	2d00      	cmp	r5, #0
 800ee7e:	da03      	bge.n	800ee88 <_printf_i+0xd0>
 800ee80:	232d      	movs	r3, #45	@ 0x2d
 800ee82:	426d      	negs	r5, r5
 800ee84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee88:	4859      	ldr	r0, [pc, #356]	@ (800eff0 <_printf_i+0x238>)
 800ee8a:	230a      	movs	r3, #10
 800ee8c:	e011      	b.n	800eeb2 <_printf_i+0xfa>
 800ee8e:	6821      	ldr	r1, [r4, #0]
 800ee90:	6833      	ldr	r3, [r6, #0]
 800ee92:	0608      	lsls	r0, r1, #24
 800ee94:	f853 5b04 	ldr.w	r5, [r3], #4
 800ee98:	d402      	bmi.n	800eea0 <_printf_i+0xe8>
 800ee9a:	0649      	lsls	r1, r1, #25
 800ee9c:	bf48      	it	mi
 800ee9e:	b2ad      	uxthmi	r5, r5
 800eea0:	2f6f      	cmp	r7, #111	@ 0x6f
 800eea2:	4853      	ldr	r0, [pc, #332]	@ (800eff0 <_printf_i+0x238>)
 800eea4:	6033      	str	r3, [r6, #0]
 800eea6:	bf14      	ite	ne
 800eea8:	230a      	movne	r3, #10
 800eeaa:	2308      	moveq	r3, #8
 800eeac:	2100      	movs	r1, #0
 800eeae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eeb2:	6866      	ldr	r6, [r4, #4]
 800eeb4:	60a6      	str	r6, [r4, #8]
 800eeb6:	2e00      	cmp	r6, #0
 800eeb8:	bfa2      	ittt	ge
 800eeba:	6821      	ldrge	r1, [r4, #0]
 800eebc:	f021 0104 	bicge.w	r1, r1, #4
 800eec0:	6021      	strge	r1, [r4, #0]
 800eec2:	b90d      	cbnz	r5, 800eec8 <_printf_i+0x110>
 800eec4:	2e00      	cmp	r6, #0
 800eec6:	d04b      	beq.n	800ef60 <_printf_i+0x1a8>
 800eec8:	4616      	mov	r6, r2
 800eeca:	fbb5 f1f3 	udiv	r1, r5, r3
 800eece:	fb03 5711 	mls	r7, r3, r1, r5
 800eed2:	5dc7      	ldrb	r7, [r0, r7]
 800eed4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eed8:	462f      	mov	r7, r5
 800eeda:	42bb      	cmp	r3, r7
 800eedc:	460d      	mov	r5, r1
 800eede:	d9f4      	bls.n	800eeca <_printf_i+0x112>
 800eee0:	2b08      	cmp	r3, #8
 800eee2:	d10b      	bne.n	800eefc <_printf_i+0x144>
 800eee4:	6823      	ldr	r3, [r4, #0]
 800eee6:	07df      	lsls	r7, r3, #31
 800eee8:	d508      	bpl.n	800eefc <_printf_i+0x144>
 800eeea:	6923      	ldr	r3, [r4, #16]
 800eeec:	6861      	ldr	r1, [r4, #4]
 800eeee:	4299      	cmp	r1, r3
 800eef0:	bfde      	ittt	le
 800eef2:	2330      	movle	r3, #48	@ 0x30
 800eef4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eef8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eefc:	1b92      	subs	r2, r2, r6
 800eefe:	6122      	str	r2, [r4, #16]
 800ef00:	f8cd a000 	str.w	sl, [sp]
 800ef04:	464b      	mov	r3, r9
 800ef06:	aa03      	add	r2, sp, #12
 800ef08:	4621      	mov	r1, r4
 800ef0a:	4640      	mov	r0, r8
 800ef0c:	f7ff fee6 	bl	800ecdc <_printf_common>
 800ef10:	3001      	adds	r0, #1
 800ef12:	d14a      	bne.n	800efaa <_printf_i+0x1f2>
 800ef14:	f04f 30ff 	mov.w	r0, #4294967295
 800ef18:	b004      	add	sp, #16
 800ef1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef1e:	6823      	ldr	r3, [r4, #0]
 800ef20:	f043 0320 	orr.w	r3, r3, #32
 800ef24:	6023      	str	r3, [r4, #0]
 800ef26:	4833      	ldr	r0, [pc, #204]	@ (800eff4 <_printf_i+0x23c>)
 800ef28:	2778      	movs	r7, #120	@ 0x78
 800ef2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ef2e:	6823      	ldr	r3, [r4, #0]
 800ef30:	6831      	ldr	r1, [r6, #0]
 800ef32:	061f      	lsls	r7, r3, #24
 800ef34:	f851 5b04 	ldr.w	r5, [r1], #4
 800ef38:	d402      	bmi.n	800ef40 <_printf_i+0x188>
 800ef3a:	065f      	lsls	r7, r3, #25
 800ef3c:	bf48      	it	mi
 800ef3e:	b2ad      	uxthmi	r5, r5
 800ef40:	6031      	str	r1, [r6, #0]
 800ef42:	07d9      	lsls	r1, r3, #31
 800ef44:	bf44      	itt	mi
 800ef46:	f043 0320 	orrmi.w	r3, r3, #32
 800ef4a:	6023      	strmi	r3, [r4, #0]
 800ef4c:	b11d      	cbz	r5, 800ef56 <_printf_i+0x19e>
 800ef4e:	2310      	movs	r3, #16
 800ef50:	e7ac      	b.n	800eeac <_printf_i+0xf4>
 800ef52:	4827      	ldr	r0, [pc, #156]	@ (800eff0 <_printf_i+0x238>)
 800ef54:	e7e9      	b.n	800ef2a <_printf_i+0x172>
 800ef56:	6823      	ldr	r3, [r4, #0]
 800ef58:	f023 0320 	bic.w	r3, r3, #32
 800ef5c:	6023      	str	r3, [r4, #0]
 800ef5e:	e7f6      	b.n	800ef4e <_printf_i+0x196>
 800ef60:	4616      	mov	r6, r2
 800ef62:	e7bd      	b.n	800eee0 <_printf_i+0x128>
 800ef64:	6833      	ldr	r3, [r6, #0]
 800ef66:	6825      	ldr	r5, [r4, #0]
 800ef68:	6961      	ldr	r1, [r4, #20]
 800ef6a:	1d18      	adds	r0, r3, #4
 800ef6c:	6030      	str	r0, [r6, #0]
 800ef6e:	062e      	lsls	r6, r5, #24
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	d501      	bpl.n	800ef78 <_printf_i+0x1c0>
 800ef74:	6019      	str	r1, [r3, #0]
 800ef76:	e002      	b.n	800ef7e <_printf_i+0x1c6>
 800ef78:	0668      	lsls	r0, r5, #25
 800ef7a:	d5fb      	bpl.n	800ef74 <_printf_i+0x1bc>
 800ef7c:	8019      	strh	r1, [r3, #0]
 800ef7e:	2300      	movs	r3, #0
 800ef80:	6123      	str	r3, [r4, #16]
 800ef82:	4616      	mov	r6, r2
 800ef84:	e7bc      	b.n	800ef00 <_printf_i+0x148>
 800ef86:	6833      	ldr	r3, [r6, #0]
 800ef88:	1d1a      	adds	r2, r3, #4
 800ef8a:	6032      	str	r2, [r6, #0]
 800ef8c:	681e      	ldr	r6, [r3, #0]
 800ef8e:	6862      	ldr	r2, [r4, #4]
 800ef90:	2100      	movs	r1, #0
 800ef92:	4630      	mov	r0, r6
 800ef94:	f7f1 f944 	bl	8000220 <memchr>
 800ef98:	b108      	cbz	r0, 800ef9e <_printf_i+0x1e6>
 800ef9a:	1b80      	subs	r0, r0, r6
 800ef9c:	6060      	str	r0, [r4, #4]
 800ef9e:	6863      	ldr	r3, [r4, #4]
 800efa0:	6123      	str	r3, [r4, #16]
 800efa2:	2300      	movs	r3, #0
 800efa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efa8:	e7aa      	b.n	800ef00 <_printf_i+0x148>
 800efaa:	6923      	ldr	r3, [r4, #16]
 800efac:	4632      	mov	r2, r6
 800efae:	4649      	mov	r1, r9
 800efb0:	4640      	mov	r0, r8
 800efb2:	47d0      	blx	sl
 800efb4:	3001      	adds	r0, #1
 800efb6:	d0ad      	beq.n	800ef14 <_printf_i+0x15c>
 800efb8:	6823      	ldr	r3, [r4, #0]
 800efba:	079b      	lsls	r3, r3, #30
 800efbc:	d413      	bmi.n	800efe6 <_printf_i+0x22e>
 800efbe:	68e0      	ldr	r0, [r4, #12]
 800efc0:	9b03      	ldr	r3, [sp, #12]
 800efc2:	4298      	cmp	r0, r3
 800efc4:	bfb8      	it	lt
 800efc6:	4618      	movlt	r0, r3
 800efc8:	e7a6      	b.n	800ef18 <_printf_i+0x160>
 800efca:	2301      	movs	r3, #1
 800efcc:	4632      	mov	r2, r6
 800efce:	4649      	mov	r1, r9
 800efd0:	4640      	mov	r0, r8
 800efd2:	47d0      	blx	sl
 800efd4:	3001      	adds	r0, #1
 800efd6:	d09d      	beq.n	800ef14 <_printf_i+0x15c>
 800efd8:	3501      	adds	r5, #1
 800efda:	68e3      	ldr	r3, [r4, #12]
 800efdc:	9903      	ldr	r1, [sp, #12]
 800efde:	1a5b      	subs	r3, r3, r1
 800efe0:	42ab      	cmp	r3, r5
 800efe2:	dcf2      	bgt.n	800efca <_printf_i+0x212>
 800efe4:	e7eb      	b.n	800efbe <_printf_i+0x206>
 800efe6:	2500      	movs	r5, #0
 800efe8:	f104 0619 	add.w	r6, r4, #25
 800efec:	e7f5      	b.n	800efda <_printf_i+0x222>
 800efee:	bf00      	nop
 800eff0:	080114b2 	.word	0x080114b2
 800eff4:	080114c3 	.word	0x080114c3

0800eff8 <std>:
 800eff8:	2300      	movs	r3, #0
 800effa:	b510      	push	{r4, lr}
 800effc:	4604      	mov	r4, r0
 800effe:	e9c0 3300 	strd	r3, r3, [r0]
 800f002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f006:	6083      	str	r3, [r0, #8]
 800f008:	8181      	strh	r1, [r0, #12]
 800f00a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f00c:	81c2      	strh	r2, [r0, #14]
 800f00e:	6183      	str	r3, [r0, #24]
 800f010:	4619      	mov	r1, r3
 800f012:	2208      	movs	r2, #8
 800f014:	305c      	adds	r0, #92	@ 0x5c
 800f016:	f000 f914 	bl	800f242 <memset>
 800f01a:	4b0d      	ldr	r3, [pc, #52]	@ (800f050 <std+0x58>)
 800f01c:	6263      	str	r3, [r4, #36]	@ 0x24
 800f01e:	4b0d      	ldr	r3, [pc, #52]	@ (800f054 <std+0x5c>)
 800f020:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f022:	4b0d      	ldr	r3, [pc, #52]	@ (800f058 <std+0x60>)
 800f024:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f026:	4b0d      	ldr	r3, [pc, #52]	@ (800f05c <std+0x64>)
 800f028:	6323      	str	r3, [r4, #48]	@ 0x30
 800f02a:	4b0d      	ldr	r3, [pc, #52]	@ (800f060 <std+0x68>)
 800f02c:	6224      	str	r4, [r4, #32]
 800f02e:	429c      	cmp	r4, r3
 800f030:	d006      	beq.n	800f040 <std+0x48>
 800f032:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f036:	4294      	cmp	r4, r2
 800f038:	d002      	beq.n	800f040 <std+0x48>
 800f03a:	33d0      	adds	r3, #208	@ 0xd0
 800f03c:	429c      	cmp	r4, r3
 800f03e:	d105      	bne.n	800f04c <std+0x54>
 800f040:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f048:	f000 b978 	b.w	800f33c <__retarget_lock_init_recursive>
 800f04c:	bd10      	pop	{r4, pc}
 800f04e:	bf00      	nop
 800f050:	0800f1bd 	.word	0x0800f1bd
 800f054:	0800f1df 	.word	0x0800f1df
 800f058:	0800f217 	.word	0x0800f217
 800f05c:	0800f23b 	.word	0x0800f23b
 800f060:	20001c98 	.word	0x20001c98

0800f064 <stdio_exit_handler>:
 800f064:	4a02      	ldr	r2, [pc, #8]	@ (800f070 <stdio_exit_handler+0xc>)
 800f066:	4903      	ldr	r1, [pc, #12]	@ (800f074 <stdio_exit_handler+0x10>)
 800f068:	4803      	ldr	r0, [pc, #12]	@ (800f078 <stdio_exit_handler+0x14>)
 800f06a:	f000 b869 	b.w	800f140 <_fwalk_sglue>
 800f06e:	bf00      	nop
 800f070:	20000578 	.word	0x20000578
 800f074:	08010c9d 	.word	0x08010c9d
 800f078:	20000588 	.word	0x20000588

0800f07c <cleanup_stdio>:
 800f07c:	6841      	ldr	r1, [r0, #4]
 800f07e:	4b0c      	ldr	r3, [pc, #48]	@ (800f0b0 <cleanup_stdio+0x34>)
 800f080:	4299      	cmp	r1, r3
 800f082:	b510      	push	{r4, lr}
 800f084:	4604      	mov	r4, r0
 800f086:	d001      	beq.n	800f08c <cleanup_stdio+0x10>
 800f088:	f001 fe08 	bl	8010c9c <_fflush_r>
 800f08c:	68a1      	ldr	r1, [r4, #8]
 800f08e:	4b09      	ldr	r3, [pc, #36]	@ (800f0b4 <cleanup_stdio+0x38>)
 800f090:	4299      	cmp	r1, r3
 800f092:	d002      	beq.n	800f09a <cleanup_stdio+0x1e>
 800f094:	4620      	mov	r0, r4
 800f096:	f001 fe01 	bl	8010c9c <_fflush_r>
 800f09a:	68e1      	ldr	r1, [r4, #12]
 800f09c:	4b06      	ldr	r3, [pc, #24]	@ (800f0b8 <cleanup_stdio+0x3c>)
 800f09e:	4299      	cmp	r1, r3
 800f0a0:	d004      	beq.n	800f0ac <cleanup_stdio+0x30>
 800f0a2:	4620      	mov	r0, r4
 800f0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0a8:	f001 bdf8 	b.w	8010c9c <_fflush_r>
 800f0ac:	bd10      	pop	{r4, pc}
 800f0ae:	bf00      	nop
 800f0b0:	20001c98 	.word	0x20001c98
 800f0b4:	20001d00 	.word	0x20001d00
 800f0b8:	20001d68 	.word	0x20001d68

0800f0bc <global_stdio_init.part.0>:
 800f0bc:	b510      	push	{r4, lr}
 800f0be:	4b0b      	ldr	r3, [pc, #44]	@ (800f0ec <global_stdio_init.part.0+0x30>)
 800f0c0:	4c0b      	ldr	r4, [pc, #44]	@ (800f0f0 <global_stdio_init.part.0+0x34>)
 800f0c2:	4a0c      	ldr	r2, [pc, #48]	@ (800f0f4 <global_stdio_init.part.0+0x38>)
 800f0c4:	601a      	str	r2, [r3, #0]
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	2104      	movs	r1, #4
 800f0cc:	f7ff ff94 	bl	800eff8 <std>
 800f0d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f0d4:	2201      	movs	r2, #1
 800f0d6:	2109      	movs	r1, #9
 800f0d8:	f7ff ff8e 	bl	800eff8 <std>
 800f0dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f0e0:	2202      	movs	r2, #2
 800f0e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0e6:	2112      	movs	r1, #18
 800f0e8:	f7ff bf86 	b.w	800eff8 <std>
 800f0ec:	20001dd0 	.word	0x20001dd0
 800f0f0:	20001c98 	.word	0x20001c98
 800f0f4:	0800f065 	.word	0x0800f065

0800f0f8 <__sfp_lock_acquire>:
 800f0f8:	4801      	ldr	r0, [pc, #4]	@ (800f100 <__sfp_lock_acquire+0x8>)
 800f0fa:	f000 b920 	b.w	800f33e <__retarget_lock_acquire_recursive>
 800f0fe:	bf00      	nop
 800f100:	20001dd9 	.word	0x20001dd9

0800f104 <__sfp_lock_release>:
 800f104:	4801      	ldr	r0, [pc, #4]	@ (800f10c <__sfp_lock_release+0x8>)
 800f106:	f000 b91b 	b.w	800f340 <__retarget_lock_release_recursive>
 800f10a:	bf00      	nop
 800f10c:	20001dd9 	.word	0x20001dd9

0800f110 <__sinit>:
 800f110:	b510      	push	{r4, lr}
 800f112:	4604      	mov	r4, r0
 800f114:	f7ff fff0 	bl	800f0f8 <__sfp_lock_acquire>
 800f118:	6a23      	ldr	r3, [r4, #32]
 800f11a:	b11b      	cbz	r3, 800f124 <__sinit+0x14>
 800f11c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f120:	f7ff bff0 	b.w	800f104 <__sfp_lock_release>
 800f124:	4b04      	ldr	r3, [pc, #16]	@ (800f138 <__sinit+0x28>)
 800f126:	6223      	str	r3, [r4, #32]
 800f128:	4b04      	ldr	r3, [pc, #16]	@ (800f13c <__sinit+0x2c>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d1f5      	bne.n	800f11c <__sinit+0xc>
 800f130:	f7ff ffc4 	bl	800f0bc <global_stdio_init.part.0>
 800f134:	e7f2      	b.n	800f11c <__sinit+0xc>
 800f136:	bf00      	nop
 800f138:	0800f07d 	.word	0x0800f07d
 800f13c:	20001dd0 	.word	0x20001dd0

0800f140 <_fwalk_sglue>:
 800f140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f144:	4607      	mov	r7, r0
 800f146:	4688      	mov	r8, r1
 800f148:	4614      	mov	r4, r2
 800f14a:	2600      	movs	r6, #0
 800f14c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f150:	f1b9 0901 	subs.w	r9, r9, #1
 800f154:	d505      	bpl.n	800f162 <_fwalk_sglue+0x22>
 800f156:	6824      	ldr	r4, [r4, #0]
 800f158:	2c00      	cmp	r4, #0
 800f15a:	d1f7      	bne.n	800f14c <_fwalk_sglue+0xc>
 800f15c:	4630      	mov	r0, r6
 800f15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f162:	89ab      	ldrh	r3, [r5, #12]
 800f164:	2b01      	cmp	r3, #1
 800f166:	d907      	bls.n	800f178 <_fwalk_sglue+0x38>
 800f168:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f16c:	3301      	adds	r3, #1
 800f16e:	d003      	beq.n	800f178 <_fwalk_sglue+0x38>
 800f170:	4629      	mov	r1, r5
 800f172:	4638      	mov	r0, r7
 800f174:	47c0      	blx	r8
 800f176:	4306      	orrs	r6, r0
 800f178:	3568      	adds	r5, #104	@ 0x68
 800f17a:	e7e9      	b.n	800f150 <_fwalk_sglue+0x10>

0800f17c <siprintf>:
 800f17c:	b40e      	push	{r1, r2, r3}
 800f17e:	b500      	push	{lr}
 800f180:	b09c      	sub	sp, #112	@ 0x70
 800f182:	ab1d      	add	r3, sp, #116	@ 0x74
 800f184:	9002      	str	r0, [sp, #8]
 800f186:	9006      	str	r0, [sp, #24]
 800f188:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f18c:	4809      	ldr	r0, [pc, #36]	@ (800f1b4 <siprintf+0x38>)
 800f18e:	9107      	str	r1, [sp, #28]
 800f190:	9104      	str	r1, [sp, #16]
 800f192:	4909      	ldr	r1, [pc, #36]	@ (800f1b8 <siprintf+0x3c>)
 800f194:	f853 2b04 	ldr.w	r2, [r3], #4
 800f198:	9105      	str	r1, [sp, #20]
 800f19a:	6800      	ldr	r0, [r0, #0]
 800f19c:	9301      	str	r3, [sp, #4]
 800f19e:	a902      	add	r1, sp, #8
 800f1a0:	f001 fbfc 	bl	801099c <_svfiprintf_r>
 800f1a4:	9b02      	ldr	r3, [sp, #8]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	701a      	strb	r2, [r3, #0]
 800f1aa:	b01c      	add	sp, #112	@ 0x70
 800f1ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1b0:	b003      	add	sp, #12
 800f1b2:	4770      	bx	lr
 800f1b4:	20000584 	.word	0x20000584
 800f1b8:	ffff0208 	.word	0xffff0208

0800f1bc <__sread>:
 800f1bc:	b510      	push	{r4, lr}
 800f1be:	460c      	mov	r4, r1
 800f1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1c4:	f000 f86c 	bl	800f2a0 <_read_r>
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	bfab      	itete	ge
 800f1cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f1ce:	89a3      	ldrhlt	r3, [r4, #12]
 800f1d0:	181b      	addge	r3, r3, r0
 800f1d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f1d6:	bfac      	ite	ge
 800f1d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f1da:	81a3      	strhlt	r3, [r4, #12]
 800f1dc:	bd10      	pop	{r4, pc}

0800f1de <__swrite>:
 800f1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1e2:	461f      	mov	r7, r3
 800f1e4:	898b      	ldrh	r3, [r1, #12]
 800f1e6:	05db      	lsls	r3, r3, #23
 800f1e8:	4605      	mov	r5, r0
 800f1ea:	460c      	mov	r4, r1
 800f1ec:	4616      	mov	r6, r2
 800f1ee:	d505      	bpl.n	800f1fc <__swrite+0x1e>
 800f1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1f4:	2302      	movs	r3, #2
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	f000 f840 	bl	800f27c <_lseek_r>
 800f1fc:	89a3      	ldrh	r3, [r4, #12]
 800f1fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f202:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f206:	81a3      	strh	r3, [r4, #12]
 800f208:	4632      	mov	r2, r6
 800f20a:	463b      	mov	r3, r7
 800f20c:	4628      	mov	r0, r5
 800f20e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f212:	f000 b857 	b.w	800f2c4 <_write_r>

0800f216 <__sseek>:
 800f216:	b510      	push	{r4, lr}
 800f218:	460c      	mov	r4, r1
 800f21a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f21e:	f000 f82d 	bl	800f27c <_lseek_r>
 800f222:	1c43      	adds	r3, r0, #1
 800f224:	89a3      	ldrh	r3, [r4, #12]
 800f226:	bf15      	itete	ne
 800f228:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f22a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f22e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f232:	81a3      	strheq	r3, [r4, #12]
 800f234:	bf18      	it	ne
 800f236:	81a3      	strhne	r3, [r4, #12]
 800f238:	bd10      	pop	{r4, pc}

0800f23a <__sclose>:
 800f23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f23e:	f000 b80d 	b.w	800f25c <_close_r>

0800f242 <memset>:
 800f242:	4402      	add	r2, r0
 800f244:	4603      	mov	r3, r0
 800f246:	4293      	cmp	r3, r2
 800f248:	d100      	bne.n	800f24c <memset+0xa>
 800f24a:	4770      	bx	lr
 800f24c:	f803 1b01 	strb.w	r1, [r3], #1
 800f250:	e7f9      	b.n	800f246 <memset+0x4>
	...

0800f254 <_localeconv_r>:
 800f254:	4800      	ldr	r0, [pc, #0]	@ (800f258 <_localeconv_r+0x4>)
 800f256:	4770      	bx	lr
 800f258:	200006c4 	.word	0x200006c4

0800f25c <_close_r>:
 800f25c:	b538      	push	{r3, r4, r5, lr}
 800f25e:	4d06      	ldr	r5, [pc, #24]	@ (800f278 <_close_r+0x1c>)
 800f260:	2300      	movs	r3, #0
 800f262:	4604      	mov	r4, r0
 800f264:	4608      	mov	r0, r1
 800f266:	602b      	str	r3, [r5, #0]
 800f268:	f7f3 f900 	bl	800246c <_close>
 800f26c:	1c43      	adds	r3, r0, #1
 800f26e:	d102      	bne.n	800f276 <_close_r+0x1a>
 800f270:	682b      	ldr	r3, [r5, #0]
 800f272:	b103      	cbz	r3, 800f276 <_close_r+0x1a>
 800f274:	6023      	str	r3, [r4, #0]
 800f276:	bd38      	pop	{r3, r4, r5, pc}
 800f278:	20001dd4 	.word	0x20001dd4

0800f27c <_lseek_r>:
 800f27c:	b538      	push	{r3, r4, r5, lr}
 800f27e:	4d07      	ldr	r5, [pc, #28]	@ (800f29c <_lseek_r+0x20>)
 800f280:	4604      	mov	r4, r0
 800f282:	4608      	mov	r0, r1
 800f284:	4611      	mov	r1, r2
 800f286:	2200      	movs	r2, #0
 800f288:	602a      	str	r2, [r5, #0]
 800f28a:	461a      	mov	r2, r3
 800f28c:	f7f3 f915 	bl	80024ba <_lseek>
 800f290:	1c43      	adds	r3, r0, #1
 800f292:	d102      	bne.n	800f29a <_lseek_r+0x1e>
 800f294:	682b      	ldr	r3, [r5, #0]
 800f296:	b103      	cbz	r3, 800f29a <_lseek_r+0x1e>
 800f298:	6023      	str	r3, [r4, #0]
 800f29a:	bd38      	pop	{r3, r4, r5, pc}
 800f29c:	20001dd4 	.word	0x20001dd4

0800f2a0 <_read_r>:
 800f2a0:	b538      	push	{r3, r4, r5, lr}
 800f2a2:	4d07      	ldr	r5, [pc, #28]	@ (800f2c0 <_read_r+0x20>)
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	4608      	mov	r0, r1
 800f2a8:	4611      	mov	r1, r2
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	602a      	str	r2, [r5, #0]
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	f7f3 f8a3 	bl	80023fa <_read>
 800f2b4:	1c43      	adds	r3, r0, #1
 800f2b6:	d102      	bne.n	800f2be <_read_r+0x1e>
 800f2b8:	682b      	ldr	r3, [r5, #0]
 800f2ba:	b103      	cbz	r3, 800f2be <_read_r+0x1e>
 800f2bc:	6023      	str	r3, [r4, #0]
 800f2be:	bd38      	pop	{r3, r4, r5, pc}
 800f2c0:	20001dd4 	.word	0x20001dd4

0800f2c4 <_write_r>:
 800f2c4:	b538      	push	{r3, r4, r5, lr}
 800f2c6:	4d07      	ldr	r5, [pc, #28]	@ (800f2e4 <_write_r+0x20>)
 800f2c8:	4604      	mov	r4, r0
 800f2ca:	4608      	mov	r0, r1
 800f2cc:	4611      	mov	r1, r2
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	602a      	str	r2, [r5, #0]
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	f7f3 f8ae 	bl	8002434 <_write>
 800f2d8:	1c43      	adds	r3, r0, #1
 800f2da:	d102      	bne.n	800f2e2 <_write_r+0x1e>
 800f2dc:	682b      	ldr	r3, [r5, #0]
 800f2de:	b103      	cbz	r3, 800f2e2 <_write_r+0x1e>
 800f2e0:	6023      	str	r3, [r4, #0]
 800f2e2:	bd38      	pop	{r3, r4, r5, pc}
 800f2e4:	20001dd4 	.word	0x20001dd4

0800f2e8 <__errno>:
 800f2e8:	4b01      	ldr	r3, [pc, #4]	@ (800f2f0 <__errno+0x8>)
 800f2ea:	6818      	ldr	r0, [r3, #0]
 800f2ec:	4770      	bx	lr
 800f2ee:	bf00      	nop
 800f2f0:	20000584 	.word	0x20000584

0800f2f4 <__libc_init_array>:
 800f2f4:	b570      	push	{r4, r5, r6, lr}
 800f2f6:	4d0d      	ldr	r5, [pc, #52]	@ (800f32c <__libc_init_array+0x38>)
 800f2f8:	4c0d      	ldr	r4, [pc, #52]	@ (800f330 <__libc_init_array+0x3c>)
 800f2fa:	1b64      	subs	r4, r4, r5
 800f2fc:	10a4      	asrs	r4, r4, #2
 800f2fe:	2600      	movs	r6, #0
 800f300:	42a6      	cmp	r6, r4
 800f302:	d109      	bne.n	800f318 <__libc_init_array+0x24>
 800f304:	4d0b      	ldr	r5, [pc, #44]	@ (800f334 <__libc_init_array+0x40>)
 800f306:	4c0c      	ldr	r4, [pc, #48]	@ (800f338 <__libc_init_array+0x44>)
 800f308:	f002 f866 	bl	80113d8 <_init>
 800f30c:	1b64      	subs	r4, r4, r5
 800f30e:	10a4      	asrs	r4, r4, #2
 800f310:	2600      	movs	r6, #0
 800f312:	42a6      	cmp	r6, r4
 800f314:	d105      	bne.n	800f322 <__libc_init_array+0x2e>
 800f316:	bd70      	pop	{r4, r5, r6, pc}
 800f318:	f855 3b04 	ldr.w	r3, [r5], #4
 800f31c:	4798      	blx	r3
 800f31e:	3601      	adds	r6, #1
 800f320:	e7ee      	b.n	800f300 <__libc_init_array+0xc>
 800f322:	f855 3b04 	ldr.w	r3, [r5], #4
 800f326:	4798      	blx	r3
 800f328:	3601      	adds	r6, #1
 800f32a:	e7f2      	b.n	800f312 <__libc_init_array+0x1e>
 800f32c:	08011818 	.word	0x08011818
 800f330:	08011818 	.word	0x08011818
 800f334:	08011818 	.word	0x08011818
 800f338:	0801181c 	.word	0x0801181c

0800f33c <__retarget_lock_init_recursive>:
 800f33c:	4770      	bx	lr

0800f33e <__retarget_lock_acquire_recursive>:
 800f33e:	4770      	bx	lr

0800f340 <__retarget_lock_release_recursive>:
 800f340:	4770      	bx	lr

0800f342 <quorem>:
 800f342:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f346:	6903      	ldr	r3, [r0, #16]
 800f348:	690c      	ldr	r4, [r1, #16]
 800f34a:	42a3      	cmp	r3, r4
 800f34c:	4607      	mov	r7, r0
 800f34e:	db7e      	blt.n	800f44e <quorem+0x10c>
 800f350:	3c01      	subs	r4, #1
 800f352:	f101 0814 	add.w	r8, r1, #20
 800f356:	00a3      	lsls	r3, r4, #2
 800f358:	f100 0514 	add.w	r5, r0, #20
 800f35c:	9300      	str	r3, [sp, #0]
 800f35e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f362:	9301      	str	r3, [sp, #4]
 800f364:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f368:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f36c:	3301      	adds	r3, #1
 800f36e:	429a      	cmp	r2, r3
 800f370:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f374:	fbb2 f6f3 	udiv	r6, r2, r3
 800f378:	d32e      	bcc.n	800f3d8 <quorem+0x96>
 800f37a:	f04f 0a00 	mov.w	sl, #0
 800f37e:	46c4      	mov	ip, r8
 800f380:	46ae      	mov	lr, r5
 800f382:	46d3      	mov	fp, sl
 800f384:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f388:	b298      	uxth	r0, r3
 800f38a:	fb06 a000 	mla	r0, r6, r0, sl
 800f38e:	0c02      	lsrs	r2, r0, #16
 800f390:	0c1b      	lsrs	r3, r3, #16
 800f392:	fb06 2303 	mla	r3, r6, r3, r2
 800f396:	f8de 2000 	ldr.w	r2, [lr]
 800f39a:	b280      	uxth	r0, r0
 800f39c:	b292      	uxth	r2, r2
 800f39e:	1a12      	subs	r2, r2, r0
 800f3a0:	445a      	add	r2, fp
 800f3a2:	f8de 0000 	ldr.w	r0, [lr]
 800f3a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f3b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f3b4:	b292      	uxth	r2, r2
 800f3b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f3ba:	45e1      	cmp	r9, ip
 800f3bc:	f84e 2b04 	str.w	r2, [lr], #4
 800f3c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f3c4:	d2de      	bcs.n	800f384 <quorem+0x42>
 800f3c6:	9b00      	ldr	r3, [sp, #0]
 800f3c8:	58eb      	ldr	r3, [r5, r3]
 800f3ca:	b92b      	cbnz	r3, 800f3d8 <quorem+0x96>
 800f3cc:	9b01      	ldr	r3, [sp, #4]
 800f3ce:	3b04      	subs	r3, #4
 800f3d0:	429d      	cmp	r5, r3
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	d32f      	bcc.n	800f436 <quorem+0xf4>
 800f3d6:	613c      	str	r4, [r7, #16]
 800f3d8:	4638      	mov	r0, r7
 800f3da:	f001 f97b 	bl	80106d4 <__mcmp>
 800f3de:	2800      	cmp	r0, #0
 800f3e0:	db25      	blt.n	800f42e <quorem+0xec>
 800f3e2:	4629      	mov	r1, r5
 800f3e4:	2000      	movs	r0, #0
 800f3e6:	f858 2b04 	ldr.w	r2, [r8], #4
 800f3ea:	f8d1 c000 	ldr.w	ip, [r1]
 800f3ee:	fa1f fe82 	uxth.w	lr, r2
 800f3f2:	fa1f f38c 	uxth.w	r3, ip
 800f3f6:	eba3 030e 	sub.w	r3, r3, lr
 800f3fa:	4403      	add	r3, r0
 800f3fc:	0c12      	lsrs	r2, r2, #16
 800f3fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f402:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f406:	b29b      	uxth	r3, r3
 800f408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f40c:	45c1      	cmp	r9, r8
 800f40e:	f841 3b04 	str.w	r3, [r1], #4
 800f412:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f416:	d2e6      	bcs.n	800f3e6 <quorem+0xa4>
 800f418:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f41c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f420:	b922      	cbnz	r2, 800f42c <quorem+0xea>
 800f422:	3b04      	subs	r3, #4
 800f424:	429d      	cmp	r5, r3
 800f426:	461a      	mov	r2, r3
 800f428:	d30b      	bcc.n	800f442 <quorem+0x100>
 800f42a:	613c      	str	r4, [r7, #16]
 800f42c:	3601      	adds	r6, #1
 800f42e:	4630      	mov	r0, r6
 800f430:	b003      	add	sp, #12
 800f432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f436:	6812      	ldr	r2, [r2, #0]
 800f438:	3b04      	subs	r3, #4
 800f43a:	2a00      	cmp	r2, #0
 800f43c:	d1cb      	bne.n	800f3d6 <quorem+0x94>
 800f43e:	3c01      	subs	r4, #1
 800f440:	e7c6      	b.n	800f3d0 <quorem+0x8e>
 800f442:	6812      	ldr	r2, [r2, #0]
 800f444:	3b04      	subs	r3, #4
 800f446:	2a00      	cmp	r2, #0
 800f448:	d1ef      	bne.n	800f42a <quorem+0xe8>
 800f44a:	3c01      	subs	r4, #1
 800f44c:	e7ea      	b.n	800f424 <quorem+0xe2>
 800f44e:	2000      	movs	r0, #0
 800f450:	e7ee      	b.n	800f430 <quorem+0xee>
 800f452:	0000      	movs	r0, r0
 800f454:	0000      	movs	r0, r0
	...

0800f458 <_dtoa_r>:
 800f458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f45c:	69c7      	ldr	r7, [r0, #28]
 800f45e:	b099      	sub	sp, #100	@ 0x64
 800f460:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f464:	ec55 4b10 	vmov	r4, r5, d0
 800f468:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f46a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f46c:	4683      	mov	fp, r0
 800f46e:	920e      	str	r2, [sp, #56]	@ 0x38
 800f470:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f472:	b97f      	cbnz	r7, 800f494 <_dtoa_r+0x3c>
 800f474:	2010      	movs	r0, #16
 800f476:	f000 fdfd 	bl	8010074 <malloc>
 800f47a:	4602      	mov	r2, r0
 800f47c:	f8cb 001c 	str.w	r0, [fp, #28]
 800f480:	b920      	cbnz	r0, 800f48c <_dtoa_r+0x34>
 800f482:	4ba7      	ldr	r3, [pc, #668]	@ (800f720 <_dtoa_r+0x2c8>)
 800f484:	21ef      	movs	r1, #239	@ 0xef
 800f486:	48a7      	ldr	r0, [pc, #668]	@ (800f724 <_dtoa_r+0x2cc>)
 800f488:	f001 fc68 	bl	8010d5c <__assert_func>
 800f48c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f490:	6007      	str	r7, [r0, #0]
 800f492:	60c7      	str	r7, [r0, #12]
 800f494:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f498:	6819      	ldr	r1, [r3, #0]
 800f49a:	b159      	cbz	r1, 800f4b4 <_dtoa_r+0x5c>
 800f49c:	685a      	ldr	r2, [r3, #4]
 800f49e:	604a      	str	r2, [r1, #4]
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	4093      	lsls	r3, r2
 800f4a4:	608b      	str	r3, [r1, #8]
 800f4a6:	4658      	mov	r0, fp
 800f4a8:	f000 feda 	bl	8010260 <_Bfree>
 800f4ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	601a      	str	r2, [r3, #0]
 800f4b4:	1e2b      	subs	r3, r5, #0
 800f4b6:	bfb9      	ittee	lt
 800f4b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f4bc:	9303      	strlt	r3, [sp, #12]
 800f4be:	2300      	movge	r3, #0
 800f4c0:	6033      	strge	r3, [r6, #0]
 800f4c2:	9f03      	ldr	r7, [sp, #12]
 800f4c4:	4b98      	ldr	r3, [pc, #608]	@ (800f728 <_dtoa_r+0x2d0>)
 800f4c6:	bfbc      	itt	lt
 800f4c8:	2201      	movlt	r2, #1
 800f4ca:	6032      	strlt	r2, [r6, #0]
 800f4cc:	43bb      	bics	r3, r7
 800f4ce:	d112      	bne.n	800f4f6 <_dtoa_r+0x9e>
 800f4d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f4d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f4d6:	6013      	str	r3, [r2, #0]
 800f4d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f4dc:	4323      	orrs	r3, r4
 800f4de:	f000 854d 	beq.w	800ff7c <_dtoa_r+0xb24>
 800f4e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f4e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f73c <_dtoa_r+0x2e4>
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	f000 854f 	beq.w	800ff8c <_dtoa_r+0xb34>
 800f4ee:	f10a 0303 	add.w	r3, sl, #3
 800f4f2:	f000 bd49 	b.w	800ff88 <_dtoa_r+0xb30>
 800f4f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	ec51 0b17 	vmov	r0, r1, d7
 800f500:	2300      	movs	r3, #0
 800f502:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f506:	f7f1 fb07 	bl	8000b18 <__aeabi_dcmpeq>
 800f50a:	4680      	mov	r8, r0
 800f50c:	b158      	cbz	r0, 800f526 <_dtoa_r+0xce>
 800f50e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f510:	2301      	movs	r3, #1
 800f512:	6013      	str	r3, [r2, #0]
 800f514:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f516:	b113      	cbz	r3, 800f51e <_dtoa_r+0xc6>
 800f518:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f51a:	4b84      	ldr	r3, [pc, #528]	@ (800f72c <_dtoa_r+0x2d4>)
 800f51c:	6013      	str	r3, [r2, #0]
 800f51e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f740 <_dtoa_r+0x2e8>
 800f522:	f000 bd33 	b.w	800ff8c <_dtoa_r+0xb34>
 800f526:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f52a:	aa16      	add	r2, sp, #88	@ 0x58
 800f52c:	a917      	add	r1, sp, #92	@ 0x5c
 800f52e:	4658      	mov	r0, fp
 800f530:	f001 f980 	bl	8010834 <__d2b>
 800f534:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f538:	4681      	mov	r9, r0
 800f53a:	2e00      	cmp	r6, #0
 800f53c:	d077      	beq.n	800f62e <_dtoa_r+0x1d6>
 800f53e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f540:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f54c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f550:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f554:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f558:	4619      	mov	r1, r3
 800f55a:	2200      	movs	r2, #0
 800f55c:	4b74      	ldr	r3, [pc, #464]	@ (800f730 <_dtoa_r+0x2d8>)
 800f55e:	f7f0 febb 	bl	80002d8 <__aeabi_dsub>
 800f562:	a369      	add	r3, pc, #420	@ (adr r3, 800f708 <_dtoa_r+0x2b0>)
 800f564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f568:	f7f1 f86e 	bl	8000648 <__aeabi_dmul>
 800f56c:	a368      	add	r3, pc, #416	@ (adr r3, 800f710 <_dtoa_r+0x2b8>)
 800f56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f572:	f7f0 feb3 	bl	80002dc <__adddf3>
 800f576:	4604      	mov	r4, r0
 800f578:	4630      	mov	r0, r6
 800f57a:	460d      	mov	r5, r1
 800f57c:	f7f0 fffa 	bl	8000574 <__aeabi_i2d>
 800f580:	a365      	add	r3, pc, #404	@ (adr r3, 800f718 <_dtoa_r+0x2c0>)
 800f582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f586:	f7f1 f85f 	bl	8000648 <__aeabi_dmul>
 800f58a:	4602      	mov	r2, r0
 800f58c:	460b      	mov	r3, r1
 800f58e:	4620      	mov	r0, r4
 800f590:	4629      	mov	r1, r5
 800f592:	f7f0 fea3 	bl	80002dc <__adddf3>
 800f596:	4604      	mov	r4, r0
 800f598:	460d      	mov	r5, r1
 800f59a:	f7f1 fb05 	bl	8000ba8 <__aeabi_d2iz>
 800f59e:	2200      	movs	r2, #0
 800f5a0:	4607      	mov	r7, r0
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	4629      	mov	r1, r5
 800f5a8:	f7f1 fac0 	bl	8000b2c <__aeabi_dcmplt>
 800f5ac:	b140      	cbz	r0, 800f5c0 <_dtoa_r+0x168>
 800f5ae:	4638      	mov	r0, r7
 800f5b0:	f7f0 ffe0 	bl	8000574 <__aeabi_i2d>
 800f5b4:	4622      	mov	r2, r4
 800f5b6:	462b      	mov	r3, r5
 800f5b8:	f7f1 faae 	bl	8000b18 <__aeabi_dcmpeq>
 800f5bc:	b900      	cbnz	r0, 800f5c0 <_dtoa_r+0x168>
 800f5be:	3f01      	subs	r7, #1
 800f5c0:	2f16      	cmp	r7, #22
 800f5c2:	d851      	bhi.n	800f668 <_dtoa_r+0x210>
 800f5c4:	4b5b      	ldr	r3, [pc, #364]	@ (800f734 <_dtoa_r+0x2dc>)
 800f5c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f5d2:	f7f1 faab 	bl	8000b2c <__aeabi_dcmplt>
 800f5d6:	2800      	cmp	r0, #0
 800f5d8:	d048      	beq.n	800f66c <_dtoa_r+0x214>
 800f5da:	3f01      	subs	r7, #1
 800f5dc:	2300      	movs	r3, #0
 800f5de:	9312      	str	r3, [sp, #72]	@ 0x48
 800f5e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f5e2:	1b9b      	subs	r3, r3, r6
 800f5e4:	1e5a      	subs	r2, r3, #1
 800f5e6:	bf44      	itt	mi
 800f5e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800f5ec:	2300      	movmi	r3, #0
 800f5ee:	9208      	str	r2, [sp, #32]
 800f5f0:	bf54      	ite	pl
 800f5f2:	f04f 0800 	movpl.w	r8, #0
 800f5f6:	9308      	strmi	r3, [sp, #32]
 800f5f8:	2f00      	cmp	r7, #0
 800f5fa:	db39      	blt.n	800f670 <_dtoa_r+0x218>
 800f5fc:	9b08      	ldr	r3, [sp, #32]
 800f5fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f600:	443b      	add	r3, r7
 800f602:	9308      	str	r3, [sp, #32]
 800f604:	2300      	movs	r3, #0
 800f606:	930a      	str	r3, [sp, #40]	@ 0x28
 800f608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f60a:	2b09      	cmp	r3, #9
 800f60c:	d864      	bhi.n	800f6d8 <_dtoa_r+0x280>
 800f60e:	2b05      	cmp	r3, #5
 800f610:	bfc4      	itt	gt
 800f612:	3b04      	subgt	r3, #4
 800f614:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f618:	f1a3 0302 	sub.w	r3, r3, #2
 800f61c:	bfcc      	ite	gt
 800f61e:	2400      	movgt	r4, #0
 800f620:	2401      	movle	r4, #1
 800f622:	2b03      	cmp	r3, #3
 800f624:	d863      	bhi.n	800f6ee <_dtoa_r+0x296>
 800f626:	e8df f003 	tbb	[pc, r3]
 800f62a:	372a      	.short	0x372a
 800f62c:	5535      	.short	0x5535
 800f62e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f632:	441e      	add	r6, r3
 800f634:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f638:	2b20      	cmp	r3, #32
 800f63a:	bfc1      	itttt	gt
 800f63c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f640:	409f      	lslgt	r7, r3
 800f642:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f646:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f64a:	bfd6      	itet	le
 800f64c:	f1c3 0320 	rsble	r3, r3, #32
 800f650:	ea47 0003 	orrgt.w	r0, r7, r3
 800f654:	fa04 f003 	lslle.w	r0, r4, r3
 800f658:	f7f0 ff7c 	bl	8000554 <__aeabi_ui2d>
 800f65c:	2201      	movs	r2, #1
 800f65e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f662:	3e01      	subs	r6, #1
 800f664:	9214      	str	r2, [sp, #80]	@ 0x50
 800f666:	e777      	b.n	800f558 <_dtoa_r+0x100>
 800f668:	2301      	movs	r3, #1
 800f66a:	e7b8      	b.n	800f5de <_dtoa_r+0x186>
 800f66c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f66e:	e7b7      	b.n	800f5e0 <_dtoa_r+0x188>
 800f670:	427b      	negs	r3, r7
 800f672:	930a      	str	r3, [sp, #40]	@ 0x28
 800f674:	2300      	movs	r3, #0
 800f676:	eba8 0807 	sub.w	r8, r8, r7
 800f67a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f67c:	e7c4      	b.n	800f608 <_dtoa_r+0x1b0>
 800f67e:	2300      	movs	r3, #0
 800f680:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f684:	2b00      	cmp	r3, #0
 800f686:	dc35      	bgt.n	800f6f4 <_dtoa_r+0x29c>
 800f688:	2301      	movs	r3, #1
 800f68a:	9300      	str	r3, [sp, #0]
 800f68c:	9307      	str	r3, [sp, #28]
 800f68e:	461a      	mov	r2, r3
 800f690:	920e      	str	r2, [sp, #56]	@ 0x38
 800f692:	e00b      	b.n	800f6ac <_dtoa_r+0x254>
 800f694:	2301      	movs	r3, #1
 800f696:	e7f3      	b.n	800f680 <_dtoa_r+0x228>
 800f698:	2300      	movs	r3, #0
 800f69a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f69c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f69e:	18fb      	adds	r3, r7, r3
 800f6a0:	9300      	str	r3, [sp, #0]
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	2b01      	cmp	r3, #1
 800f6a6:	9307      	str	r3, [sp, #28]
 800f6a8:	bfb8      	it	lt
 800f6aa:	2301      	movlt	r3, #1
 800f6ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f6b0:	2100      	movs	r1, #0
 800f6b2:	2204      	movs	r2, #4
 800f6b4:	f102 0514 	add.w	r5, r2, #20
 800f6b8:	429d      	cmp	r5, r3
 800f6ba:	d91f      	bls.n	800f6fc <_dtoa_r+0x2a4>
 800f6bc:	6041      	str	r1, [r0, #4]
 800f6be:	4658      	mov	r0, fp
 800f6c0:	f000 fd8e 	bl	80101e0 <_Balloc>
 800f6c4:	4682      	mov	sl, r0
 800f6c6:	2800      	cmp	r0, #0
 800f6c8:	d13c      	bne.n	800f744 <_dtoa_r+0x2ec>
 800f6ca:	4b1b      	ldr	r3, [pc, #108]	@ (800f738 <_dtoa_r+0x2e0>)
 800f6cc:	4602      	mov	r2, r0
 800f6ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800f6d2:	e6d8      	b.n	800f486 <_dtoa_r+0x2e>
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	e7e0      	b.n	800f69a <_dtoa_r+0x242>
 800f6d8:	2401      	movs	r4, #1
 800f6da:	2300      	movs	r3, #0
 800f6dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f6e4:	9300      	str	r3, [sp, #0]
 800f6e6:	9307      	str	r3, [sp, #28]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	2312      	movs	r3, #18
 800f6ec:	e7d0      	b.n	800f690 <_dtoa_r+0x238>
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6f2:	e7f5      	b.n	800f6e0 <_dtoa_r+0x288>
 800f6f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6f6:	9300      	str	r3, [sp, #0]
 800f6f8:	9307      	str	r3, [sp, #28]
 800f6fa:	e7d7      	b.n	800f6ac <_dtoa_r+0x254>
 800f6fc:	3101      	adds	r1, #1
 800f6fe:	0052      	lsls	r2, r2, #1
 800f700:	e7d8      	b.n	800f6b4 <_dtoa_r+0x25c>
 800f702:	bf00      	nop
 800f704:	f3af 8000 	nop.w
 800f708:	636f4361 	.word	0x636f4361
 800f70c:	3fd287a7 	.word	0x3fd287a7
 800f710:	8b60c8b3 	.word	0x8b60c8b3
 800f714:	3fc68a28 	.word	0x3fc68a28
 800f718:	509f79fb 	.word	0x509f79fb
 800f71c:	3fd34413 	.word	0x3fd34413
 800f720:	080114e1 	.word	0x080114e1
 800f724:	080114f8 	.word	0x080114f8
 800f728:	7ff00000 	.word	0x7ff00000
 800f72c:	080114b1 	.word	0x080114b1
 800f730:	3ff80000 	.word	0x3ff80000
 800f734:	080115f0 	.word	0x080115f0
 800f738:	08011550 	.word	0x08011550
 800f73c:	080114dd 	.word	0x080114dd
 800f740:	080114b0 	.word	0x080114b0
 800f744:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f748:	6018      	str	r0, [r3, #0]
 800f74a:	9b07      	ldr	r3, [sp, #28]
 800f74c:	2b0e      	cmp	r3, #14
 800f74e:	f200 80a4 	bhi.w	800f89a <_dtoa_r+0x442>
 800f752:	2c00      	cmp	r4, #0
 800f754:	f000 80a1 	beq.w	800f89a <_dtoa_r+0x442>
 800f758:	2f00      	cmp	r7, #0
 800f75a:	dd33      	ble.n	800f7c4 <_dtoa_r+0x36c>
 800f75c:	4bad      	ldr	r3, [pc, #692]	@ (800fa14 <_dtoa_r+0x5bc>)
 800f75e:	f007 020f 	and.w	r2, r7, #15
 800f762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f766:	ed93 7b00 	vldr	d7, [r3]
 800f76a:	05f8      	lsls	r0, r7, #23
 800f76c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f770:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f774:	d516      	bpl.n	800f7a4 <_dtoa_r+0x34c>
 800f776:	4ba8      	ldr	r3, [pc, #672]	@ (800fa18 <_dtoa_r+0x5c0>)
 800f778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f77c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f780:	f7f1 f88c 	bl	800089c <__aeabi_ddiv>
 800f784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f788:	f004 040f 	and.w	r4, r4, #15
 800f78c:	2603      	movs	r6, #3
 800f78e:	4da2      	ldr	r5, [pc, #648]	@ (800fa18 <_dtoa_r+0x5c0>)
 800f790:	b954      	cbnz	r4, 800f7a8 <_dtoa_r+0x350>
 800f792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f79a:	f7f1 f87f 	bl	800089c <__aeabi_ddiv>
 800f79e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7a2:	e028      	b.n	800f7f6 <_dtoa_r+0x39e>
 800f7a4:	2602      	movs	r6, #2
 800f7a6:	e7f2      	b.n	800f78e <_dtoa_r+0x336>
 800f7a8:	07e1      	lsls	r1, r4, #31
 800f7aa:	d508      	bpl.n	800f7be <_dtoa_r+0x366>
 800f7ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f7b4:	f7f0 ff48 	bl	8000648 <__aeabi_dmul>
 800f7b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f7bc:	3601      	adds	r6, #1
 800f7be:	1064      	asrs	r4, r4, #1
 800f7c0:	3508      	adds	r5, #8
 800f7c2:	e7e5      	b.n	800f790 <_dtoa_r+0x338>
 800f7c4:	f000 80d2 	beq.w	800f96c <_dtoa_r+0x514>
 800f7c8:	427c      	negs	r4, r7
 800f7ca:	4b92      	ldr	r3, [pc, #584]	@ (800fa14 <_dtoa_r+0x5bc>)
 800f7cc:	4d92      	ldr	r5, [pc, #584]	@ (800fa18 <_dtoa_r+0x5c0>)
 800f7ce:	f004 020f 	and.w	r2, r4, #15
 800f7d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f7de:	f7f0 ff33 	bl	8000648 <__aeabi_dmul>
 800f7e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7e6:	1124      	asrs	r4, r4, #4
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	2602      	movs	r6, #2
 800f7ec:	2c00      	cmp	r4, #0
 800f7ee:	f040 80b2 	bne.w	800f956 <_dtoa_r+0x4fe>
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d1d3      	bne.n	800f79e <_dtoa_r+0x346>
 800f7f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f7f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	f000 80b7 	beq.w	800f970 <_dtoa_r+0x518>
 800f802:	4b86      	ldr	r3, [pc, #536]	@ (800fa1c <_dtoa_r+0x5c4>)
 800f804:	2200      	movs	r2, #0
 800f806:	4620      	mov	r0, r4
 800f808:	4629      	mov	r1, r5
 800f80a:	f7f1 f98f 	bl	8000b2c <__aeabi_dcmplt>
 800f80e:	2800      	cmp	r0, #0
 800f810:	f000 80ae 	beq.w	800f970 <_dtoa_r+0x518>
 800f814:	9b07      	ldr	r3, [sp, #28]
 800f816:	2b00      	cmp	r3, #0
 800f818:	f000 80aa 	beq.w	800f970 <_dtoa_r+0x518>
 800f81c:	9b00      	ldr	r3, [sp, #0]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	dd37      	ble.n	800f892 <_dtoa_r+0x43a>
 800f822:	1e7b      	subs	r3, r7, #1
 800f824:	9304      	str	r3, [sp, #16]
 800f826:	4620      	mov	r0, r4
 800f828:	4b7d      	ldr	r3, [pc, #500]	@ (800fa20 <_dtoa_r+0x5c8>)
 800f82a:	2200      	movs	r2, #0
 800f82c:	4629      	mov	r1, r5
 800f82e:	f7f0 ff0b 	bl	8000648 <__aeabi_dmul>
 800f832:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f836:	9c00      	ldr	r4, [sp, #0]
 800f838:	3601      	adds	r6, #1
 800f83a:	4630      	mov	r0, r6
 800f83c:	f7f0 fe9a 	bl	8000574 <__aeabi_i2d>
 800f840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f844:	f7f0 ff00 	bl	8000648 <__aeabi_dmul>
 800f848:	4b76      	ldr	r3, [pc, #472]	@ (800fa24 <_dtoa_r+0x5cc>)
 800f84a:	2200      	movs	r2, #0
 800f84c:	f7f0 fd46 	bl	80002dc <__adddf3>
 800f850:	4605      	mov	r5, r0
 800f852:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f856:	2c00      	cmp	r4, #0
 800f858:	f040 808d 	bne.w	800f976 <_dtoa_r+0x51e>
 800f85c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f860:	4b71      	ldr	r3, [pc, #452]	@ (800fa28 <_dtoa_r+0x5d0>)
 800f862:	2200      	movs	r2, #0
 800f864:	f7f0 fd38 	bl	80002d8 <__aeabi_dsub>
 800f868:	4602      	mov	r2, r0
 800f86a:	460b      	mov	r3, r1
 800f86c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f870:	462a      	mov	r2, r5
 800f872:	4633      	mov	r3, r6
 800f874:	f7f1 f978 	bl	8000b68 <__aeabi_dcmpgt>
 800f878:	2800      	cmp	r0, #0
 800f87a:	f040 828b 	bne.w	800fd94 <_dtoa_r+0x93c>
 800f87e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f882:	462a      	mov	r2, r5
 800f884:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f888:	f7f1 f950 	bl	8000b2c <__aeabi_dcmplt>
 800f88c:	2800      	cmp	r0, #0
 800f88e:	f040 8128 	bne.w	800fae2 <_dtoa_r+0x68a>
 800f892:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f896:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f89a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	f2c0 815a 	blt.w	800fb56 <_dtoa_r+0x6fe>
 800f8a2:	2f0e      	cmp	r7, #14
 800f8a4:	f300 8157 	bgt.w	800fb56 <_dtoa_r+0x6fe>
 800f8a8:	4b5a      	ldr	r3, [pc, #360]	@ (800fa14 <_dtoa_r+0x5bc>)
 800f8aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f8ae:	ed93 7b00 	vldr	d7, [r3]
 800f8b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	ed8d 7b00 	vstr	d7, [sp]
 800f8ba:	da03      	bge.n	800f8c4 <_dtoa_r+0x46c>
 800f8bc:	9b07      	ldr	r3, [sp, #28]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	f340 8101 	ble.w	800fac6 <_dtoa_r+0x66e>
 800f8c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f8c8:	4656      	mov	r6, sl
 800f8ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	4629      	mov	r1, r5
 800f8d2:	f7f0 ffe3 	bl	800089c <__aeabi_ddiv>
 800f8d6:	f7f1 f967 	bl	8000ba8 <__aeabi_d2iz>
 800f8da:	4680      	mov	r8, r0
 800f8dc:	f7f0 fe4a 	bl	8000574 <__aeabi_i2d>
 800f8e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8e4:	f7f0 feb0 	bl	8000648 <__aeabi_dmul>
 800f8e8:	4602      	mov	r2, r0
 800f8ea:	460b      	mov	r3, r1
 800f8ec:	4620      	mov	r0, r4
 800f8ee:	4629      	mov	r1, r5
 800f8f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f8f4:	f7f0 fcf0 	bl	80002d8 <__aeabi_dsub>
 800f8f8:	f806 4b01 	strb.w	r4, [r6], #1
 800f8fc:	9d07      	ldr	r5, [sp, #28]
 800f8fe:	eba6 040a 	sub.w	r4, r6, sl
 800f902:	42a5      	cmp	r5, r4
 800f904:	4602      	mov	r2, r0
 800f906:	460b      	mov	r3, r1
 800f908:	f040 8117 	bne.w	800fb3a <_dtoa_r+0x6e2>
 800f90c:	f7f0 fce6 	bl	80002dc <__adddf3>
 800f910:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f914:	4604      	mov	r4, r0
 800f916:	460d      	mov	r5, r1
 800f918:	f7f1 f926 	bl	8000b68 <__aeabi_dcmpgt>
 800f91c:	2800      	cmp	r0, #0
 800f91e:	f040 80f9 	bne.w	800fb14 <_dtoa_r+0x6bc>
 800f922:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f926:	4620      	mov	r0, r4
 800f928:	4629      	mov	r1, r5
 800f92a:	f7f1 f8f5 	bl	8000b18 <__aeabi_dcmpeq>
 800f92e:	b118      	cbz	r0, 800f938 <_dtoa_r+0x4e0>
 800f930:	f018 0f01 	tst.w	r8, #1
 800f934:	f040 80ee 	bne.w	800fb14 <_dtoa_r+0x6bc>
 800f938:	4649      	mov	r1, r9
 800f93a:	4658      	mov	r0, fp
 800f93c:	f000 fc90 	bl	8010260 <_Bfree>
 800f940:	2300      	movs	r3, #0
 800f942:	7033      	strb	r3, [r6, #0]
 800f944:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f946:	3701      	adds	r7, #1
 800f948:	601f      	str	r7, [r3, #0]
 800f94a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	f000 831d 	beq.w	800ff8c <_dtoa_r+0xb34>
 800f952:	601e      	str	r6, [r3, #0]
 800f954:	e31a      	b.n	800ff8c <_dtoa_r+0xb34>
 800f956:	07e2      	lsls	r2, r4, #31
 800f958:	d505      	bpl.n	800f966 <_dtoa_r+0x50e>
 800f95a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f95e:	f7f0 fe73 	bl	8000648 <__aeabi_dmul>
 800f962:	3601      	adds	r6, #1
 800f964:	2301      	movs	r3, #1
 800f966:	1064      	asrs	r4, r4, #1
 800f968:	3508      	adds	r5, #8
 800f96a:	e73f      	b.n	800f7ec <_dtoa_r+0x394>
 800f96c:	2602      	movs	r6, #2
 800f96e:	e742      	b.n	800f7f6 <_dtoa_r+0x39e>
 800f970:	9c07      	ldr	r4, [sp, #28]
 800f972:	9704      	str	r7, [sp, #16]
 800f974:	e761      	b.n	800f83a <_dtoa_r+0x3e2>
 800f976:	4b27      	ldr	r3, [pc, #156]	@ (800fa14 <_dtoa_r+0x5bc>)
 800f978:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f97a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f97e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f982:	4454      	add	r4, sl
 800f984:	2900      	cmp	r1, #0
 800f986:	d053      	beq.n	800fa30 <_dtoa_r+0x5d8>
 800f988:	4928      	ldr	r1, [pc, #160]	@ (800fa2c <_dtoa_r+0x5d4>)
 800f98a:	2000      	movs	r0, #0
 800f98c:	f7f0 ff86 	bl	800089c <__aeabi_ddiv>
 800f990:	4633      	mov	r3, r6
 800f992:	462a      	mov	r2, r5
 800f994:	f7f0 fca0 	bl	80002d8 <__aeabi_dsub>
 800f998:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f99c:	4656      	mov	r6, sl
 800f99e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9a2:	f7f1 f901 	bl	8000ba8 <__aeabi_d2iz>
 800f9a6:	4605      	mov	r5, r0
 800f9a8:	f7f0 fde4 	bl	8000574 <__aeabi_i2d>
 800f9ac:	4602      	mov	r2, r0
 800f9ae:	460b      	mov	r3, r1
 800f9b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9b4:	f7f0 fc90 	bl	80002d8 <__aeabi_dsub>
 800f9b8:	3530      	adds	r5, #48	@ 0x30
 800f9ba:	4602      	mov	r2, r0
 800f9bc:	460b      	mov	r3, r1
 800f9be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f9c2:	f806 5b01 	strb.w	r5, [r6], #1
 800f9c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f9ca:	f7f1 f8af 	bl	8000b2c <__aeabi_dcmplt>
 800f9ce:	2800      	cmp	r0, #0
 800f9d0:	d171      	bne.n	800fab6 <_dtoa_r+0x65e>
 800f9d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9d6:	4911      	ldr	r1, [pc, #68]	@ (800fa1c <_dtoa_r+0x5c4>)
 800f9d8:	2000      	movs	r0, #0
 800f9da:	f7f0 fc7d 	bl	80002d8 <__aeabi_dsub>
 800f9de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f9e2:	f7f1 f8a3 	bl	8000b2c <__aeabi_dcmplt>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	f040 8095 	bne.w	800fb16 <_dtoa_r+0x6be>
 800f9ec:	42a6      	cmp	r6, r4
 800f9ee:	f43f af50 	beq.w	800f892 <_dtoa_r+0x43a>
 800f9f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f9f6:	4b0a      	ldr	r3, [pc, #40]	@ (800fa20 <_dtoa_r+0x5c8>)
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	f7f0 fe25 	bl	8000648 <__aeabi_dmul>
 800f9fe:	4b08      	ldr	r3, [pc, #32]	@ (800fa20 <_dtoa_r+0x5c8>)
 800fa00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fa04:	2200      	movs	r2, #0
 800fa06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa0a:	f7f0 fe1d 	bl	8000648 <__aeabi_dmul>
 800fa0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa12:	e7c4      	b.n	800f99e <_dtoa_r+0x546>
 800fa14:	080115f0 	.word	0x080115f0
 800fa18:	080115c8 	.word	0x080115c8
 800fa1c:	3ff00000 	.word	0x3ff00000
 800fa20:	40240000 	.word	0x40240000
 800fa24:	401c0000 	.word	0x401c0000
 800fa28:	40140000 	.word	0x40140000
 800fa2c:	3fe00000 	.word	0x3fe00000
 800fa30:	4631      	mov	r1, r6
 800fa32:	4628      	mov	r0, r5
 800fa34:	f7f0 fe08 	bl	8000648 <__aeabi_dmul>
 800fa38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fa3c:	9415      	str	r4, [sp, #84]	@ 0x54
 800fa3e:	4656      	mov	r6, sl
 800fa40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa44:	f7f1 f8b0 	bl	8000ba8 <__aeabi_d2iz>
 800fa48:	4605      	mov	r5, r0
 800fa4a:	f7f0 fd93 	bl	8000574 <__aeabi_i2d>
 800fa4e:	4602      	mov	r2, r0
 800fa50:	460b      	mov	r3, r1
 800fa52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa56:	f7f0 fc3f 	bl	80002d8 <__aeabi_dsub>
 800fa5a:	3530      	adds	r5, #48	@ 0x30
 800fa5c:	f806 5b01 	strb.w	r5, [r6], #1
 800fa60:	4602      	mov	r2, r0
 800fa62:	460b      	mov	r3, r1
 800fa64:	42a6      	cmp	r6, r4
 800fa66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fa6a:	f04f 0200 	mov.w	r2, #0
 800fa6e:	d124      	bne.n	800faba <_dtoa_r+0x662>
 800fa70:	4bac      	ldr	r3, [pc, #688]	@ (800fd24 <_dtoa_r+0x8cc>)
 800fa72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fa76:	f7f0 fc31 	bl	80002dc <__adddf3>
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	460b      	mov	r3, r1
 800fa7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa82:	f7f1 f871 	bl	8000b68 <__aeabi_dcmpgt>
 800fa86:	2800      	cmp	r0, #0
 800fa88:	d145      	bne.n	800fb16 <_dtoa_r+0x6be>
 800fa8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fa8e:	49a5      	ldr	r1, [pc, #660]	@ (800fd24 <_dtoa_r+0x8cc>)
 800fa90:	2000      	movs	r0, #0
 800fa92:	f7f0 fc21 	bl	80002d8 <__aeabi_dsub>
 800fa96:	4602      	mov	r2, r0
 800fa98:	460b      	mov	r3, r1
 800fa9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa9e:	f7f1 f845 	bl	8000b2c <__aeabi_dcmplt>
 800faa2:	2800      	cmp	r0, #0
 800faa4:	f43f aef5 	beq.w	800f892 <_dtoa_r+0x43a>
 800faa8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800faaa:	1e73      	subs	r3, r6, #1
 800faac:	9315      	str	r3, [sp, #84]	@ 0x54
 800faae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fab2:	2b30      	cmp	r3, #48	@ 0x30
 800fab4:	d0f8      	beq.n	800faa8 <_dtoa_r+0x650>
 800fab6:	9f04      	ldr	r7, [sp, #16]
 800fab8:	e73e      	b.n	800f938 <_dtoa_r+0x4e0>
 800faba:	4b9b      	ldr	r3, [pc, #620]	@ (800fd28 <_dtoa_r+0x8d0>)
 800fabc:	f7f0 fdc4 	bl	8000648 <__aeabi_dmul>
 800fac0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fac4:	e7bc      	b.n	800fa40 <_dtoa_r+0x5e8>
 800fac6:	d10c      	bne.n	800fae2 <_dtoa_r+0x68a>
 800fac8:	4b98      	ldr	r3, [pc, #608]	@ (800fd2c <_dtoa_r+0x8d4>)
 800faca:	2200      	movs	r2, #0
 800facc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fad0:	f7f0 fdba 	bl	8000648 <__aeabi_dmul>
 800fad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fad8:	f7f1 f83c 	bl	8000b54 <__aeabi_dcmpge>
 800fadc:	2800      	cmp	r0, #0
 800fade:	f000 8157 	beq.w	800fd90 <_dtoa_r+0x938>
 800fae2:	2400      	movs	r4, #0
 800fae4:	4625      	mov	r5, r4
 800fae6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fae8:	43db      	mvns	r3, r3
 800faea:	9304      	str	r3, [sp, #16]
 800faec:	4656      	mov	r6, sl
 800faee:	2700      	movs	r7, #0
 800faf0:	4621      	mov	r1, r4
 800faf2:	4658      	mov	r0, fp
 800faf4:	f000 fbb4 	bl	8010260 <_Bfree>
 800faf8:	2d00      	cmp	r5, #0
 800fafa:	d0dc      	beq.n	800fab6 <_dtoa_r+0x65e>
 800fafc:	b12f      	cbz	r7, 800fb0a <_dtoa_r+0x6b2>
 800fafe:	42af      	cmp	r7, r5
 800fb00:	d003      	beq.n	800fb0a <_dtoa_r+0x6b2>
 800fb02:	4639      	mov	r1, r7
 800fb04:	4658      	mov	r0, fp
 800fb06:	f000 fbab 	bl	8010260 <_Bfree>
 800fb0a:	4629      	mov	r1, r5
 800fb0c:	4658      	mov	r0, fp
 800fb0e:	f000 fba7 	bl	8010260 <_Bfree>
 800fb12:	e7d0      	b.n	800fab6 <_dtoa_r+0x65e>
 800fb14:	9704      	str	r7, [sp, #16]
 800fb16:	4633      	mov	r3, r6
 800fb18:	461e      	mov	r6, r3
 800fb1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb1e:	2a39      	cmp	r2, #57	@ 0x39
 800fb20:	d107      	bne.n	800fb32 <_dtoa_r+0x6da>
 800fb22:	459a      	cmp	sl, r3
 800fb24:	d1f8      	bne.n	800fb18 <_dtoa_r+0x6c0>
 800fb26:	9a04      	ldr	r2, [sp, #16]
 800fb28:	3201      	adds	r2, #1
 800fb2a:	9204      	str	r2, [sp, #16]
 800fb2c:	2230      	movs	r2, #48	@ 0x30
 800fb2e:	f88a 2000 	strb.w	r2, [sl]
 800fb32:	781a      	ldrb	r2, [r3, #0]
 800fb34:	3201      	adds	r2, #1
 800fb36:	701a      	strb	r2, [r3, #0]
 800fb38:	e7bd      	b.n	800fab6 <_dtoa_r+0x65e>
 800fb3a:	4b7b      	ldr	r3, [pc, #492]	@ (800fd28 <_dtoa_r+0x8d0>)
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f7f0 fd83 	bl	8000648 <__aeabi_dmul>
 800fb42:	2200      	movs	r2, #0
 800fb44:	2300      	movs	r3, #0
 800fb46:	4604      	mov	r4, r0
 800fb48:	460d      	mov	r5, r1
 800fb4a:	f7f0 ffe5 	bl	8000b18 <__aeabi_dcmpeq>
 800fb4e:	2800      	cmp	r0, #0
 800fb50:	f43f aebb 	beq.w	800f8ca <_dtoa_r+0x472>
 800fb54:	e6f0      	b.n	800f938 <_dtoa_r+0x4e0>
 800fb56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fb58:	2a00      	cmp	r2, #0
 800fb5a:	f000 80db 	beq.w	800fd14 <_dtoa_r+0x8bc>
 800fb5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb60:	2a01      	cmp	r2, #1
 800fb62:	f300 80bf 	bgt.w	800fce4 <_dtoa_r+0x88c>
 800fb66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fb68:	2a00      	cmp	r2, #0
 800fb6a:	f000 80b7 	beq.w	800fcdc <_dtoa_r+0x884>
 800fb6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fb72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fb74:	4646      	mov	r6, r8
 800fb76:	9a08      	ldr	r2, [sp, #32]
 800fb78:	2101      	movs	r1, #1
 800fb7a:	441a      	add	r2, r3
 800fb7c:	4658      	mov	r0, fp
 800fb7e:	4498      	add	r8, r3
 800fb80:	9208      	str	r2, [sp, #32]
 800fb82:	f000 fc21 	bl	80103c8 <__i2b>
 800fb86:	4605      	mov	r5, r0
 800fb88:	b15e      	cbz	r6, 800fba2 <_dtoa_r+0x74a>
 800fb8a:	9b08      	ldr	r3, [sp, #32]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	dd08      	ble.n	800fba2 <_dtoa_r+0x74a>
 800fb90:	42b3      	cmp	r3, r6
 800fb92:	9a08      	ldr	r2, [sp, #32]
 800fb94:	bfa8      	it	ge
 800fb96:	4633      	movge	r3, r6
 800fb98:	eba8 0803 	sub.w	r8, r8, r3
 800fb9c:	1af6      	subs	r6, r6, r3
 800fb9e:	1ad3      	subs	r3, r2, r3
 800fba0:	9308      	str	r3, [sp, #32]
 800fba2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fba4:	b1f3      	cbz	r3, 800fbe4 <_dtoa_r+0x78c>
 800fba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	f000 80b7 	beq.w	800fd1c <_dtoa_r+0x8c4>
 800fbae:	b18c      	cbz	r4, 800fbd4 <_dtoa_r+0x77c>
 800fbb0:	4629      	mov	r1, r5
 800fbb2:	4622      	mov	r2, r4
 800fbb4:	4658      	mov	r0, fp
 800fbb6:	f000 fcc7 	bl	8010548 <__pow5mult>
 800fbba:	464a      	mov	r2, r9
 800fbbc:	4601      	mov	r1, r0
 800fbbe:	4605      	mov	r5, r0
 800fbc0:	4658      	mov	r0, fp
 800fbc2:	f000 fc17 	bl	80103f4 <__multiply>
 800fbc6:	4649      	mov	r1, r9
 800fbc8:	9004      	str	r0, [sp, #16]
 800fbca:	4658      	mov	r0, fp
 800fbcc:	f000 fb48 	bl	8010260 <_Bfree>
 800fbd0:	9b04      	ldr	r3, [sp, #16]
 800fbd2:	4699      	mov	r9, r3
 800fbd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbd6:	1b1a      	subs	r2, r3, r4
 800fbd8:	d004      	beq.n	800fbe4 <_dtoa_r+0x78c>
 800fbda:	4649      	mov	r1, r9
 800fbdc:	4658      	mov	r0, fp
 800fbde:	f000 fcb3 	bl	8010548 <__pow5mult>
 800fbe2:	4681      	mov	r9, r0
 800fbe4:	2101      	movs	r1, #1
 800fbe6:	4658      	mov	r0, fp
 800fbe8:	f000 fbee 	bl	80103c8 <__i2b>
 800fbec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fbee:	4604      	mov	r4, r0
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	f000 81cf 	beq.w	800ff94 <_dtoa_r+0xb3c>
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	4601      	mov	r1, r0
 800fbfa:	4658      	mov	r0, fp
 800fbfc:	f000 fca4 	bl	8010548 <__pow5mult>
 800fc00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	4604      	mov	r4, r0
 800fc06:	f300 8095 	bgt.w	800fd34 <_dtoa_r+0x8dc>
 800fc0a:	9b02      	ldr	r3, [sp, #8]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	f040 8087 	bne.w	800fd20 <_dtoa_r+0x8c8>
 800fc12:	9b03      	ldr	r3, [sp, #12]
 800fc14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	f040 8089 	bne.w	800fd30 <_dtoa_r+0x8d8>
 800fc1e:	9b03      	ldr	r3, [sp, #12]
 800fc20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fc24:	0d1b      	lsrs	r3, r3, #20
 800fc26:	051b      	lsls	r3, r3, #20
 800fc28:	b12b      	cbz	r3, 800fc36 <_dtoa_r+0x7de>
 800fc2a:	9b08      	ldr	r3, [sp, #32]
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	9308      	str	r3, [sp, #32]
 800fc30:	f108 0801 	add.w	r8, r8, #1
 800fc34:	2301      	movs	r3, #1
 800fc36:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	f000 81b0 	beq.w	800ffa0 <_dtoa_r+0xb48>
 800fc40:	6923      	ldr	r3, [r4, #16]
 800fc42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fc46:	6918      	ldr	r0, [r3, #16]
 800fc48:	f000 fb72 	bl	8010330 <__hi0bits>
 800fc4c:	f1c0 0020 	rsb	r0, r0, #32
 800fc50:	9b08      	ldr	r3, [sp, #32]
 800fc52:	4418      	add	r0, r3
 800fc54:	f010 001f 	ands.w	r0, r0, #31
 800fc58:	d077      	beq.n	800fd4a <_dtoa_r+0x8f2>
 800fc5a:	f1c0 0320 	rsb	r3, r0, #32
 800fc5e:	2b04      	cmp	r3, #4
 800fc60:	dd6b      	ble.n	800fd3a <_dtoa_r+0x8e2>
 800fc62:	9b08      	ldr	r3, [sp, #32]
 800fc64:	f1c0 001c 	rsb	r0, r0, #28
 800fc68:	4403      	add	r3, r0
 800fc6a:	4480      	add	r8, r0
 800fc6c:	4406      	add	r6, r0
 800fc6e:	9308      	str	r3, [sp, #32]
 800fc70:	f1b8 0f00 	cmp.w	r8, #0
 800fc74:	dd05      	ble.n	800fc82 <_dtoa_r+0x82a>
 800fc76:	4649      	mov	r1, r9
 800fc78:	4642      	mov	r2, r8
 800fc7a:	4658      	mov	r0, fp
 800fc7c:	f000 fcbe 	bl	80105fc <__lshift>
 800fc80:	4681      	mov	r9, r0
 800fc82:	9b08      	ldr	r3, [sp, #32]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	dd05      	ble.n	800fc94 <_dtoa_r+0x83c>
 800fc88:	4621      	mov	r1, r4
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	4658      	mov	r0, fp
 800fc8e:	f000 fcb5 	bl	80105fc <__lshift>
 800fc92:	4604      	mov	r4, r0
 800fc94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d059      	beq.n	800fd4e <_dtoa_r+0x8f6>
 800fc9a:	4621      	mov	r1, r4
 800fc9c:	4648      	mov	r0, r9
 800fc9e:	f000 fd19 	bl	80106d4 <__mcmp>
 800fca2:	2800      	cmp	r0, #0
 800fca4:	da53      	bge.n	800fd4e <_dtoa_r+0x8f6>
 800fca6:	1e7b      	subs	r3, r7, #1
 800fca8:	9304      	str	r3, [sp, #16]
 800fcaa:	4649      	mov	r1, r9
 800fcac:	2300      	movs	r3, #0
 800fcae:	220a      	movs	r2, #10
 800fcb0:	4658      	mov	r0, fp
 800fcb2:	f000 faf7 	bl	80102a4 <__multadd>
 800fcb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fcb8:	4681      	mov	r9, r0
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	f000 8172 	beq.w	800ffa4 <_dtoa_r+0xb4c>
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	4629      	mov	r1, r5
 800fcc4:	220a      	movs	r2, #10
 800fcc6:	4658      	mov	r0, fp
 800fcc8:	f000 faec 	bl	80102a4 <__multadd>
 800fccc:	9b00      	ldr	r3, [sp, #0]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	4605      	mov	r5, r0
 800fcd2:	dc67      	bgt.n	800fda4 <_dtoa_r+0x94c>
 800fcd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcd6:	2b02      	cmp	r3, #2
 800fcd8:	dc41      	bgt.n	800fd5e <_dtoa_r+0x906>
 800fcda:	e063      	b.n	800fda4 <_dtoa_r+0x94c>
 800fcdc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fcde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fce2:	e746      	b.n	800fb72 <_dtoa_r+0x71a>
 800fce4:	9b07      	ldr	r3, [sp, #28]
 800fce6:	1e5c      	subs	r4, r3, #1
 800fce8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcea:	42a3      	cmp	r3, r4
 800fcec:	bfbf      	itttt	lt
 800fcee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fcf0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fcf2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fcf4:	1ae3      	sublt	r3, r4, r3
 800fcf6:	bfb4      	ite	lt
 800fcf8:	18d2      	addlt	r2, r2, r3
 800fcfa:	1b1c      	subge	r4, r3, r4
 800fcfc:	9b07      	ldr	r3, [sp, #28]
 800fcfe:	bfbc      	itt	lt
 800fd00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fd02:	2400      	movlt	r4, #0
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	bfb5      	itete	lt
 800fd08:	eba8 0603 	sublt.w	r6, r8, r3
 800fd0c:	9b07      	ldrge	r3, [sp, #28]
 800fd0e:	2300      	movlt	r3, #0
 800fd10:	4646      	movge	r6, r8
 800fd12:	e730      	b.n	800fb76 <_dtoa_r+0x71e>
 800fd14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fd16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fd18:	4646      	mov	r6, r8
 800fd1a:	e735      	b.n	800fb88 <_dtoa_r+0x730>
 800fd1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fd1e:	e75c      	b.n	800fbda <_dtoa_r+0x782>
 800fd20:	2300      	movs	r3, #0
 800fd22:	e788      	b.n	800fc36 <_dtoa_r+0x7de>
 800fd24:	3fe00000 	.word	0x3fe00000
 800fd28:	40240000 	.word	0x40240000
 800fd2c:	40140000 	.word	0x40140000
 800fd30:	9b02      	ldr	r3, [sp, #8]
 800fd32:	e780      	b.n	800fc36 <_dtoa_r+0x7de>
 800fd34:	2300      	movs	r3, #0
 800fd36:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd38:	e782      	b.n	800fc40 <_dtoa_r+0x7e8>
 800fd3a:	d099      	beq.n	800fc70 <_dtoa_r+0x818>
 800fd3c:	9a08      	ldr	r2, [sp, #32]
 800fd3e:	331c      	adds	r3, #28
 800fd40:	441a      	add	r2, r3
 800fd42:	4498      	add	r8, r3
 800fd44:	441e      	add	r6, r3
 800fd46:	9208      	str	r2, [sp, #32]
 800fd48:	e792      	b.n	800fc70 <_dtoa_r+0x818>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	e7f6      	b.n	800fd3c <_dtoa_r+0x8e4>
 800fd4e:	9b07      	ldr	r3, [sp, #28]
 800fd50:	9704      	str	r7, [sp, #16]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	dc20      	bgt.n	800fd98 <_dtoa_r+0x940>
 800fd56:	9300      	str	r3, [sp, #0]
 800fd58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd5a:	2b02      	cmp	r3, #2
 800fd5c:	dd1e      	ble.n	800fd9c <_dtoa_r+0x944>
 800fd5e:	9b00      	ldr	r3, [sp, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	f47f aec0 	bne.w	800fae6 <_dtoa_r+0x68e>
 800fd66:	4621      	mov	r1, r4
 800fd68:	2205      	movs	r2, #5
 800fd6a:	4658      	mov	r0, fp
 800fd6c:	f000 fa9a 	bl	80102a4 <__multadd>
 800fd70:	4601      	mov	r1, r0
 800fd72:	4604      	mov	r4, r0
 800fd74:	4648      	mov	r0, r9
 800fd76:	f000 fcad 	bl	80106d4 <__mcmp>
 800fd7a:	2800      	cmp	r0, #0
 800fd7c:	f77f aeb3 	ble.w	800fae6 <_dtoa_r+0x68e>
 800fd80:	4656      	mov	r6, sl
 800fd82:	2331      	movs	r3, #49	@ 0x31
 800fd84:	f806 3b01 	strb.w	r3, [r6], #1
 800fd88:	9b04      	ldr	r3, [sp, #16]
 800fd8a:	3301      	adds	r3, #1
 800fd8c:	9304      	str	r3, [sp, #16]
 800fd8e:	e6ae      	b.n	800faee <_dtoa_r+0x696>
 800fd90:	9c07      	ldr	r4, [sp, #28]
 800fd92:	9704      	str	r7, [sp, #16]
 800fd94:	4625      	mov	r5, r4
 800fd96:	e7f3      	b.n	800fd80 <_dtoa_r+0x928>
 800fd98:	9b07      	ldr	r3, [sp, #28]
 800fd9a:	9300      	str	r3, [sp, #0]
 800fd9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	f000 8104 	beq.w	800ffac <_dtoa_r+0xb54>
 800fda4:	2e00      	cmp	r6, #0
 800fda6:	dd05      	ble.n	800fdb4 <_dtoa_r+0x95c>
 800fda8:	4629      	mov	r1, r5
 800fdaa:	4632      	mov	r2, r6
 800fdac:	4658      	mov	r0, fp
 800fdae:	f000 fc25 	bl	80105fc <__lshift>
 800fdb2:	4605      	mov	r5, r0
 800fdb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d05a      	beq.n	800fe70 <_dtoa_r+0xa18>
 800fdba:	6869      	ldr	r1, [r5, #4]
 800fdbc:	4658      	mov	r0, fp
 800fdbe:	f000 fa0f 	bl	80101e0 <_Balloc>
 800fdc2:	4606      	mov	r6, r0
 800fdc4:	b928      	cbnz	r0, 800fdd2 <_dtoa_r+0x97a>
 800fdc6:	4b84      	ldr	r3, [pc, #528]	@ (800ffd8 <_dtoa_r+0xb80>)
 800fdc8:	4602      	mov	r2, r0
 800fdca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fdce:	f7ff bb5a 	b.w	800f486 <_dtoa_r+0x2e>
 800fdd2:	692a      	ldr	r2, [r5, #16]
 800fdd4:	3202      	adds	r2, #2
 800fdd6:	0092      	lsls	r2, r2, #2
 800fdd8:	f105 010c 	add.w	r1, r5, #12
 800fddc:	300c      	adds	r0, #12
 800fdde:	f000 ffaf 	bl	8010d40 <memcpy>
 800fde2:	2201      	movs	r2, #1
 800fde4:	4631      	mov	r1, r6
 800fde6:	4658      	mov	r0, fp
 800fde8:	f000 fc08 	bl	80105fc <__lshift>
 800fdec:	f10a 0301 	add.w	r3, sl, #1
 800fdf0:	9307      	str	r3, [sp, #28]
 800fdf2:	9b00      	ldr	r3, [sp, #0]
 800fdf4:	4453      	add	r3, sl
 800fdf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fdf8:	9b02      	ldr	r3, [sp, #8]
 800fdfa:	f003 0301 	and.w	r3, r3, #1
 800fdfe:	462f      	mov	r7, r5
 800fe00:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe02:	4605      	mov	r5, r0
 800fe04:	9b07      	ldr	r3, [sp, #28]
 800fe06:	4621      	mov	r1, r4
 800fe08:	3b01      	subs	r3, #1
 800fe0a:	4648      	mov	r0, r9
 800fe0c:	9300      	str	r3, [sp, #0]
 800fe0e:	f7ff fa98 	bl	800f342 <quorem>
 800fe12:	4639      	mov	r1, r7
 800fe14:	9002      	str	r0, [sp, #8]
 800fe16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fe1a:	4648      	mov	r0, r9
 800fe1c:	f000 fc5a 	bl	80106d4 <__mcmp>
 800fe20:	462a      	mov	r2, r5
 800fe22:	9008      	str	r0, [sp, #32]
 800fe24:	4621      	mov	r1, r4
 800fe26:	4658      	mov	r0, fp
 800fe28:	f000 fc70 	bl	801070c <__mdiff>
 800fe2c:	68c2      	ldr	r2, [r0, #12]
 800fe2e:	4606      	mov	r6, r0
 800fe30:	bb02      	cbnz	r2, 800fe74 <_dtoa_r+0xa1c>
 800fe32:	4601      	mov	r1, r0
 800fe34:	4648      	mov	r0, r9
 800fe36:	f000 fc4d 	bl	80106d4 <__mcmp>
 800fe3a:	4602      	mov	r2, r0
 800fe3c:	4631      	mov	r1, r6
 800fe3e:	4658      	mov	r0, fp
 800fe40:	920e      	str	r2, [sp, #56]	@ 0x38
 800fe42:	f000 fa0d 	bl	8010260 <_Bfree>
 800fe46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe4a:	9e07      	ldr	r6, [sp, #28]
 800fe4c:	ea43 0102 	orr.w	r1, r3, r2
 800fe50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe52:	4319      	orrs	r1, r3
 800fe54:	d110      	bne.n	800fe78 <_dtoa_r+0xa20>
 800fe56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fe5a:	d029      	beq.n	800feb0 <_dtoa_r+0xa58>
 800fe5c:	9b08      	ldr	r3, [sp, #32]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	dd02      	ble.n	800fe68 <_dtoa_r+0xa10>
 800fe62:	9b02      	ldr	r3, [sp, #8]
 800fe64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fe68:	9b00      	ldr	r3, [sp, #0]
 800fe6a:	f883 8000 	strb.w	r8, [r3]
 800fe6e:	e63f      	b.n	800faf0 <_dtoa_r+0x698>
 800fe70:	4628      	mov	r0, r5
 800fe72:	e7bb      	b.n	800fdec <_dtoa_r+0x994>
 800fe74:	2201      	movs	r2, #1
 800fe76:	e7e1      	b.n	800fe3c <_dtoa_r+0x9e4>
 800fe78:	9b08      	ldr	r3, [sp, #32]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	db04      	blt.n	800fe88 <_dtoa_r+0xa30>
 800fe7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fe80:	430b      	orrs	r3, r1
 800fe82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fe84:	430b      	orrs	r3, r1
 800fe86:	d120      	bne.n	800feca <_dtoa_r+0xa72>
 800fe88:	2a00      	cmp	r2, #0
 800fe8a:	dded      	ble.n	800fe68 <_dtoa_r+0xa10>
 800fe8c:	4649      	mov	r1, r9
 800fe8e:	2201      	movs	r2, #1
 800fe90:	4658      	mov	r0, fp
 800fe92:	f000 fbb3 	bl	80105fc <__lshift>
 800fe96:	4621      	mov	r1, r4
 800fe98:	4681      	mov	r9, r0
 800fe9a:	f000 fc1b 	bl	80106d4 <__mcmp>
 800fe9e:	2800      	cmp	r0, #0
 800fea0:	dc03      	bgt.n	800feaa <_dtoa_r+0xa52>
 800fea2:	d1e1      	bne.n	800fe68 <_dtoa_r+0xa10>
 800fea4:	f018 0f01 	tst.w	r8, #1
 800fea8:	d0de      	beq.n	800fe68 <_dtoa_r+0xa10>
 800feaa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800feae:	d1d8      	bne.n	800fe62 <_dtoa_r+0xa0a>
 800feb0:	9a00      	ldr	r2, [sp, #0]
 800feb2:	2339      	movs	r3, #57	@ 0x39
 800feb4:	7013      	strb	r3, [r2, #0]
 800feb6:	4633      	mov	r3, r6
 800feb8:	461e      	mov	r6, r3
 800feba:	3b01      	subs	r3, #1
 800febc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fec0:	2a39      	cmp	r2, #57	@ 0x39
 800fec2:	d052      	beq.n	800ff6a <_dtoa_r+0xb12>
 800fec4:	3201      	adds	r2, #1
 800fec6:	701a      	strb	r2, [r3, #0]
 800fec8:	e612      	b.n	800faf0 <_dtoa_r+0x698>
 800feca:	2a00      	cmp	r2, #0
 800fecc:	dd07      	ble.n	800fede <_dtoa_r+0xa86>
 800fece:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fed2:	d0ed      	beq.n	800feb0 <_dtoa_r+0xa58>
 800fed4:	9a00      	ldr	r2, [sp, #0]
 800fed6:	f108 0301 	add.w	r3, r8, #1
 800feda:	7013      	strb	r3, [r2, #0]
 800fedc:	e608      	b.n	800faf0 <_dtoa_r+0x698>
 800fede:	9b07      	ldr	r3, [sp, #28]
 800fee0:	9a07      	ldr	r2, [sp, #28]
 800fee2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fee8:	4293      	cmp	r3, r2
 800feea:	d028      	beq.n	800ff3e <_dtoa_r+0xae6>
 800feec:	4649      	mov	r1, r9
 800feee:	2300      	movs	r3, #0
 800fef0:	220a      	movs	r2, #10
 800fef2:	4658      	mov	r0, fp
 800fef4:	f000 f9d6 	bl	80102a4 <__multadd>
 800fef8:	42af      	cmp	r7, r5
 800fefa:	4681      	mov	r9, r0
 800fefc:	f04f 0300 	mov.w	r3, #0
 800ff00:	f04f 020a 	mov.w	r2, #10
 800ff04:	4639      	mov	r1, r7
 800ff06:	4658      	mov	r0, fp
 800ff08:	d107      	bne.n	800ff1a <_dtoa_r+0xac2>
 800ff0a:	f000 f9cb 	bl	80102a4 <__multadd>
 800ff0e:	4607      	mov	r7, r0
 800ff10:	4605      	mov	r5, r0
 800ff12:	9b07      	ldr	r3, [sp, #28]
 800ff14:	3301      	adds	r3, #1
 800ff16:	9307      	str	r3, [sp, #28]
 800ff18:	e774      	b.n	800fe04 <_dtoa_r+0x9ac>
 800ff1a:	f000 f9c3 	bl	80102a4 <__multadd>
 800ff1e:	4629      	mov	r1, r5
 800ff20:	4607      	mov	r7, r0
 800ff22:	2300      	movs	r3, #0
 800ff24:	220a      	movs	r2, #10
 800ff26:	4658      	mov	r0, fp
 800ff28:	f000 f9bc 	bl	80102a4 <__multadd>
 800ff2c:	4605      	mov	r5, r0
 800ff2e:	e7f0      	b.n	800ff12 <_dtoa_r+0xaba>
 800ff30:	9b00      	ldr	r3, [sp, #0]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	bfcc      	ite	gt
 800ff36:	461e      	movgt	r6, r3
 800ff38:	2601      	movle	r6, #1
 800ff3a:	4456      	add	r6, sl
 800ff3c:	2700      	movs	r7, #0
 800ff3e:	4649      	mov	r1, r9
 800ff40:	2201      	movs	r2, #1
 800ff42:	4658      	mov	r0, fp
 800ff44:	f000 fb5a 	bl	80105fc <__lshift>
 800ff48:	4621      	mov	r1, r4
 800ff4a:	4681      	mov	r9, r0
 800ff4c:	f000 fbc2 	bl	80106d4 <__mcmp>
 800ff50:	2800      	cmp	r0, #0
 800ff52:	dcb0      	bgt.n	800feb6 <_dtoa_r+0xa5e>
 800ff54:	d102      	bne.n	800ff5c <_dtoa_r+0xb04>
 800ff56:	f018 0f01 	tst.w	r8, #1
 800ff5a:	d1ac      	bne.n	800feb6 <_dtoa_r+0xa5e>
 800ff5c:	4633      	mov	r3, r6
 800ff5e:	461e      	mov	r6, r3
 800ff60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff64:	2a30      	cmp	r2, #48	@ 0x30
 800ff66:	d0fa      	beq.n	800ff5e <_dtoa_r+0xb06>
 800ff68:	e5c2      	b.n	800faf0 <_dtoa_r+0x698>
 800ff6a:	459a      	cmp	sl, r3
 800ff6c:	d1a4      	bne.n	800feb8 <_dtoa_r+0xa60>
 800ff6e:	9b04      	ldr	r3, [sp, #16]
 800ff70:	3301      	adds	r3, #1
 800ff72:	9304      	str	r3, [sp, #16]
 800ff74:	2331      	movs	r3, #49	@ 0x31
 800ff76:	f88a 3000 	strb.w	r3, [sl]
 800ff7a:	e5b9      	b.n	800faf0 <_dtoa_r+0x698>
 800ff7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ffdc <_dtoa_r+0xb84>
 800ff82:	b11b      	cbz	r3, 800ff8c <_dtoa_r+0xb34>
 800ff84:	f10a 0308 	add.w	r3, sl, #8
 800ff88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ff8a:	6013      	str	r3, [r2, #0]
 800ff8c:	4650      	mov	r0, sl
 800ff8e:	b019      	add	sp, #100	@ 0x64
 800ff90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff96:	2b01      	cmp	r3, #1
 800ff98:	f77f ae37 	ble.w	800fc0a <_dtoa_r+0x7b2>
 800ff9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ffa0:	2001      	movs	r0, #1
 800ffa2:	e655      	b.n	800fc50 <_dtoa_r+0x7f8>
 800ffa4:	9b00      	ldr	r3, [sp, #0]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	f77f aed6 	ble.w	800fd58 <_dtoa_r+0x900>
 800ffac:	4656      	mov	r6, sl
 800ffae:	4621      	mov	r1, r4
 800ffb0:	4648      	mov	r0, r9
 800ffb2:	f7ff f9c6 	bl	800f342 <quorem>
 800ffb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ffba:	f806 8b01 	strb.w	r8, [r6], #1
 800ffbe:	9b00      	ldr	r3, [sp, #0]
 800ffc0:	eba6 020a 	sub.w	r2, r6, sl
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	ddb3      	ble.n	800ff30 <_dtoa_r+0xad8>
 800ffc8:	4649      	mov	r1, r9
 800ffca:	2300      	movs	r3, #0
 800ffcc:	220a      	movs	r2, #10
 800ffce:	4658      	mov	r0, fp
 800ffd0:	f000 f968 	bl	80102a4 <__multadd>
 800ffd4:	4681      	mov	r9, r0
 800ffd6:	e7ea      	b.n	800ffae <_dtoa_r+0xb56>
 800ffd8:	08011550 	.word	0x08011550
 800ffdc:	080114d4 	.word	0x080114d4

0800ffe0 <_free_r>:
 800ffe0:	b538      	push	{r3, r4, r5, lr}
 800ffe2:	4605      	mov	r5, r0
 800ffe4:	2900      	cmp	r1, #0
 800ffe6:	d041      	beq.n	801006c <_free_r+0x8c>
 800ffe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffec:	1f0c      	subs	r4, r1, #4
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	bfb8      	it	lt
 800fff2:	18e4      	addlt	r4, r4, r3
 800fff4:	f000 f8e8 	bl	80101c8 <__malloc_lock>
 800fff8:	4a1d      	ldr	r2, [pc, #116]	@ (8010070 <_free_r+0x90>)
 800fffa:	6813      	ldr	r3, [r2, #0]
 800fffc:	b933      	cbnz	r3, 801000c <_free_r+0x2c>
 800fffe:	6063      	str	r3, [r4, #4]
 8010000:	6014      	str	r4, [r2, #0]
 8010002:	4628      	mov	r0, r5
 8010004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010008:	f000 b8e4 	b.w	80101d4 <__malloc_unlock>
 801000c:	42a3      	cmp	r3, r4
 801000e:	d908      	bls.n	8010022 <_free_r+0x42>
 8010010:	6820      	ldr	r0, [r4, #0]
 8010012:	1821      	adds	r1, r4, r0
 8010014:	428b      	cmp	r3, r1
 8010016:	bf01      	itttt	eq
 8010018:	6819      	ldreq	r1, [r3, #0]
 801001a:	685b      	ldreq	r3, [r3, #4]
 801001c:	1809      	addeq	r1, r1, r0
 801001e:	6021      	streq	r1, [r4, #0]
 8010020:	e7ed      	b.n	800fffe <_free_r+0x1e>
 8010022:	461a      	mov	r2, r3
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	b10b      	cbz	r3, 801002c <_free_r+0x4c>
 8010028:	42a3      	cmp	r3, r4
 801002a:	d9fa      	bls.n	8010022 <_free_r+0x42>
 801002c:	6811      	ldr	r1, [r2, #0]
 801002e:	1850      	adds	r0, r2, r1
 8010030:	42a0      	cmp	r0, r4
 8010032:	d10b      	bne.n	801004c <_free_r+0x6c>
 8010034:	6820      	ldr	r0, [r4, #0]
 8010036:	4401      	add	r1, r0
 8010038:	1850      	adds	r0, r2, r1
 801003a:	4283      	cmp	r3, r0
 801003c:	6011      	str	r1, [r2, #0]
 801003e:	d1e0      	bne.n	8010002 <_free_r+0x22>
 8010040:	6818      	ldr	r0, [r3, #0]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	6053      	str	r3, [r2, #4]
 8010046:	4408      	add	r0, r1
 8010048:	6010      	str	r0, [r2, #0]
 801004a:	e7da      	b.n	8010002 <_free_r+0x22>
 801004c:	d902      	bls.n	8010054 <_free_r+0x74>
 801004e:	230c      	movs	r3, #12
 8010050:	602b      	str	r3, [r5, #0]
 8010052:	e7d6      	b.n	8010002 <_free_r+0x22>
 8010054:	6820      	ldr	r0, [r4, #0]
 8010056:	1821      	adds	r1, r4, r0
 8010058:	428b      	cmp	r3, r1
 801005a:	bf04      	itt	eq
 801005c:	6819      	ldreq	r1, [r3, #0]
 801005e:	685b      	ldreq	r3, [r3, #4]
 8010060:	6063      	str	r3, [r4, #4]
 8010062:	bf04      	itt	eq
 8010064:	1809      	addeq	r1, r1, r0
 8010066:	6021      	streq	r1, [r4, #0]
 8010068:	6054      	str	r4, [r2, #4]
 801006a:	e7ca      	b.n	8010002 <_free_r+0x22>
 801006c:	bd38      	pop	{r3, r4, r5, pc}
 801006e:	bf00      	nop
 8010070:	20001de0 	.word	0x20001de0

08010074 <malloc>:
 8010074:	4b02      	ldr	r3, [pc, #8]	@ (8010080 <malloc+0xc>)
 8010076:	4601      	mov	r1, r0
 8010078:	6818      	ldr	r0, [r3, #0]
 801007a:	f000 b825 	b.w	80100c8 <_malloc_r>
 801007e:	bf00      	nop
 8010080:	20000584 	.word	0x20000584

08010084 <sbrk_aligned>:
 8010084:	b570      	push	{r4, r5, r6, lr}
 8010086:	4e0f      	ldr	r6, [pc, #60]	@ (80100c4 <sbrk_aligned+0x40>)
 8010088:	460c      	mov	r4, r1
 801008a:	6831      	ldr	r1, [r6, #0]
 801008c:	4605      	mov	r5, r0
 801008e:	b911      	cbnz	r1, 8010096 <sbrk_aligned+0x12>
 8010090:	f000 fe46 	bl	8010d20 <_sbrk_r>
 8010094:	6030      	str	r0, [r6, #0]
 8010096:	4621      	mov	r1, r4
 8010098:	4628      	mov	r0, r5
 801009a:	f000 fe41 	bl	8010d20 <_sbrk_r>
 801009e:	1c43      	adds	r3, r0, #1
 80100a0:	d103      	bne.n	80100aa <sbrk_aligned+0x26>
 80100a2:	f04f 34ff 	mov.w	r4, #4294967295
 80100a6:	4620      	mov	r0, r4
 80100a8:	bd70      	pop	{r4, r5, r6, pc}
 80100aa:	1cc4      	adds	r4, r0, #3
 80100ac:	f024 0403 	bic.w	r4, r4, #3
 80100b0:	42a0      	cmp	r0, r4
 80100b2:	d0f8      	beq.n	80100a6 <sbrk_aligned+0x22>
 80100b4:	1a21      	subs	r1, r4, r0
 80100b6:	4628      	mov	r0, r5
 80100b8:	f000 fe32 	bl	8010d20 <_sbrk_r>
 80100bc:	3001      	adds	r0, #1
 80100be:	d1f2      	bne.n	80100a6 <sbrk_aligned+0x22>
 80100c0:	e7ef      	b.n	80100a2 <sbrk_aligned+0x1e>
 80100c2:	bf00      	nop
 80100c4:	20001ddc 	.word	0x20001ddc

080100c8 <_malloc_r>:
 80100c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100cc:	1ccd      	adds	r5, r1, #3
 80100ce:	f025 0503 	bic.w	r5, r5, #3
 80100d2:	3508      	adds	r5, #8
 80100d4:	2d0c      	cmp	r5, #12
 80100d6:	bf38      	it	cc
 80100d8:	250c      	movcc	r5, #12
 80100da:	2d00      	cmp	r5, #0
 80100dc:	4606      	mov	r6, r0
 80100de:	db01      	blt.n	80100e4 <_malloc_r+0x1c>
 80100e0:	42a9      	cmp	r1, r5
 80100e2:	d904      	bls.n	80100ee <_malloc_r+0x26>
 80100e4:	230c      	movs	r3, #12
 80100e6:	6033      	str	r3, [r6, #0]
 80100e8:	2000      	movs	r0, #0
 80100ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80101c4 <_malloc_r+0xfc>
 80100f2:	f000 f869 	bl	80101c8 <__malloc_lock>
 80100f6:	f8d8 3000 	ldr.w	r3, [r8]
 80100fa:	461c      	mov	r4, r3
 80100fc:	bb44      	cbnz	r4, 8010150 <_malloc_r+0x88>
 80100fe:	4629      	mov	r1, r5
 8010100:	4630      	mov	r0, r6
 8010102:	f7ff ffbf 	bl	8010084 <sbrk_aligned>
 8010106:	1c43      	adds	r3, r0, #1
 8010108:	4604      	mov	r4, r0
 801010a:	d158      	bne.n	80101be <_malloc_r+0xf6>
 801010c:	f8d8 4000 	ldr.w	r4, [r8]
 8010110:	4627      	mov	r7, r4
 8010112:	2f00      	cmp	r7, #0
 8010114:	d143      	bne.n	801019e <_malloc_r+0xd6>
 8010116:	2c00      	cmp	r4, #0
 8010118:	d04b      	beq.n	80101b2 <_malloc_r+0xea>
 801011a:	6823      	ldr	r3, [r4, #0]
 801011c:	4639      	mov	r1, r7
 801011e:	4630      	mov	r0, r6
 8010120:	eb04 0903 	add.w	r9, r4, r3
 8010124:	f000 fdfc 	bl	8010d20 <_sbrk_r>
 8010128:	4581      	cmp	r9, r0
 801012a:	d142      	bne.n	80101b2 <_malloc_r+0xea>
 801012c:	6821      	ldr	r1, [r4, #0]
 801012e:	1a6d      	subs	r5, r5, r1
 8010130:	4629      	mov	r1, r5
 8010132:	4630      	mov	r0, r6
 8010134:	f7ff ffa6 	bl	8010084 <sbrk_aligned>
 8010138:	3001      	adds	r0, #1
 801013a:	d03a      	beq.n	80101b2 <_malloc_r+0xea>
 801013c:	6823      	ldr	r3, [r4, #0]
 801013e:	442b      	add	r3, r5
 8010140:	6023      	str	r3, [r4, #0]
 8010142:	f8d8 3000 	ldr.w	r3, [r8]
 8010146:	685a      	ldr	r2, [r3, #4]
 8010148:	bb62      	cbnz	r2, 80101a4 <_malloc_r+0xdc>
 801014a:	f8c8 7000 	str.w	r7, [r8]
 801014e:	e00f      	b.n	8010170 <_malloc_r+0xa8>
 8010150:	6822      	ldr	r2, [r4, #0]
 8010152:	1b52      	subs	r2, r2, r5
 8010154:	d420      	bmi.n	8010198 <_malloc_r+0xd0>
 8010156:	2a0b      	cmp	r2, #11
 8010158:	d917      	bls.n	801018a <_malloc_r+0xc2>
 801015a:	1961      	adds	r1, r4, r5
 801015c:	42a3      	cmp	r3, r4
 801015e:	6025      	str	r5, [r4, #0]
 8010160:	bf18      	it	ne
 8010162:	6059      	strne	r1, [r3, #4]
 8010164:	6863      	ldr	r3, [r4, #4]
 8010166:	bf08      	it	eq
 8010168:	f8c8 1000 	streq.w	r1, [r8]
 801016c:	5162      	str	r2, [r4, r5]
 801016e:	604b      	str	r3, [r1, #4]
 8010170:	4630      	mov	r0, r6
 8010172:	f000 f82f 	bl	80101d4 <__malloc_unlock>
 8010176:	f104 000b 	add.w	r0, r4, #11
 801017a:	1d23      	adds	r3, r4, #4
 801017c:	f020 0007 	bic.w	r0, r0, #7
 8010180:	1ac2      	subs	r2, r0, r3
 8010182:	bf1c      	itt	ne
 8010184:	1a1b      	subne	r3, r3, r0
 8010186:	50a3      	strne	r3, [r4, r2]
 8010188:	e7af      	b.n	80100ea <_malloc_r+0x22>
 801018a:	6862      	ldr	r2, [r4, #4]
 801018c:	42a3      	cmp	r3, r4
 801018e:	bf0c      	ite	eq
 8010190:	f8c8 2000 	streq.w	r2, [r8]
 8010194:	605a      	strne	r2, [r3, #4]
 8010196:	e7eb      	b.n	8010170 <_malloc_r+0xa8>
 8010198:	4623      	mov	r3, r4
 801019a:	6864      	ldr	r4, [r4, #4]
 801019c:	e7ae      	b.n	80100fc <_malloc_r+0x34>
 801019e:	463c      	mov	r4, r7
 80101a0:	687f      	ldr	r7, [r7, #4]
 80101a2:	e7b6      	b.n	8010112 <_malloc_r+0x4a>
 80101a4:	461a      	mov	r2, r3
 80101a6:	685b      	ldr	r3, [r3, #4]
 80101a8:	42a3      	cmp	r3, r4
 80101aa:	d1fb      	bne.n	80101a4 <_malloc_r+0xdc>
 80101ac:	2300      	movs	r3, #0
 80101ae:	6053      	str	r3, [r2, #4]
 80101b0:	e7de      	b.n	8010170 <_malloc_r+0xa8>
 80101b2:	230c      	movs	r3, #12
 80101b4:	6033      	str	r3, [r6, #0]
 80101b6:	4630      	mov	r0, r6
 80101b8:	f000 f80c 	bl	80101d4 <__malloc_unlock>
 80101bc:	e794      	b.n	80100e8 <_malloc_r+0x20>
 80101be:	6005      	str	r5, [r0, #0]
 80101c0:	e7d6      	b.n	8010170 <_malloc_r+0xa8>
 80101c2:	bf00      	nop
 80101c4:	20001de0 	.word	0x20001de0

080101c8 <__malloc_lock>:
 80101c8:	4801      	ldr	r0, [pc, #4]	@ (80101d0 <__malloc_lock+0x8>)
 80101ca:	f7ff b8b8 	b.w	800f33e <__retarget_lock_acquire_recursive>
 80101ce:	bf00      	nop
 80101d0:	20001dd8 	.word	0x20001dd8

080101d4 <__malloc_unlock>:
 80101d4:	4801      	ldr	r0, [pc, #4]	@ (80101dc <__malloc_unlock+0x8>)
 80101d6:	f7ff b8b3 	b.w	800f340 <__retarget_lock_release_recursive>
 80101da:	bf00      	nop
 80101dc:	20001dd8 	.word	0x20001dd8

080101e0 <_Balloc>:
 80101e0:	b570      	push	{r4, r5, r6, lr}
 80101e2:	69c6      	ldr	r6, [r0, #28]
 80101e4:	4604      	mov	r4, r0
 80101e6:	460d      	mov	r5, r1
 80101e8:	b976      	cbnz	r6, 8010208 <_Balloc+0x28>
 80101ea:	2010      	movs	r0, #16
 80101ec:	f7ff ff42 	bl	8010074 <malloc>
 80101f0:	4602      	mov	r2, r0
 80101f2:	61e0      	str	r0, [r4, #28]
 80101f4:	b920      	cbnz	r0, 8010200 <_Balloc+0x20>
 80101f6:	4b18      	ldr	r3, [pc, #96]	@ (8010258 <_Balloc+0x78>)
 80101f8:	4818      	ldr	r0, [pc, #96]	@ (801025c <_Balloc+0x7c>)
 80101fa:	216b      	movs	r1, #107	@ 0x6b
 80101fc:	f000 fdae 	bl	8010d5c <__assert_func>
 8010200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010204:	6006      	str	r6, [r0, #0]
 8010206:	60c6      	str	r6, [r0, #12]
 8010208:	69e6      	ldr	r6, [r4, #28]
 801020a:	68f3      	ldr	r3, [r6, #12]
 801020c:	b183      	cbz	r3, 8010230 <_Balloc+0x50>
 801020e:	69e3      	ldr	r3, [r4, #28]
 8010210:	68db      	ldr	r3, [r3, #12]
 8010212:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010216:	b9b8      	cbnz	r0, 8010248 <_Balloc+0x68>
 8010218:	2101      	movs	r1, #1
 801021a:	fa01 f605 	lsl.w	r6, r1, r5
 801021e:	1d72      	adds	r2, r6, #5
 8010220:	0092      	lsls	r2, r2, #2
 8010222:	4620      	mov	r0, r4
 8010224:	f000 fdb8 	bl	8010d98 <_calloc_r>
 8010228:	b160      	cbz	r0, 8010244 <_Balloc+0x64>
 801022a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801022e:	e00e      	b.n	801024e <_Balloc+0x6e>
 8010230:	2221      	movs	r2, #33	@ 0x21
 8010232:	2104      	movs	r1, #4
 8010234:	4620      	mov	r0, r4
 8010236:	f000 fdaf 	bl	8010d98 <_calloc_r>
 801023a:	69e3      	ldr	r3, [r4, #28]
 801023c:	60f0      	str	r0, [r6, #12]
 801023e:	68db      	ldr	r3, [r3, #12]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d1e4      	bne.n	801020e <_Balloc+0x2e>
 8010244:	2000      	movs	r0, #0
 8010246:	bd70      	pop	{r4, r5, r6, pc}
 8010248:	6802      	ldr	r2, [r0, #0]
 801024a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801024e:	2300      	movs	r3, #0
 8010250:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010254:	e7f7      	b.n	8010246 <_Balloc+0x66>
 8010256:	bf00      	nop
 8010258:	080114e1 	.word	0x080114e1
 801025c:	08011561 	.word	0x08011561

08010260 <_Bfree>:
 8010260:	b570      	push	{r4, r5, r6, lr}
 8010262:	69c6      	ldr	r6, [r0, #28]
 8010264:	4605      	mov	r5, r0
 8010266:	460c      	mov	r4, r1
 8010268:	b976      	cbnz	r6, 8010288 <_Bfree+0x28>
 801026a:	2010      	movs	r0, #16
 801026c:	f7ff ff02 	bl	8010074 <malloc>
 8010270:	4602      	mov	r2, r0
 8010272:	61e8      	str	r0, [r5, #28]
 8010274:	b920      	cbnz	r0, 8010280 <_Bfree+0x20>
 8010276:	4b09      	ldr	r3, [pc, #36]	@ (801029c <_Bfree+0x3c>)
 8010278:	4809      	ldr	r0, [pc, #36]	@ (80102a0 <_Bfree+0x40>)
 801027a:	218f      	movs	r1, #143	@ 0x8f
 801027c:	f000 fd6e 	bl	8010d5c <__assert_func>
 8010280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010284:	6006      	str	r6, [r0, #0]
 8010286:	60c6      	str	r6, [r0, #12]
 8010288:	b13c      	cbz	r4, 801029a <_Bfree+0x3a>
 801028a:	69eb      	ldr	r3, [r5, #28]
 801028c:	6862      	ldr	r2, [r4, #4]
 801028e:	68db      	ldr	r3, [r3, #12]
 8010290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010294:	6021      	str	r1, [r4, #0]
 8010296:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801029a:	bd70      	pop	{r4, r5, r6, pc}
 801029c:	080114e1 	.word	0x080114e1
 80102a0:	08011561 	.word	0x08011561

080102a4 <__multadd>:
 80102a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102a8:	690d      	ldr	r5, [r1, #16]
 80102aa:	4607      	mov	r7, r0
 80102ac:	460c      	mov	r4, r1
 80102ae:	461e      	mov	r6, r3
 80102b0:	f101 0c14 	add.w	ip, r1, #20
 80102b4:	2000      	movs	r0, #0
 80102b6:	f8dc 3000 	ldr.w	r3, [ip]
 80102ba:	b299      	uxth	r1, r3
 80102bc:	fb02 6101 	mla	r1, r2, r1, r6
 80102c0:	0c1e      	lsrs	r6, r3, #16
 80102c2:	0c0b      	lsrs	r3, r1, #16
 80102c4:	fb02 3306 	mla	r3, r2, r6, r3
 80102c8:	b289      	uxth	r1, r1
 80102ca:	3001      	adds	r0, #1
 80102cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80102d0:	4285      	cmp	r5, r0
 80102d2:	f84c 1b04 	str.w	r1, [ip], #4
 80102d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80102da:	dcec      	bgt.n	80102b6 <__multadd+0x12>
 80102dc:	b30e      	cbz	r6, 8010322 <__multadd+0x7e>
 80102de:	68a3      	ldr	r3, [r4, #8]
 80102e0:	42ab      	cmp	r3, r5
 80102e2:	dc19      	bgt.n	8010318 <__multadd+0x74>
 80102e4:	6861      	ldr	r1, [r4, #4]
 80102e6:	4638      	mov	r0, r7
 80102e8:	3101      	adds	r1, #1
 80102ea:	f7ff ff79 	bl	80101e0 <_Balloc>
 80102ee:	4680      	mov	r8, r0
 80102f0:	b928      	cbnz	r0, 80102fe <__multadd+0x5a>
 80102f2:	4602      	mov	r2, r0
 80102f4:	4b0c      	ldr	r3, [pc, #48]	@ (8010328 <__multadd+0x84>)
 80102f6:	480d      	ldr	r0, [pc, #52]	@ (801032c <__multadd+0x88>)
 80102f8:	21ba      	movs	r1, #186	@ 0xba
 80102fa:	f000 fd2f 	bl	8010d5c <__assert_func>
 80102fe:	6922      	ldr	r2, [r4, #16]
 8010300:	3202      	adds	r2, #2
 8010302:	f104 010c 	add.w	r1, r4, #12
 8010306:	0092      	lsls	r2, r2, #2
 8010308:	300c      	adds	r0, #12
 801030a:	f000 fd19 	bl	8010d40 <memcpy>
 801030e:	4621      	mov	r1, r4
 8010310:	4638      	mov	r0, r7
 8010312:	f7ff ffa5 	bl	8010260 <_Bfree>
 8010316:	4644      	mov	r4, r8
 8010318:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801031c:	3501      	adds	r5, #1
 801031e:	615e      	str	r6, [r3, #20]
 8010320:	6125      	str	r5, [r4, #16]
 8010322:	4620      	mov	r0, r4
 8010324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010328:	08011550 	.word	0x08011550
 801032c:	08011561 	.word	0x08011561

08010330 <__hi0bits>:
 8010330:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010334:	4603      	mov	r3, r0
 8010336:	bf36      	itet	cc
 8010338:	0403      	lslcc	r3, r0, #16
 801033a:	2000      	movcs	r0, #0
 801033c:	2010      	movcc	r0, #16
 801033e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010342:	bf3c      	itt	cc
 8010344:	021b      	lslcc	r3, r3, #8
 8010346:	3008      	addcc	r0, #8
 8010348:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801034c:	bf3c      	itt	cc
 801034e:	011b      	lslcc	r3, r3, #4
 8010350:	3004      	addcc	r0, #4
 8010352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010356:	bf3c      	itt	cc
 8010358:	009b      	lslcc	r3, r3, #2
 801035a:	3002      	addcc	r0, #2
 801035c:	2b00      	cmp	r3, #0
 801035e:	db05      	blt.n	801036c <__hi0bits+0x3c>
 8010360:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010364:	f100 0001 	add.w	r0, r0, #1
 8010368:	bf08      	it	eq
 801036a:	2020      	moveq	r0, #32
 801036c:	4770      	bx	lr

0801036e <__lo0bits>:
 801036e:	6803      	ldr	r3, [r0, #0]
 8010370:	4602      	mov	r2, r0
 8010372:	f013 0007 	ands.w	r0, r3, #7
 8010376:	d00b      	beq.n	8010390 <__lo0bits+0x22>
 8010378:	07d9      	lsls	r1, r3, #31
 801037a:	d421      	bmi.n	80103c0 <__lo0bits+0x52>
 801037c:	0798      	lsls	r0, r3, #30
 801037e:	bf49      	itett	mi
 8010380:	085b      	lsrmi	r3, r3, #1
 8010382:	089b      	lsrpl	r3, r3, #2
 8010384:	2001      	movmi	r0, #1
 8010386:	6013      	strmi	r3, [r2, #0]
 8010388:	bf5c      	itt	pl
 801038a:	6013      	strpl	r3, [r2, #0]
 801038c:	2002      	movpl	r0, #2
 801038e:	4770      	bx	lr
 8010390:	b299      	uxth	r1, r3
 8010392:	b909      	cbnz	r1, 8010398 <__lo0bits+0x2a>
 8010394:	0c1b      	lsrs	r3, r3, #16
 8010396:	2010      	movs	r0, #16
 8010398:	b2d9      	uxtb	r1, r3
 801039a:	b909      	cbnz	r1, 80103a0 <__lo0bits+0x32>
 801039c:	3008      	adds	r0, #8
 801039e:	0a1b      	lsrs	r3, r3, #8
 80103a0:	0719      	lsls	r1, r3, #28
 80103a2:	bf04      	itt	eq
 80103a4:	091b      	lsreq	r3, r3, #4
 80103a6:	3004      	addeq	r0, #4
 80103a8:	0799      	lsls	r1, r3, #30
 80103aa:	bf04      	itt	eq
 80103ac:	089b      	lsreq	r3, r3, #2
 80103ae:	3002      	addeq	r0, #2
 80103b0:	07d9      	lsls	r1, r3, #31
 80103b2:	d403      	bmi.n	80103bc <__lo0bits+0x4e>
 80103b4:	085b      	lsrs	r3, r3, #1
 80103b6:	f100 0001 	add.w	r0, r0, #1
 80103ba:	d003      	beq.n	80103c4 <__lo0bits+0x56>
 80103bc:	6013      	str	r3, [r2, #0]
 80103be:	4770      	bx	lr
 80103c0:	2000      	movs	r0, #0
 80103c2:	4770      	bx	lr
 80103c4:	2020      	movs	r0, #32
 80103c6:	4770      	bx	lr

080103c8 <__i2b>:
 80103c8:	b510      	push	{r4, lr}
 80103ca:	460c      	mov	r4, r1
 80103cc:	2101      	movs	r1, #1
 80103ce:	f7ff ff07 	bl	80101e0 <_Balloc>
 80103d2:	4602      	mov	r2, r0
 80103d4:	b928      	cbnz	r0, 80103e2 <__i2b+0x1a>
 80103d6:	4b05      	ldr	r3, [pc, #20]	@ (80103ec <__i2b+0x24>)
 80103d8:	4805      	ldr	r0, [pc, #20]	@ (80103f0 <__i2b+0x28>)
 80103da:	f240 1145 	movw	r1, #325	@ 0x145
 80103de:	f000 fcbd 	bl	8010d5c <__assert_func>
 80103e2:	2301      	movs	r3, #1
 80103e4:	6144      	str	r4, [r0, #20]
 80103e6:	6103      	str	r3, [r0, #16]
 80103e8:	bd10      	pop	{r4, pc}
 80103ea:	bf00      	nop
 80103ec:	08011550 	.word	0x08011550
 80103f0:	08011561 	.word	0x08011561

080103f4 <__multiply>:
 80103f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103f8:	4614      	mov	r4, r2
 80103fa:	690a      	ldr	r2, [r1, #16]
 80103fc:	6923      	ldr	r3, [r4, #16]
 80103fe:	429a      	cmp	r2, r3
 8010400:	bfa8      	it	ge
 8010402:	4623      	movge	r3, r4
 8010404:	460f      	mov	r7, r1
 8010406:	bfa4      	itt	ge
 8010408:	460c      	movge	r4, r1
 801040a:	461f      	movge	r7, r3
 801040c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010410:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010414:	68a3      	ldr	r3, [r4, #8]
 8010416:	6861      	ldr	r1, [r4, #4]
 8010418:	eb0a 0609 	add.w	r6, sl, r9
 801041c:	42b3      	cmp	r3, r6
 801041e:	b085      	sub	sp, #20
 8010420:	bfb8      	it	lt
 8010422:	3101      	addlt	r1, #1
 8010424:	f7ff fedc 	bl	80101e0 <_Balloc>
 8010428:	b930      	cbnz	r0, 8010438 <__multiply+0x44>
 801042a:	4602      	mov	r2, r0
 801042c:	4b44      	ldr	r3, [pc, #272]	@ (8010540 <__multiply+0x14c>)
 801042e:	4845      	ldr	r0, [pc, #276]	@ (8010544 <__multiply+0x150>)
 8010430:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010434:	f000 fc92 	bl	8010d5c <__assert_func>
 8010438:	f100 0514 	add.w	r5, r0, #20
 801043c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010440:	462b      	mov	r3, r5
 8010442:	2200      	movs	r2, #0
 8010444:	4543      	cmp	r3, r8
 8010446:	d321      	bcc.n	801048c <__multiply+0x98>
 8010448:	f107 0114 	add.w	r1, r7, #20
 801044c:	f104 0214 	add.w	r2, r4, #20
 8010450:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010454:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010458:	9302      	str	r3, [sp, #8]
 801045a:	1b13      	subs	r3, r2, r4
 801045c:	3b15      	subs	r3, #21
 801045e:	f023 0303 	bic.w	r3, r3, #3
 8010462:	3304      	adds	r3, #4
 8010464:	f104 0715 	add.w	r7, r4, #21
 8010468:	42ba      	cmp	r2, r7
 801046a:	bf38      	it	cc
 801046c:	2304      	movcc	r3, #4
 801046e:	9301      	str	r3, [sp, #4]
 8010470:	9b02      	ldr	r3, [sp, #8]
 8010472:	9103      	str	r1, [sp, #12]
 8010474:	428b      	cmp	r3, r1
 8010476:	d80c      	bhi.n	8010492 <__multiply+0x9e>
 8010478:	2e00      	cmp	r6, #0
 801047a:	dd03      	ble.n	8010484 <__multiply+0x90>
 801047c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010480:	2b00      	cmp	r3, #0
 8010482:	d05b      	beq.n	801053c <__multiply+0x148>
 8010484:	6106      	str	r6, [r0, #16]
 8010486:	b005      	add	sp, #20
 8010488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801048c:	f843 2b04 	str.w	r2, [r3], #4
 8010490:	e7d8      	b.n	8010444 <__multiply+0x50>
 8010492:	f8b1 a000 	ldrh.w	sl, [r1]
 8010496:	f1ba 0f00 	cmp.w	sl, #0
 801049a:	d024      	beq.n	80104e6 <__multiply+0xf2>
 801049c:	f104 0e14 	add.w	lr, r4, #20
 80104a0:	46a9      	mov	r9, r5
 80104a2:	f04f 0c00 	mov.w	ip, #0
 80104a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80104aa:	f8d9 3000 	ldr.w	r3, [r9]
 80104ae:	fa1f fb87 	uxth.w	fp, r7
 80104b2:	b29b      	uxth	r3, r3
 80104b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80104b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80104bc:	f8d9 7000 	ldr.w	r7, [r9]
 80104c0:	4463      	add	r3, ip
 80104c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80104c6:	fb0a c70b 	mla	r7, sl, fp, ip
 80104ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80104d4:	4572      	cmp	r2, lr
 80104d6:	f849 3b04 	str.w	r3, [r9], #4
 80104da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80104de:	d8e2      	bhi.n	80104a6 <__multiply+0xb2>
 80104e0:	9b01      	ldr	r3, [sp, #4]
 80104e2:	f845 c003 	str.w	ip, [r5, r3]
 80104e6:	9b03      	ldr	r3, [sp, #12]
 80104e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80104ec:	3104      	adds	r1, #4
 80104ee:	f1b9 0f00 	cmp.w	r9, #0
 80104f2:	d021      	beq.n	8010538 <__multiply+0x144>
 80104f4:	682b      	ldr	r3, [r5, #0]
 80104f6:	f104 0c14 	add.w	ip, r4, #20
 80104fa:	46ae      	mov	lr, r5
 80104fc:	f04f 0a00 	mov.w	sl, #0
 8010500:	f8bc b000 	ldrh.w	fp, [ip]
 8010504:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010508:	fb09 770b 	mla	r7, r9, fp, r7
 801050c:	4457      	add	r7, sl
 801050e:	b29b      	uxth	r3, r3
 8010510:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010514:	f84e 3b04 	str.w	r3, [lr], #4
 8010518:	f85c 3b04 	ldr.w	r3, [ip], #4
 801051c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010520:	f8be 3000 	ldrh.w	r3, [lr]
 8010524:	fb09 330a 	mla	r3, r9, sl, r3
 8010528:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801052c:	4562      	cmp	r2, ip
 801052e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010532:	d8e5      	bhi.n	8010500 <__multiply+0x10c>
 8010534:	9f01      	ldr	r7, [sp, #4]
 8010536:	51eb      	str	r3, [r5, r7]
 8010538:	3504      	adds	r5, #4
 801053a:	e799      	b.n	8010470 <__multiply+0x7c>
 801053c:	3e01      	subs	r6, #1
 801053e:	e79b      	b.n	8010478 <__multiply+0x84>
 8010540:	08011550 	.word	0x08011550
 8010544:	08011561 	.word	0x08011561

08010548 <__pow5mult>:
 8010548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801054c:	4615      	mov	r5, r2
 801054e:	f012 0203 	ands.w	r2, r2, #3
 8010552:	4607      	mov	r7, r0
 8010554:	460e      	mov	r6, r1
 8010556:	d007      	beq.n	8010568 <__pow5mult+0x20>
 8010558:	4c25      	ldr	r4, [pc, #148]	@ (80105f0 <__pow5mult+0xa8>)
 801055a:	3a01      	subs	r2, #1
 801055c:	2300      	movs	r3, #0
 801055e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010562:	f7ff fe9f 	bl	80102a4 <__multadd>
 8010566:	4606      	mov	r6, r0
 8010568:	10ad      	asrs	r5, r5, #2
 801056a:	d03d      	beq.n	80105e8 <__pow5mult+0xa0>
 801056c:	69fc      	ldr	r4, [r7, #28]
 801056e:	b97c      	cbnz	r4, 8010590 <__pow5mult+0x48>
 8010570:	2010      	movs	r0, #16
 8010572:	f7ff fd7f 	bl	8010074 <malloc>
 8010576:	4602      	mov	r2, r0
 8010578:	61f8      	str	r0, [r7, #28]
 801057a:	b928      	cbnz	r0, 8010588 <__pow5mult+0x40>
 801057c:	4b1d      	ldr	r3, [pc, #116]	@ (80105f4 <__pow5mult+0xac>)
 801057e:	481e      	ldr	r0, [pc, #120]	@ (80105f8 <__pow5mult+0xb0>)
 8010580:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010584:	f000 fbea 	bl	8010d5c <__assert_func>
 8010588:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801058c:	6004      	str	r4, [r0, #0]
 801058e:	60c4      	str	r4, [r0, #12]
 8010590:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010594:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010598:	b94c      	cbnz	r4, 80105ae <__pow5mult+0x66>
 801059a:	f240 2171 	movw	r1, #625	@ 0x271
 801059e:	4638      	mov	r0, r7
 80105a0:	f7ff ff12 	bl	80103c8 <__i2b>
 80105a4:	2300      	movs	r3, #0
 80105a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80105aa:	4604      	mov	r4, r0
 80105ac:	6003      	str	r3, [r0, #0]
 80105ae:	f04f 0900 	mov.w	r9, #0
 80105b2:	07eb      	lsls	r3, r5, #31
 80105b4:	d50a      	bpl.n	80105cc <__pow5mult+0x84>
 80105b6:	4631      	mov	r1, r6
 80105b8:	4622      	mov	r2, r4
 80105ba:	4638      	mov	r0, r7
 80105bc:	f7ff ff1a 	bl	80103f4 <__multiply>
 80105c0:	4631      	mov	r1, r6
 80105c2:	4680      	mov	r8, r0
 80105c4:	4638      	mov	r0, r7
 80105c6:	f7ff fe4b 	bl	8010260 <_Bfree>
 80105ca:	4646      	mov	r6, r8
 80105cc:	106d      	asrs	r5, r5, #1
 80105ce:	d00b      	beq.n	80105e8 <__pow5mult+0xa0>
 80105d0:	6820      	ldr	r0, [r4, #0]
 80105d2:	b938      	cbnz	r0, 80105e4 <__pow5mult+0x9c>
 80105d4:	4622      	mov	r2, r4
 80105d6:	4621      	mov	r1, r4
 80105d8:	4638      	mov	r0, r7
 80105da:	f7ff ff0b 	bl	80103f4 <__multiply>
 80105de:	6020      	str	r0, [r4, #0]
 80105e0:	f8c0 9000 	str.w	r9, [r0]
 80105e4:	4604      	mov	r4, r0
 80105e6:	e7e4      	b.n	80105b2 <__pow5mult+0x6a>
 80105e8:	4630      	mov	r0, r6
 80105ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105ee:	bf00      	nop
 80105f0:	080115bc 	.word	0x080115bc
 80105f4:	080114e1 	.word	0x080114e1
 80105f8:	08011561 	.word	0x08011561

080105fc <__lshift>:
 80105fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010600:	460c      	mov	r4, r1
 8010602:	6849      	ldr	r1, [r1, #4]
 8010604:	6923      	ldr	r3, [r4, #16]
 8010606:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801060a:	68a3      	ldr	r3, [r4, #8]
 801060c:	4607      	mov	r7, r0
 801060e:	4691      	mov	r9, r2
 8010610:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010614:	f108 0601 	add.w	r6, r8, #1
 8010618:	42b3      	cmp	r3, r6
 801061a:	db0b      	blt.n	8010634 <__lshift+0x38>
 801061c:	4638      	mov	r0, r7
 801061e:	f7ff fddf 	bl	80101e0 <_Balloc>
 8010622:	4605      	mov	r5, r0
 8010624:	b948      	cbnz	r0, 801063a <__lshift+0x3e>
 8010626:	4602      	mov	r2, r0
 8010628:	4b28      	ldr	r3, [pc, #160]	@ (80106cc <__lshift+0xd0>)
 801062a:	4829      	ldr	r0, [pc, #164]	@ (80106d0 <__lshift+0xd4>)
 801062c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010630:	f000 fb94 	bl	8010d5c <__assert_func>
 8010634:	3101      	adds	r1, #1
 8010636:	005b      	lsls	r3, r3, #1
 8010638:	e7ee      	b.n	8010618 <__lshift+0x1c>
 801063a:	2300      	movs	r3, #0
 801063c:	f100 0114 	add.w	r1, r0, #20
 8010640:	f100 0210 	add.w	r2, r0, #16
 8010644:	4618      	mov	r0, r3
 8010646:	4553      	cmp	r3, sl
 8010648:	db33      	blt.n	80106b2 <__lshift+0xb6>
 801064a:	6920      	ldr	r0, [r4, #16]
 801064c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010650:	f104 0314 	add.w	r3, r4, #20
 8010654:	f019 091f 	ands.w	r9, r9, #31
 8010658:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801065c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010660:	d02b      	beq.n	80106ba <__lshift+0xbe>
 8010662:	f1c9 0e20 	rsb	lr, r9, #32
 8010666:	468a      	mov	sl, r1
 8010668:	2200      	movs	r2, #0
 801066a:	6818      	ldr	r0, [r3, #0]
 801066c:	fa00 f009 	lsl.w	r0, r0, r9
 8010670:	4310      	orrs	r0, r2
 8010672:	f84a 0b04 	str.w	r0, [sl], #4
 8010676:	f853 2b04 	ldr.w	r2, [r3], #4
 801067a:	459c      	cmp	ip, r3
 801067c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010680:	d8f3      	bhi.n	801066a <__lshift+0x6e>
 8010682:	ebac 0304 	sub.w	r3, ip, r4
 8010686:	3b15      	subs	r3, #21
 8010688:	f023 0303 	bic.w	r3, r3, #3
 801068c:	3304      	adds	r3, #4
 801068e:	f104 0015 	add.w	r0, r4, #21
 8010692:	4584      	cmp	ip, r0
 8010694:	bf38      	it	cc
 8010696:	2304      	movcc	r3, #4
 8010698:	50ca      	str	r2, [r1, r3]
 801069a:	b10a      	cbz	r2, 80106a0 <__lshift+0xa4>
 801069c:	f108 0602 	add.w	r6, r8, #2
 80106a0:	3e01      	subs	r6, #1
 80106a2:	4638      	mov	r0, r7
 80106a4:	612e      	str	r6, [r5, #16]
 80106a6:	4621      	mov	r1, r4
 80106a8:	f7ff fdda 	bl	8010260 <_Bfree>
 80106ac:	4628      	mov	r0, r5
 80106ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80106b6:	3301      	adds	r3, #1
 80106b8:	e7c5      	b.n	8010646 <__lshift+0x4a>
 80106ba:	3904      	subs	r1, #4
 80106bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80106c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80106c4:	459c      	cmp	ip, r3
 80106c6:	d8f9      	bhi.n	80106bc <__lshift+0xc0>
 80106c8:	e7ea      	b.n	80106a0 <__lshift+0xa4>
 80106ca:	bf00      	nop
 80106cc:	08011550 	.word	0x08011550
 80106d0:	08011561 	.word	0x08011561

080106d4 <__mcmp>:
 80106d4:	690a      	ldr	r2, [r1, #16]
 80106d6:	4603      	mov	r3, r0
 80106d8:	6900      	ldr	r0, [r0, #16]
 80106da:	1a80      	subs	r0, r0, r2
 80106dc:	b530      	push	{r4, r5, lr}
 80106de:	d10e      	bne.n	80106fe <__mcmp+0x2a>
 80106e0:	3314      	adds	r3, #20
 80106e2:	3114      	adds	r1, #20
 80106e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80106e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80106ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80106f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80106f4:	4295      	cmp	r5, r2
 80106f6:	d003      	beq.n	8010700 <__mcmp+0x2c>
 80106f8:	d205      	bcs.n	8010706 <__mcmp+0x32>
 80106fa:	f04f 30ff 	mov.w	r0, #4294967295
 80106fe:	bd30      	pop	{r4, r5, pc}
 8010700:	42a3      	cmp	r3, r4
 8010702:	d3f3      	bcc.n	80106ec <__mcmp+0x18>
 8010704:	e7fb      	b.n	80106fe <__mcmp+0x2a>
 8010706:	2001      	movs	r0, #1
 8010708:	e7f9      	b.n	80106fe <__mcmp+0x2a>
	...

0801070c <__mdiff>:
 801070c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010710:	4689      	mov	r9, r1
 8010712:	4606      	mov	r6, r0
 8010714:	4611      	mov	r1, r2
 8010716:	4648      	mov	r0, r9
 8010718:	4614      	mov	r4, r2
 801071a:	f7ff ffdb 	bl	80106d4 <__mcmp>
 801071e:	1e05      	subs	r5, r0, #0
 8010720:	d112      	bne.n	8010748 <__mdiff+0x3c>
 8010722:	4629      	mov	r1, r5
 8010724:	4630      	mov	r0, r6
 8010726:	f7ff fd5b 	bl	80101e0 <_Balloc>
 801072a:	4602      	mov	r2, r0
 801072c:	b928      	cbnz	r0, 801073a <__mdiff+0x2e>
 801072e:	4b3f      	ldr	r3, [pc, #252]	@ (801082c <__mdiff+0x120>)
 8010730:	f240 2137 	movw	r1, #567	@ 0x237
 8010734:	483e      	ldr	r0, [pc, #248]	@ (8010830 <__mdiff+0x124>)
 8010736:	f000 fb11 	bl	8010d5c <__assert_func>
 801073a:	2301      	movs	r3, #1
 801073c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010740:	4610      	mov	r0, r2
 8010742:	b003      	add	sp, #12
 8010744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010748:	bfbc      	itt	lt
 801074a:	464b      	movlt	r3, r9
 801074c:	46a1      	movlt	r9, r4
 801074e:	4630      	mov	r0, r6
 8010750:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010754:	bfba      	itte	lt
 8010756:	461c      	movlt	r4, r3
 8010758:	2501      	movlt	r5, #1
 801075a:	2500      	movge	r5, #0
 801075c:	f7ff fd40 	bl	80101e0 <_Balloc>
 8010760:	4602      	mov	r2, r0
 8010762:	b918      	cbnz	r0, 801076c <__mdiff+0x60>
 8010764:	4b31      	ldr	r3, [pc, #196]	@ (801082c <__mdiff+0x120>)
 8010766:	f240 2145 	movw	r1, #581	@ 0x245
 801076a:	e7e3      	b.n	8010734 <__mdiff+0x28>
 801076c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010770:	6926      	ldr	r6, [r4, #16]
 8010772:	60c5      	str	r5, [r0, #12]
 8010774:	f109 0310 	add.w	r3, r9, #16
 8010778:	f109 0514 	add.w	r5, r9, #20
 801077c:	f104 0e14 	add.w	lr, r4, #20
 8010780:	f100 0b14 	add.w	fp, r0, #20
 8010784:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010788:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801078c:	9301      	str	r3, [sp, #4]
 801078e:	46d9      	mov	r9, fp
 8010790:	f04f 0c00 	mov.w	ip, #0
 8010794:	9b01      	ldr	r3, [sp, #4]
 8010796:	f85e 0b04 	ldr.w	r0, [lr], #4
 801079a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801079e:	9301      	str	r3, [sp, #4]
 80107a0:	fa1f f38a 	uxth.w	r3, sl
 80107a4:	4619      	mov	r1, r3
 80107a6:	b283      	uxth	r3, r0
 80107a8:	1acb      	subs	r3, r1, r3
 80107aa:	0c00      	lsrs	r0, r0, #16
 80107ac:	4463      	add	r3, ip
 80107ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80107b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80107bc:	4576      	cmp	r6, lr
 80107be:	f849 3b04 	str.w	r3, [r9], #4
 80107c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80107c6:	d8e5      	bhi.n	8010794 <__mdiff+0x88>
 80107c8:	1b33      	subs	r3, r6, r4
 80107ca:	3b15      	subs	r3, #21
 80107cc:	f023 0303 	bic.w	r3, r3, #3
 80107d0:	3415      	adds	r4, #21
 80107d2:	3304      	adds	r3, #4
 80107d4:	42a6      	cmp	r6, r4
 80107d6:	bf38      	it	cc
 80107d8:	2304      	movcc	r3, #4
 80107da:	441d      	add	r5, r3
 80107dc:	445b      	add	r3, fp
 80107de:	461e      	mov	r6, r3
 80107e0:	462c      	mov	r4, r5
 80107e2:	4544      	cmp	r4, r8
 80107e4:	d30e      	bcc.n	8010804 <__mdiff+0xf8>
 80107e6:	f108 0103 	add.w	r1, r8, #3
 80107ea:	1b49      	subs	r1, r1, r5
 80107ec:	f021 0103 	bic.w	r1, r1, #3
 80107f0:	3d03      	subs	r5, #3
 80107f2:	45a8      	cmp	r8, r5
 80107f4:	bf38      	it	cc
 80107f6:	2100      	movcc	r1, #0
 80107f8:	440b      	add	r3, r1
 80107fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80107fe:	b191      	cbz	r1, 8010826 <__mdiff+0x11a>
 8010800:	6117      	str	r7, [r2, #16]
 8010802:	e79d      	b.n	8010740 <__mdiff+0x34>
 8010804:	f854 1b04 	ldr.w	r1, [r4], #4
 8010808:	46e6      	mov	lr, ip
 801080a:	0c08      	lsrs	r0, r1, #16
 801080c:	fa1c fc81 	uxtah	ip, ip, r1
 8010810:	4471      	add	r1, lr
 8010812:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010816:	b289      	uxth	r1, r1
 8010818:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801081c:	f846 1b04 	str.w	r1, [r6], #4
 8010820:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010824:	e7dd      	b.n	80107e2 <__mdiff+0xd6>
 8010826:	3f01      	subs	r7, #1
 8010828:	e7e7      	b.n	80107fa <__mdiff+0xee>
 801082a:	bf00      	nop
 801082c:	08011550 	.word	0x08011550
 8010830:	08011561 	.word	0x08011561

08010834 <__d2b>:
 8010834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010838:	460f      	mov	r7, r1
 801083a:	2101      	movs	r1, #1
 801083c:	ec59 8b10 	vmov	r8, r9, d0
 8010840:	4616      	mov	r6, r2
 8010842:	f7ff fccd 	bl	80101e0 <_Balloc>
 8010846:	4604      	mov	r4, r0
 8010848:	b930      	cbnz	r0, 8010858 <__d2b+0x24>
 801084a:	4602      	mov	r2, r0
 801084c:	4b23      	ldr	r3, [pc, #140]	@ (80108dc <__d2b+0xa8>)
 801084e:	4824      	ldr	r0, [pc, #144]	@ (80108e0 <__d2b+0xac>)
 8010850:	f240 310f 	movw	r1, #783	@ 0x30f
 8010854:	f000 fa82 	bl	8010d5c <__assert_func>
 8010858:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801085c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010860:	b10d      	cbz	r5, 8010866 <__d2b+0x32>
 8010862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010866:	9301      	str	r3, [sp, #4]
 8010868:	f1b8 0300 	subs.w	r3, r8, #0
 801086c:	d023      	beq.n	80108b6 <__d2b+0x82>
 801086e:	4668      	mov	r0, sp
 8010870:	9300      	str	r3, [sp, #0]
 8010872:	f7ff fd7c 	bl	801036e <__lo0bits>
 8010876:	e9dd 1200 	ldrd	r1, r2, [sp]
 801087a:	b1d0      	cbz	r0, 80108b2 <__d2b+0x7e>
 801087c:	f1c0 0320 	rsb	r3, r0, #32
 8010880:	fa02 f303 	lsl.w	r3, r2, r3
 8010884:	430b      	orrs	r3, r1
 8010886:	40c2      	lsrs	r2, r0
 8010888:	6163      	str	r3, [r4, #20]
 801088a:	9201      	str	r2, [sp, #4]
 801088c:	9b01      	ldr	r3, [sp, #4]
 801088e:	61a3      	str	r3, [r4, #24]
 8010890:	2b00      	cmp	r3, #0
 8010892:	bf0c      	ite	eq
 8010894:	2201      	moveq	r2, #1
 8010896:	2202      	movne	r2, #2
 8010898:	6122      	str	r2, [r4, #16]
 801089a:	b1a5      	cbz	r5, 80108c6 <__d2b+0x92>
 801089c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80108a0:	4405      	add	r5, r0
 80108a2:	603d      	str	r5, [r7, #0]
 80108a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80108a8:	6030      	str	r0, [r6, #0]
 80108aa:	4620      	mov	r0, r4
 80108ac:	b003      	add	sp, #12
 80108ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108b2:	6161      	str	r1, [r4, #20]
 80108b4:	e7ea      	b.n	801088c <__d2b+0x58>
 80108b6:	a801      	add	r0, sp, #4
 80108b8:	f7ff fd59 	bl	801036e <__lo0bits>
 80108bc:	9b01      	ldr	r3, [sp, #4]
 80108be:	6163      	str	r3, [r4, #20]
 80108c0:	3020      	adds	r0, #32
 80108c2:	2201      	movs	r2, #1
 80108c4:	e7e8      	b.n	8010898 <__d2b+0x64>
 80108c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80108ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80108ce:	6038      	str	r0, [r7, #0]
 80108d0:	6918      	ldr	r0, [r3, #16]
 80108d2:	f7ff fd2d 	bl	8010330 <__hi0bits>
 80108d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80108da:	e7e5      	b.n	80108a8 <__d2b+0x74>
 80108dc:	08011550 	.word	0x08011550
 80108e0:	08011561 	.word	0x08011561

080108e4 <__ssputs_r>:
 80108e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108e8:	688e      	ldr	r6, [r1, #8]
 80108ea:	461f      	mov	r7, r3
 80108ec:	42be      	cmp	r6, r7
 80108ee:	680b      	ldr	r3, [r1, #0]
 80108f0:	4682      	mov	sl, r0
 80108f2:	460c      	mov	r4, r1
 80108f4:	4690      	mov	r8, r2
 80108f6:	d82d      	bhi.n	8010954 <__ssputs_r+0x70>
 80108f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80108fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010900:	d026      	beq.n	8010950 <__ssputs_r+0x6c>
 8010902:	6965      	ldr	r5, [r4, #20]
 8010904:	6909      	ldr	r1, [r1, #16]
 8010906:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801090a:	eba3 0901 	sub.w	r9, r3, r1
 801090e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010912:	1c7b      	adds	r3, r7, #1
 8010914:	444b      	add	r3, r9
 8010916:	106d      	asrs	r5, r5, #1
 8010918:	429d      	cmp	r5, r3
 801091a:	bf38      	it	cc
 801091c:	461d      	movcc	r5, r3
 801091e:	0553      	lsls	r3, r2, #21
 8010920:	d527      	bpl.n	8010972 <__ssputs_r+0x8e>
 8010922:	4629      	mov	r1, r5
 8010924:	f7ff fbd0 	bl	80100c8 <_malloc_r>
 8010928:	4606      	mov	r6, r0
 801092a:	b360      	cbz	r0, 8010986 <__ssputs_r+0xa2>
 801092c:	6921      	ldr	r1, [r4, #16]
 801092e:	464a      	mov	r2, r9
 8010930:	f000 fa06 	bl	8010d40 <memcpy>
 8010934:	89a3      	ldrh	r3, [r4, #12]
 8010936:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801093a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801093e:	81a3      	strh	r3, [r4, #12]
 8010940:	6126      	str	r6, [r4, #16]
 8010942:	6165      	str	r5, [r4, #20]
 8010944:	444e      	add	r6, r9
 8010946:	eba5 0509 	sub.w	r5, r5, r9
 801094a:	6026      	str	r6, [r4, #0]
 801094c:	60a5      	str	r5, [r4, #8]
 801094e:	463e      	mov	r6, r7
 8010950:	42be      	cmp	r6, r7
 8010952:	d900      	bls.n	8010956 <__ssputs_r+0x72>
 8010954:	463e      	mov	r6, r7
 8010956:	6820      	ldr	r0, [r4, #0]
 8010958:	4632      	mov	r2, r6
 801095a:	4641      	mov	r1, r8
 801095c:	f000 f9c6 	bl	8010cec <memmove>
 8010960:	68a3      	ldr	r3, [r4, #8]
 8010962:	1b9b      	subs	r3, r3, r6
 8010964:	60a3      	str	r3, [r4, #8]
 8010966:	6823      	ldr	r3, [r4, #0]
 8010968:	4433      	add	r3, r6
 801096a:	6023      	str	r3, [r4, #0]
 801096c:	2000      	movs	r0, #0
 801096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010972:	462a      	mov	r2, r5
 8010974:	f000 fa36 	bl	8010de4 <_realloc_r>
 8010978:	4606      	mov	r6, r0
 801097a:	2800      	cmp	r0, #0
 801097c:	d1e0      	bne.n	8010940 <__ssputs_r+0x5c>
 801097e:	6921      	ldr	r1, [r4, #16]
 8010980:	4650      	mov	r0, sl
 8010982:	f7ff fb2d 	bl	800ffe0 <_free_r>
 8010986:	230c      	movs	r3, #12
 8010988:	f8ca 3000 	str.w	r3, [sl]
 801098c:	89a3      	ldrh	r3, [r4, #12]
 801098e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010992:	81a3      	strh	r3, [r4, #12]
 8010994:	f04f 30ff 	mov.w	r0, #4294967295
 8010998:	e7e9      	b.n	801096e <__ssputs_r+0x8a>
	...

0801099c <_svfiprintf_r>:
 801099c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a0:	4698      	mov	r8, r3
 80109a2:	898b      	ldrh	r3, [r1, #12]
 80109a4:	061b      	lsls	r3, r3, #24
 80109a6:	b09d      	sub	sp, #116	@ 0x74
 80109a8:	4607      	mov	r7, r0
 80109aa:	460d      	mov	r5, r1
 80109ac:	4614      	mov	r4, r2
 80109ae:	d510      	bpl.n	80109d2 <_svfiprintf_r+0x36>
 80109b0:	690b      	ldr	r3, [r1, #16]
 80109b2:	b973      	cbnz	r3, 80109d2 <_svfiprintf_r+0x36>
 80109b4:	2140      	movs	r1, #64	@ 0x40
 80109b6:	f7ff fb87 	bl	80100c8 <_malloc_r>
 80109ba:	6028      	str	r0, [r5, #0]
 80109bc:	6128      	str	r0, [r5, #16]
 80109be:	b930      	cbnz	r0, 80109ce <_svfiprintf_r+0x32>
 80109c0:	230c      	movs	r3, #12
 80109c2:	603b      	str	r3, [r7, #0]
 80109c4:	f04f 30ff 	mov.w	r0, #4294967295
 80109c8:	b01d      	add	sp, #116	@ 0x74
 80109ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ce:	2340      	movs	r3, #64	@ 0x40
 80109d0:	616b      	str	r3, [r5, #20]
 80109d2:	2300      	movs	r3, #0
 80109d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80109d6:	2320      	movs	r3, #32
 80109d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80109dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80109e0:	2330      	movs	r3, #48	@ 0x30
 80109e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010b80 <_svfiprintf_r+0x1e4>
 80109e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80109ea:	f04f 0901 	mov.w	r9, #1
 80109ee:	4623      	mov	r3, r4
 80109f0:	469a      	mov	sl, r3
 80109f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109f6:	b10a      	cbz	r2, 80109fc <_svfiprintf_r+0x60>
 80109f8:	2a25      	cmp	r2, #37	@ 0x25
 80109fa:	d1f9      	bne.n	80109f0 <_svfiprintf_r+0x54>
 80109fc:	ebba 0b04 	subs.w	fp, sl, r4
 8010a00:	d00b      	beq.n	8010a1a <_svfiprintf_r+0x7e>
 8010a02:	465b      	mov	r3, fp
 8010a04:	4622      	mov	r2, r4
 8010a06:	4629      	mov	r1, r5
 8010a08:	4638      	mov	r0, r7
 8010a0a:	f7ff ff6b 	bl	80108e4 <__ssputs_r>
 8010a0e:	3001      	adds	r0, #1
 8010a10:	f000 80a7 	beq.w	8010b62 <_svfiprintf_r+0x1c6>
 8010a14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a16:	445a      	add	r2, fp
 8010a18:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	f000 809f 	beq.w	8010b62 <_svfiprintf_r+0x1c6>
 8010a24:	2300      	movs	r3, #0
 8010a26:	f04f 32ff 	mov.w	r2, #4294967295
 8010a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a2e:	f10a 0a01 	add.w	sl, sl, #1
 8010a32:	9304      	str	r3, [sp, #16]
 8010a34:	9307      	str	r3, [sp, #28]
 8010a36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010a3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a3c:	4654      	mov	r4, sl
 8010a3e:	2205      	movs	r2, #5
 8010a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a44:	484e      	ldr	r0, [pc, #312]	@ (8010b80 <_svfiprintf_r+0x1e4>)
 8010a46:	f7ef fbeb 	bl	8000220 <memchr>
 8010a4a:	9a04      	ldr	r2, [sp, #16]
 8010a4c:	b9d8      	cbnz	r0, 8010a86 <_svfiprintf_r+0xea>
 8010a4e:	06d0      	lsls	r0, r2, #27
 8010a50:	bf44      	itt	mi
 8010a52:	2320      	movmi	r3, #32
 8010a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a58:	0711      	lsls	r1, r2, #28
 8010a5a:	bf44      	itt	mi
 8010a5c:	232b      	movmi	r3, #43	@ 0x2b
 8010a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a62:	f89a 3000 	ldrb.w	r3, [sl]
 8010a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a68:	d015      	beq.n	8010a96 <_svfiprintf_r+0xfa>
 8010a6a:	9a07      	ldr	r2, [sp, #28]
 8010a6c:	4654      	mov	r4, sl
 8010a6e:	2000      	movs	r0, #0
 8010a70:	f04f 0c0a 	mov.w	ip, #10
 8010a74:	4621      	mov	r1, r4
 8010a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a7a:	3b30      	subs	r3, #48	@ 0x30
 8010a7c:	2b09      	cmp	r3, #9
 8010a7e:	d94b      	bls.n	8010b18 <_svfiprintf_r+0x17c>
 8010a80:	b1b0      	cbz	r0, 8010ab0 <_svfiprintf_r+0x114>
 8010a82:	9207      	str	r2, [sp, #28]
 8010a84:	e014      	b.n	8010ab0 <_svfiprintf_r+0x114>
 8010a86:	eba0 0308 	sub.w	r3, r0, r8
 8010a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8010a8e:	4313      	orrs	r3, r2
 8010a90:	9304      	str	r3, [sp, #16]
 8010a92:	46a2      	mov	sl, r4
 8010a94:	e7d2      	b.n	8010a3c <_svfiprintf_r+0xa0>
 8010a96:	9b03      	ldr	r3, [sp, #12]
 8010a98:	1d19      	adds	r1, r3, #4
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	9103      	str	r1, [sp, #12]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	bfbb      	ittet	lt
 8010aa2:	425b      	neglt	r3, r3
 8010aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8010aa8:	9307      	strge	r3, [sp, #28]
 8010aaa:	9307      	strlt	r3, [sp, #28]
 8010aac:	bfb8      	it	lt
 8010aae:	9204      	strlt	r2, [sp, #16]
 8010ab0:	7823      	ldrb	r3, [r4, #0]
 8010ab2:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ab4:	d10a      	bne.n	8010acc <_svfiprintf_r+0x130>
 8010ab6:	7863      	ldrb	r3, [r4, #1]
 8010ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8010aba:	d132      	bne.n	8010b22 <_svfiprintf_r+0x186>
 8010abc:	9b03      	ldr	r3, [sp, #12]
 8010abe:	1d1a      	adds	r2, r3, #4
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	9203      	str	r2, [sp, #12]
 8010ac4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010ac8:	3402      	adds	r4, #2
 8010aca:	9305      	str	r3, [sp, #20]
 8010acc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010b90 <_svfiprintf_r+0x1f4>
 8010ad0:	7821      	ldrb	r1, [r4, #0]
 8010ad2:	2203      	movs	r2, #3
 8010ad4:	4650      	mov	r0, sl
 8010ad6:	f7ef fba3 	bl	8000220 <memchr>
 8010ada:	b138      	cbz	r0, 8010aec <_svfiprintf_r+0x150>
 8010adc:	9b04      	ldr	r3, [sp, #16]
 8010ade:	eba0 000a 	sub.w	r0, r0, sl
 8010ae2:	2240      	movs	r2, #64	@ 0x40
 8010ae4:	4082      	lsls	r2, r0
 8010ae6:	4313      	orrs	r3, r2
 8010ae8:	3401      	adds	r4, #1
 8010aea:	9304      	str	r3, [sp, #16]
 8010aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010af0:	4824      	ldr	r0, [pc, #144]	@ (8010b84 <_svfiprintf_r+0x1e8>)
 8010af2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010af6:	2206      	movs	r2, #6
 8010af8:	f7ef fb92 	bl	8000220 <memchr>
 8010afc:	2800      	cmp	r0, #0
 8010afe:	d036      	beq.n	8010b6e <_svfiprintf_r+0x1d2>
 8010b00:	4b21      	ldr	r3, [pc, #132]	@ (8010b88 <_svfiprintf_r+0x1ec>)
 8010b02:	bb1b      	cbnz	r3, 8010b4c <_svfiprintf_r+0x1b0>
 8010b04:	9b03      	ldr	r3, [sp, #12]
 8010b06:	3307      	adds	r3, #7
 8010b08:	f023 0307 	bic.w	r3, r3, #7
 8010b0c:	3308      	adds	r3, #8
 8010b0e:	9303      	str	r3, [sp, #12]
 8010b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b12:	4433      	add	r3, r6
 8010b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b16:	e76a      	b.n	80109ee <_svfiprintf_r+0x52>
 8010b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b1c:	460c      	mov	r4, r1
 8010b1e:	2001      	movs	r0, #1
 8010b20:	e7a8      	b.n	8010a74 <_svfiprintf_r+0xd8>
 8010b22:	2300      	movs	r3, #0
 8010b24:	3401      	adds	r4, #1
 8010b26:	9305      	str	r3, [sp, #20]
 8010b28:	4619      	mov	r1, r3
 8010b2a:	f04f 0c0a 	mov.w	ip, #10
 8010b2e:	4620      	mov	r0, r4
 8010b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b34:	3a30      	subs	r2, #48	@ 0x30
 8010b36:	2a09      	cmp	r2, #9
 8010b38:	d903      	bls.n	8010b42 <_svfiprintf_r+0x1a6>
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d0c6      	beq.n	8010acc <_svfiprintf_r+0x130>
 8010b3e:	9105      	str	r1, [sp, #20]
 8010b40:	e7c4      	b.n	8010acc <_svfiprintf_r+0x130>
 8010b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b46:	4604      	mov	r4, r0
 8010b48:	2301      	movs	r3, #1
 8010b4a:	e7f0      	b.n	8010b2e <_svfiprintf_r+0x192>
 8010b4c:	ab03      	add	r3, sp, #12
 8010b4e:	9300      	str	r3, [sp, #0]
 8010b50:	462a      	mov	r2, r5
 8010b52:	4b0e      	ldr	r3, [pc, #56]	@ (8010b8c <_svfiprintf_r+0x1f0>)
 8010b54:	a904      	add	r1, sp, #16
 8010b56:	4638      	mov	r0, r7
 8010b58:	f7fd fe96 	bl	800e888 <_printf_float>
 8010b5c:	1c42      	adds	r2, r0, #1
 8010b5e:	4606      	mov	r6, r0
 8010b60:	d1d6      	bne.n	8010b10 <_svfiprintf_r+0x174>
 8010b62:	89ab      	ldrh	r3, [r5, #12]
 8010b64:	065b      	lsls	r3, r3, #25
 8010b66:	f53f af2d 	bmi.w	80109c4 <_svfiprintf_r+0x28>
 8010b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b6c:	e72c      	b.n	80109c8 <_svfiprintf_r+0x2c>
 8010b6e:	ab03      	add	r3, sp, #12
 8010b70:	9300      	str	r3, [sp, #0]
 8010b72:	462a      	mov	r2, r5
 8010b74:	4b05      	ldr	r3, [pc, #20]	@ (8010b8c <_svfiprintf_r+0x1f0>)
 8010b76:	a904      	add	r1, sp, #16
 8010b78:	4638      	mov	r0, r7
 8010b7a:	f7fe f91d 	bl	800edb8 <_printf_i>
 8010b7e:	e7ed      	b.n	8010b5c <_svfiprintf_r+0x1c0>
 8010b80:	080116b8 	.word	0x080116b8
 8010b84:	080116c2 	.word	0x080116c2
 8010b88:	0800e889 	.word	0x0800e889
 8010b8c:	080108e5 	.word	0x080108e5
 8010b90:	080116be 	.word	0x080116be

08010b94 <__sflush_r>:
 8010b94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b9c:	0716      	lsls	r6, r2, #28
 8010b9e:	4605      	mov	r5, r0
 8010ba0:	460c      	mov	r4, r1
 8010ba2:	d454      	bmi.n	8010c4e <__sflush_r+0xba>
 8010ba4:	684b      	ldr	r3, [r1, #4]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	dc02      	bgt.n	8010bb0 <__sflush_r+0x1c>
 8010baa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	dd48      	ble.n	8010c42 <__sflush_r+0xae>
 8010bb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010bb2:	2e00      	cmp	r6, #0
 8010bb4:	d045      	beq.n	8010c42 <__sflush_r+0xae>
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010bbc:	682f      	ldr	r7, [r5, #0]
 8010bbe:	6a21      	ldr	r1, [r4, #32]
 8010bc0:	602b      	str	r3, [r5, #0]
 8010bc2:	d030      	beq.n	8010c26 <__sflush_r+0x92>
 8010bc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010bc6:	89a3      	ldrh	r3, [r4, #12]
 8010bc8:	0759      	lsls	r1, r3, #29
 8010bca:	d505      	bpl.n	8010bd8 <__sflush_r+0x44>
 8010bcc:	6863      	ldr	r3, [r4, #4]
 8010bce:	1ad2      	subs	r2, r2, r3
 8010bd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010bd2:	b10b      	cbz	r3, 8010bd8 <__sflush_r+0x44>
 8010bd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010bd6:	1ad2      	subs	r2, r2, r3
 8010bd8:	2300      	movs	r3, #0
 8010bda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010bdc:	6a21      	ldr	r1, [r4, #32]
 8010bde:	4628      	mov	r0, r5
 8010be0:	47b0      	blx	r6
 8010be2:	1c43      	adds	r3, r0, #1
 8010be4:	89a3      	ldrh	r3, [r4, #12]
 8010be6:	d106      	bne.n	8010bf6 <__sflush_r+0x62>
 8010be8:	6829      	ldr	r1, [r5, #0]
 8010bea:	291d      	cmp	r1, #29
 8010bec:	d82b      	bhi.n	8010c46 <__sflush_r+0xb2>
 8010bee:	4a2a      	ldr	r2, [pc, #168]	@ (8010c98 <__sflush_r+0x104>)
 8010bf0:	410a      	asrs	r2, r1
 8010bf2:	07d6      	lsls	r6, r2, #31
 8010bf4:	d427      	bmi.n	8010c46 <__sflush_r+0xb2>
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	6062      	str	r2, [r4, #4]
 8010bfa:	04d9      	lsls	r1, r3, #19
 8010bfc:	6922      	ldr	r2, [r4, #16]
 8010bfe:	6022      	str	r2, [r4, #0]
 8010c00:	d504      	bpl.n	8010c0c <__sflush_r+0x78>
 8010c02:	1c42      	adds	r2, r0, #1
 8010c04:	d101      	bne.n	8010c0a <__sflush_r+0x76>
 8010c06:	682b      	ldr	r3, [r5, #0]
 8010c08:	b903      	cbnz	r3, 8010c0c <__sflush_r+0x78>
 8010c0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8010c0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c0e:	602f      	str	r7, [r5, #0]
 8010c10:	b1b9      	cbz	r1, 8010c42 <__sflush_r+0xae>
 8010c12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c16:	4299      	cmp	r1, r3
 8010c18:	d002      	beq.n	8010c20 <__sflush_r+0x8c>
 8010c1a:	4628      	mov	r0, r5
 8010c1c:	f7ff f9e0 	bl	800ffe0 <_free_r>
 8010c20:	2300      	movs	r3, #0
 8010c22:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c24:	e00d      	b.n	8010c42 <__sflush_r+0xae>
 8010c26:	2301      	movs	r3, #1
 8010c28:	4628      	mov	r0, r5
 8010c2a:	47b0      	blx	r6
 8010c2c:	4602      	mov	r2, r0
 8010c2e:	1c50      	adds	r0, r2, #1
 8010c30:	d1c9      	bne.n	8010bc6 <__sflush_r+0x32>
 8010c32:	682b      	ldr	r3, [r5, #0]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d0c6      	beq.n	8010bc6 <__sflush_r+0x32>
 8010c38:	2b1d      	cmp	r3, #29
 8010c3a:	d001      	beq.n	8010c40 <__sflush_r+0xac>
 8010c3c:	2b16      	cmp	r3, #22
 8010c3e:	d11e      	bne.n	8010c7e <__sflush_r+0xea>
 8010c40:	602f      	str	r7, [r5, #0]
 8010c42:	2000      	movs	r0, #0
 8010c44:	e022      	b.n	8010c8c <__sflush_r+0xf8>
 8010c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c4a:	b21b      	sxth	r3, r3
 8010c4c:	e01b      	b.n	8010c86 <__sflush_r+0xf2>
 8010c4e:	690f      	ldr	r7, [r1, #16]
 8010c50:	2f00      	cmp	r7, #0
 8010c52:	d0f6      	beq.n	8010c42 <__sflush_r+0xae>
 8010c54:	0793      	lsls	r3, r2, #30
 8010c56:	680e      	ldr	r6, [r1, #0]
 8010c58:	bf08      	it	eq
 8010c5a:	694b      	ldreq	r3, [r1, #20]
 8010c5c:	600f      	str	r7, [r1, #0]
 8010c5e:	bf18      	it	ne
 8010c60:	2300      	movne	r3, #0
 8010c62:	eba6 0807 	sub.w	r8, r6, r7
 8010c66:	608b      	str	r3, [r1, #8]
 8010c68:	f1b8 0f00 	cmp.w	r8, #0
 8010c6c:	dde9      	ble.n	8010c42 <__sflush_r+0xae>
 8010c6e:	6a21      	ldr	r1, [r4, #32]
 8010c70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010c72:	4643      	mov	r3, r8
 8010c74:	463a      	mov	r2, r7
 8010c76:	4628      	mov	r0, r5
 8010c78:	47b0      	blx	r6
 8010c7a:	2800      	cmp	r0, #0
 8010c7c:	dc08      	bgt.n	8010c90 <__sflush_r+0xfc>
 8010c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c86:	81a3      	strh	r3, [r4, #12]
 8010c88:	f04f 30ff 	mov.w	r0, #4294967295
 8010c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c90:	4407      	add	r7, r0
 8010c92:	eba8 0800 	sub.w	r8, r8, r0
 8010c96:	e7e7      	b.n	8010c68 <__sflush_r+0xd4>
 8010c98:	dfbffffe 	.word	0xdfbffffe

08010c9c <_fflush_r>:
 8010c9c:	b538      	push	{r3, r4, r5, lr}
 8010c9e:	690b      	ldr	r3, [r1, #16]
 8010ca0:	4605      	mov	r5, r0
 8010ca2:	460c      	mov	r4, r1
 8010ca4:	b913      	cbnz	r3, 8010cac <_fflush_r+0x10>
 8010ca6:	2500      	movs	r5, #0
 8010ca8:	4628      	mov	r0, r5
 8010caa:	bd38      	pop	{r3, r4, r5, pc}
 8010cac:	b118      	cbz	r0, 8010cb6 <_fflush_r+0x1a>
 8010cae:	6a03      	ldr	r3, [r0, #32]
 8010cb0:	b90b      	cbnz	r3, 8010cb6 <_fflush_r+0x1a>
 8010cb2:	f7fe fa2d 	bl	800f110 <__sinit>
 8010cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d0f3      	beq.n	8010ca6 <_fflush_r+0xa>
 8010cbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010cc0:	07d0      	lsls	r0, r2, #31
 8010cc2:	d404      	bmi.n	8010cce <_fflush_r+0x32>
 8010cc4:	0599      	lsls	r1, r3, #22
 8010cc6:	d402      	bmi.n	8010cce <_fflush_r+0x32>
 8010cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cca:	f7fe fb38 	bl	800f33e <__retarget_lock_acquire_recursive>
 8010cce:	4628      	mov	r0, r5
 8010cd0:	4621      	mov	r1, r4
 8010cd2:	f7ff ff5f 	bl	8010b94 <__sflush_r>
 8010cd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010cd8:	07da      	lsls	r2, r3, #31
 8010cda:	4605      	mov	r5, r0
 8010cdc:	d4e4      	bmi.n	8010ca8 <_fflush_r+0xc>
 8010cde:	89a3      	ldrh	r3, [r4, #12]
 8010ce0:	059b      	lsls	r3, r3, #22
 8010ce2:	d4e1      	bmi.n	8010ca8 <_fflush_r+0xc>
 8010ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ce6:	f7fe fb2b 	bl	800f340 <__retarget_lock_release_recursive>
 8010cea:	e7dd      	b.n	8010ca8 <_fflush_r+0xc>

08010cec <memmove>:
 8010cec:	4288      	cmp	r0, r1
 8010cee:	b510      	push	{r4, lr}
 8010cf0:	eb01 0402 	add.w	r4, r1, r2
 8010cf4:	d902      	bls.n	8010cfc <memmove+0x10>
 8010cf6:	4284      	cmp	r4, r0
 8010cf8:	4623      	mov	r3, r4
 8010cfa:	d807      	bhi.n	8010d0c <memmove+0x20>
 8010cfc:	1e43      	subs	r3, r0, #1
 8010cfe:	42a1      	cmp	r1, r4
 8010d00:	d008      	beq.n	8010d14 <memmove+0x28>
 8010d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d0a:	e7f8      	b.n	8010cfe <memmove+0x12>
 8010d0c:	4402      	add	r2, r0
 8010d0e:	4601      	mov	r1, r0
 8010d10:	428a      	cmp	r2, r1
 8010d12:	d100      	bne.n	8010d16 <memmove+0x2a>
 8010d14:	bd10      	pop	{r4, pc}
 8010d16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d1e:	e7f7      	b.n	8010d10 <memmove+0x24>

08010d20 <_sbrk_r>:
 8010d20:	b538      	push	{r3, r4, r5, lr}
 8010d22:	4d06      	ldr	r5, [pc, #24]	@ (8010d3c <_sbrk_r+0x1c>)
 8010d24:	2300      	movs	r3, #0
 8010d26:	4604      	mov	r4, r0
 8010d28:	4608      	mov	r0, r1
 8010d2a:	602b      	str	r3, [r5, #0]
 8010d2c:	f7f1 fbd2 	bl	80024d4 <_sbrk>
 8010d30:	1c43      	adds	r3, r0, #1
 8010d32:	d102      	bne.n	8010d3a <_sbrk_r+0x1a>
 8010d34:	682b      	ldr	r3, [r5, #0]
 8010d36:	b103      	cbz	r3, 8010d3a <_sbrk_r+0x1a>
 8010d38:	6023      	str	r3, [r4, #0]
 8010d3a:	bd38      	pop	{r3, r4, r5, pc}
 8010d3c:	20001dd4 	.word	0x20001dd4

08010d40 <memcpy>:
 8010d40:	440a      	add	r2, r1
 8010d42:	4291      	cmp	r1, r2
 8010d44:	f100 33ff 	add.w	r3, r0, #4294967295
 8010d48:	d100      	bne.n	8010d4c <memcpy+0xc>
 8010d4a:	4770      	bx	lr
 8010d4c:	b510      	push	{r4, lr}
 8010d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d56:	4291      	cmp	r1, r2
 8010d58:	d1f9      	bne.n	8010d4e <memcpy+0xe>
 8010d5a:	bd10      	pop	{r4, pc}

08010d5c <__assert_func>:
 8010d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d5e:	4614      	mov	r4, r2
 8010d60:	461a      	mov	r2, r3
 8010d62:	4b09      	ldr	r3, [pc, #36]	@ (8010d88 <__assert_func+0x2c>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	4605      	mov	r5, r0
 8010d68:	68d8      	ldr	r0, [r3, #12]
 8010d6a:	b954      	cbnz	r4, 8010d82 <__assert_func+0x26>
 8010d6c:	4b07      	ldr	r3, [pc, #28]	@ (8010d8c <__assert_func+0x30>)
 8010d6e:	461c      	mov	r4, r3
 8010d70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d74:	9100      	str	r1, [sp, #0]
 8010d76:	462b      	mov	r3, r5
 8010d78:	4905      	ldr	r1, [pc, #20]	@ (8010d90 <__assert_func+0x34>)
 8010d7a:	f000 f86f 	bl	8010e5c <fiprintf>
 8010d7e:	f000 f87f 	bl	8010e80 <abort>
 8010d82:	4b04      	ldr	r3, [pc, #16]	@ (8010d94 <__assert_func+0x38>)
 8010d84:	e7f4      	b.n	8010d70 <__assert_func+0x14>
 8010d86:	bf00      	nop
 8010d88:	20000584 	.word	0x20000584
 8010d8c:	0801170e 	.word	0x0801170e
 8010d90:	080116e0 	.word	0x080116e0
 8010d94:	080116d3 	.word	0x080116d3

08010d98 <_calloc_r>:
 8010d98:	b570      	push	{r4, r5, r6, lr}
 8010d9a:	fba1 5402 	umull	r5, r4, r1, r2
 8010d9e:	b93c      	cbnz	r4, 8010db0 <_calloc_r+0x18>
 8010da0:	4629      	mov	r1, r5
 8010da2:	f7ff f991 	bl	80100c8 <_malloc_r>
 8010da6:	4606      	mov	r6, r0
 8010da8:	b928      	cbnz	r0, 8010db6 <_calloc_r+0x1e>
 8010daa:	2600      	movs	r6, #0
 8010dac:	4630      	mov	r0, r6
 8010dae:	bd70      	pop	{r4, r5, r6, pc}
 8010db0:	220c      	movs	r2, #12
 8010db2:	6002      	str	r2, [r0, #0]
 8010db4:	e7f9      	b.n	8010daa <_calloc_r+0x12>
 8010db6:	462a      	mov	r2, r5
 8010db8:	4621      	mov	r1, r4
 8010dba:	f7fe fa42 	bl	800f242 <memset>
 8010dbe:	e7f5      	b.n	8010dac <_calloc_r+0x14>

08010dc0 <__ascii_mbtowc>:
 8010dc0:	b082      	sub	sp, #8
 8010dc2:	b901      	cbnz	r1, 8010dc6 <__ascii_mbtowc+0x6>
 8010dc4:	a901      	add	r1, sp, #4
 8010dc6:	b142      	cbz	r2, 8010dda <__ascii_mbtowc+0x1a>
 8010dc8:	b14b      	cbz	r3, 8010dde <__ascii_mbtowc+0x1e>
 8010dca:	7813      	ldrb	r3, [r2, #0]
 8010dcc:	600b      	str	r3, [r1, #0]
 8010dce:	7812      	ldrb	r2, [r2, #0]
 8010dd0:	1e10      	subs	r0, r2, #0
 8010dd2:	bf18      	it	ne
 8010dd4:	2001      	movne	r0, #1
 8010dd6:	b002      	add	sp, #8
 8010dd8:	4770      	bx	lr
 8010dda:	4610      	mov	r0, r2
 8010ddc:	e7fb      	b.n	8010dd6 <__ascii_mbtowc+0x16>
 8010dde:	f06f 0001 	mvn.w	r0, #1
 8010de2:	e7f8      	b.n	8010dd6 <__ascii_mbtowc+0x16>

08010de4 <_realloc_r>:
 8010de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010de8:	4680      	mov	r8, r0
 8010dea:	4615      	mov	r5, r2
 8010dec:	460c      	mov	r4, r1
 8010dee:	b921      	cbnz	r1, 8010dfa <_realloc_r+0x16>
 8010df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010df4:	4611      	mov	r1, r2
 8010df6:	f7ff b967 	b.w	80100c8 <_malloc_r>
 8010dfa:	b92a      	cbnz	r2, 8010e08 <_realloc_r+0x24>
 8010dfc:	f7ff f8f0 	bl	800ffe0 <_free_r>
 8010e00:	2400      	movs	r4, #0
 8010e02:	4620      	mov	r0, r4
 8010e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e08:	f000 f841 	bl	8010e8e <_malloc_usable_size_r>
 8010e0c:	4285      	cmp	r5, r0
 8010e0e:	4606      	mov	r6, r0
 8010e10:	d802      	bhi.n	8010e18 <_realloc_r+0x34>
 8010e12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010e16:	d8f4      	bhi.n	8010e02 <_realloc_r+0x1e>
 8010e18:	4629      	mov	r1, r5
 8010e1a:	4640      	mov	r0, r8
 8010e1c:	f7ff f954 	bl	80100c8 <_malloc_r>
 8010e20:	4607      	mov	r7, r0
 8010e22:	2800      	cmp	r0, #0
 8010e24:	d0ec      	beq.n	8010e00 <_realloc_r+0x1c>
 8010e26:	42b5      	cmp	r5, r6
 8010e28:	462a      	mov	r2, r5
 8010e2a:	4621      	mov	r1, r4
 8010e2c:	bf28      	it	cs
 8010e2e:	4632      	movcs	r2, r6
 8010e30:	f7ff ff86 	bl	8010d40 <memcpy>
 8010e34:	4621      	mov	r1, r4
 8010e36:	4640      	mov	r0, r8
 8010e38:	f7ff f8d2 	bl	800ffe0 <_free_r>
 8010e3c:	463c      	mov	r4, r7
 8010e3e:	e7e0      	b.n	8010e02 <_realloc_r+0x1e>

08010e40 <__ascii_wctomb>:
 8010e40:	4603      	mov	r3, r0
 8010e42:	4608      	mov	r0, r1
 8010e44:	b141      	cbz	r1, 8010e58 <__ascii_wctomb+0x18>
 8010e46:	2aff      	cmp	r2, #255	@ 0xff
 8010e48:	d904      	bls.n	8010e54 <__ascii_wctomb+0x14>
 8010e4a:	228a      	movs	r2, #138	@ 0x8a
 8010e4c:	601a      	str	r2, [r3, #0]
 8010e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e52:	4770      	bx	lr
 8010e54:	700a      	strb	r2, [r1, #0]
 8010e56:	2001      	movs	r0, #1
 8010e58:	4770      	bx	lr
	...

08010e5c <fiprintf>:
 8010e5c:	b40e      	push	{r1, r2, r3}
 8010e5e:	b503      	push	{r0, r1, lr}
 8010e60:	4601      	mov	r1, r0
 8010e62:	ab03      	add	r3, sp, #12
 8010e64:	4805      	ldr	r0, [pc, #20]	@ (8010e7c <fiprintf+0x20>)
 8010e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e6a:	6800      	ldr	r0, [r0, #0]
 8010e6c:	9301      	str	r3, [sp, #4]
 8010e6e:	f000 f83f 	bl	8010ef0 <_vfiprintf_r>
 8010e72:	b002      	add	sp, #8
 8010e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e78:	b003      	add	sp, #12
 8010e7a:	4770      	bx	lr
 8010e7c:	20000584 	.word	0x20000584

08010e80 <abort>:
 8010e80:	b508      	push	{r3, lr}
 8010e82:	2006      	movs	r0, #6
 8010e84:	f000 fa08 	bl	8011298 <raise>
 8010e88:	2001      	movs	r0, #1
 8010e8a:	f7f1 faab 	bl	80023e4 <_exit>

08010e8e <_malloc_usable_size_r>:
 8010e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e92:	1f18      	subs	r0, r3, #4
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	bfbc      	itt	lt
 8010e98:	580b      	ldrlt	r3, [r1, r0]
 8010e9a:	18c0      	addlt	r0, r0, r3
 8010e9c:	4770      	bx	lr

08010e9e <__sfputc_r>:
 8010e9e:	6893      	ldr	r3, [r2, #8]
 8010ea0:	3b01      	subs	r3, #1
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	b410      	push	{r4}
 8010ea6:	6093      	str	r3, [r2, #8]
 8010ea8:	da08      	bge.n	8010ebc <__sfputc_r+0x1e>
 8010eaa:	6994      	ldr	r4, [r2, #24]
 8010eac:	42a3      	cmp	r3, r4
 8010eae:	db01      	blt.n	8010eb4 <__sfputc_r+0x16>
 8010eb0:	290a      	cmp	r1, #10
 8010eb2:	d103      	bne.n	8010ebc <__sfputc_r+0x1e>
 8010eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010eb8:	f000 b932 	b.w	8011120 <__swbuf_r>
 8010ebc:	6813      	ldr	r3, [r2, #0]
 8010ebe:	1c58      	adds	r0, r3, #1
 8010ec0:	6010      	str	r0, [r2, #0]
 8010ec2:	7019      	strb	r1, [r3, #0]
 8010ec4:	4608      	mov	r0, r1
 8010ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010eca:	4770      	bx	lr

08010ecc <__sfputs_r>:
 8010ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ece:	4606      	mov	r6, r0
 8010ed0:	460f      	mov	r7, r1
 8010ed2:	4614      	mov	r4, r2
 8010ed4:	18d5      	adds	r5, r2, r3
 8010ed6:	42ac      	cmp	r4, r5
 8010ed8:	d101      	bne.n	8010ede <__sfputs_r+0x12>
 8010eda:	2000      	movs	r0, #0
 8010edc:	e007      	b.n	8010eee <__sfputs_r+0x22>
 8010ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ee2:	463a      	mov	r2, r7
 8010ee4:	4630      	mov	r0, r6
 8010ee6:	f7ff ffda 	bl	8010e9e <__sfputc_r>
 8010eea:	1c43      	adds	r3, r0, #1
 8010eec:	d1f3      	bne.n	8010ed6 <__sfputs_r+0xa>
 8010eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010ef0 <_vfiprintf_r>:
 8010ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ef4:	460d      	mov	r5, r1
 8010ef6:	b09d      	sub	sp, #116	@ 0x74
 8010ef8:	4614      	mov	r4, r2
 8010efa:	4698      	mov	r8, r3
 8010efc:	4606      	mov	r6, r0
 8010efe:	b118      	cbz	r0, 8010f08 <_vfiprintf_r+0x18>
 8010f00:	6a03      	ldr	r3, [r0, #32]
 8010f02:	b90b      	cbnz	r3, 8010f08 <_vfiprintf_r+0x18>
 8010f04:	f7fe f904 	bl	800f110 <__sinit>
 8010f08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f0a:	07d9      	lsls	r1, r3, #31
 8010f0c:	d405      	bmi.n	8010f1a <_vfiprintf_r+0x2a>
 8010f0e:	89ab      	ldrh	r3, [r5, #12]
 8010f10:	059a      	lsls	r2, r3, #22
 8010f12:	d402      	bmi.n	8010f1a <_vfiprintf_r+0x2a>
 8010f14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f16:	f7fe fa12 	bl	800f33e <__retarget_lock_acquire_recursive>
 8010f1a:	89ab      	ldrh	r3, [r5, #12]
 8010f1c:	071b      	lsls	r3, r3, #28
 8010f1e:	d501      	bpl.n	8010f24 <_vfiprintf_r+0x34>
 8010f20:	692b      	ldr	r3, [r5, #16]
 8010f22:	b99b      	cbnz	r3, 8010f4c <_vfiprintf_r+0x5c>
 8010f24:	4629      	mov	r1, r5
 8010f26:	4630      	mov	r0, r6
 8010f28:	f000 f938 	bl	801119c <__swsetup_r>
 8010f2c:	b170      	cbz	r0, 8010f4c <_vfiprintf_r+0x5c>
 8010f2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f30:	07dc      	lsls	r4, r3, #31
 8010f32:	d504      	bpl.n	8010f3e <_vfiprintf_r+0x4e>
 8010f34:	f04f 30ff 	mov.w	r0, #4294967295
 8010f38:	b01d      	add	sp, #116	@ 0x74
 8010f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f3e:	89ab      	ldrh	r3, [r5, #12]
 8010f40:	0598      	lsls	r0, r3, #22
 8010f42:	d4f7      	bmi.n	8010f34 <_vfiprintf_r+0x44>
 8010f44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f46:	f7fe f9fb 	bl	800f340 <__retarget_lock_release_recursive>
 8010f4a:	e7f3      	b.n	8010f34 <_vfiprintf_r+0x44>
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f50:	2320      	movs	r3, #32
 8010f52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f5a:	2330      	movs	r3, #48	@ 0x30
 8010f5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801110c <_vfiprintf_r+0x21c>
 8010f60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010f64:	f04f 0901 	mov.w	r9, #1
 8010f68:	4623      	mov	r3, r4
 8010f6a:	469a      	mov	sl, r3
 8010f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f70:	b10a      	cbz	r2, 8010f76 <_vfiprintf_r+0x86>
 8010f72:	2a25      	cmp	r2, #37	@ 0x25
 8010f74:	d1f9      	bne.n	8010f6a <_vfiprintf_r+0x7a>
 8010f76:	ebba 0b04 	subs.w	fp, sl, r4
 8010f7a:	d00b      	beq.n	8010f94 <_vfiprintf_r+0xa4>
 8010f7c:	465b      	mov	r3, fp
 8010f7e:	4622      	mov	r2, r4
 8010f80:	4629      	mov	r1, r5
 8010f82:	4630      	mov	r0, r6
 8010f84:	f7ff ffa2 	bl	8010ecc <__sfputs_r>
 8010f88:	3001      	adds	r0, #1
 8010f8a:	f000 80a7 	beq.w	80110dc <_vfiprintf_r+0x1ec>
 8010f8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f90:	445a      	add	r2, fp
 8010f92:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f94:	f89a 3000 	ldrb.w	r3, [sl]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	f000 809f 	beq.w	80110dc <_vfiprintf_r+0x1ec>
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8010fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fa8:	f10a 0a01 	add.w	sl, sl, #1
 8010fac:	9304      	str	r3, [sp, #16]
 8010fae:	9307      	str	r3, [sp, #28]
 8010fb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010fb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8010fb6:	4654      	mov	r4, sl
 8010fb8:	2205      	movs	r2, #5
 8010fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fbe:	4853      	ldr	r0, [pc, #332]	@ (801110c <_vfiprintf_r+0x21c>)
 8010fc0:	f7ef f92e 	bl	8000220 <memchr>
 8010fc4:	9a04      	ldr	r2, [sp, #16]
 8010fc6:	b9d8      	cbnz	r0, 8011000 <_vfiprintf_r+0x110>
 8010fc8:	06d1      	lsls	r1, r2, #27
 8010fca:	bf44      	itt	mi
 8010fcc:	2320      	movmi	r3, #32
 8010fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010fd2:	0713      	lsls	r3, r2, #28
 8010fd4:	bf44      	itt	mi
 8010fd6:	232b      	movmi	r3, #43	@ 0x2b
 8010fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8010fe0:	2b2a      	cmp	r3, #42	@ 0x2a
 8010fe2:	d015      	beq.n	8011010 <_vfiprintf_r+0x120>
 8010fe4:	9a07      	ldr	r2, [sp, #28]
 8010fe6:	4654      	mov	r4, sl
 8010fe8:	2000      	movs	r0, #0
 8010fea:	f04f 0c0a 	mov.w	ip, #10
 8010fee:	4621      	mov	r1, r4
 8010ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ff4:	3b30      	subs	r3, #48	@ 0x30
 8010ff6:	2b09      	cmp	r3, #9
 8010ff8:	d94b      	bls.n	8011092 <_vfiprintf_r+0x1a2>
 8010ffa:	b1b0      	cbz	r0, 801102a <_vfiprintf_r+0x13a>
 8010ffc:	9207      	str	r2, [sp, #28]
 8010ffe:	e014      	b.n	801102a <_vfiprintf_r+0x13a>
 8011000:	eba0 0308 	sub.w	r3, r0, r8
 8011004:	fa09 f303 	lsl.w	r3, r9, r3
 8011008:	4313      	orrs	r3, r2
 801100a:	9304      	str	r3, [sp, #16]
 801100c:	46a2      	mov	sl, r4
 801100e:	e7d2      	b.n	8010fb6 <_vfiprintf_r+0xc6>
 8011010:	9b03      	ldr	r3, [sp, #12]
 8011012:	1d19      	adds	r1, r3, #4
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	9103      	str	r1, [sp, #12]
 8011018:	2b00      	cmp	r3, #0
 801101a:	bfbb      	ittet	lt
 801101c:	425b      	neglt	r3, r3
 801101e:	f042 0202 	orrlt.w	r2, r2, #2
 8011022:	9307      	strge	r3, [sp, #28]
 8011024:	9307      	strlt	r3, [sp, #28]
 8011026:	bfb8      	it	lt
 8011028:	9204      	strlt	r2, [sp, #16]
 801102a:	7823      	ldrb	r3, [r4, #0]
 801102c:	2b2e      	cmp	r3, #46	@ 0x2e
 801102e:	d10a      	bne.n	8011046 <_vfiprintf_r+0x156>
 8011030:	7863      	ldrb	r3, [r4, #1]
 8011032:	2b2a      	cmp	r3, #42	@ 0x2a
 8011034:	d132      	bne.n	801109c <_vfiprintf_r+0x1ac>
 8011036:	9b03      	ldr	r3, [sp, #12]
 8011038:	1d1a      	adds	r2, r3, #4
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	9203      	str	r2, [sp, #12]
 801103e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011042:	3402      	adds	r4, #2
 8011044:	9305      	str	r3, [sp, #20]
 8011046:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801111c <_vfiprintf_r+0x22c>
 801104a:	7821      	ldrb	r1, [r4, #0]
 801104c:	2203      	movs	r2, #3
 801104e:	4650      	mov	r0, sl
 8011050:	f7ef f8e6 	bl	8000220 <memchr>
 8011054:	b138      	cbz	r0, 8011066 <_vfiprintf_r+0x176>
 8011056:	9b04      	ldr	r3, [sp, #16]
 8011058:	eba0 000a 	sub.w	r0, r0, sl
 801105c:	2240      	movs	r2, #64	@ 0x40
 801105e:	4082      	lsls	r2, r0
 8011060:	4313      	orrs	r3, r2
 8011062:	3401      	adds	r4, #1
 8011064:	9304      	str	r3, [sp, #16]
 8011066:	f814 1b01 	ldrb.w	r1, [r4], #1
 801106a:	4829      	ldr	r0, [pc, #164]	@ (8011110 <_vfiprintf_r+0x220>)
 801106c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011070:	2206      	movs	r2, #6
 8011072:	f7ef f8d5 	bl	8000220 <memchr>
 8011076:	2800      	cmp	r0, #0
 8011078:	d03f      	beq.n	80110fa <_vfiprintf_r+0x20a>
 801107a:	4b26      	ldr	r3, [pc, #152]	@ (8011114 <_vfiprintf_r+0x224>)
 801107c:	bb1b      	cbnz	r3, 80110c6 <_vfiprintf_r+0x1d6>
 801107e:	9b03      	ldr	r3, [sp, #12]
 8011080:	3307      	adds	r3, #7
 8011082:	f023 0307 	bic.w	r3, r3, #7
 8011086:	3308      	adds	r3, #8
 8011088:	9303      	str	r3, [sp, #12]
 801108a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801108c:	443b      	add	r3, r7
 801108e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011090:	e76a      	b.n	8010f68 <_vfiprintf_r+0x78>
 8011092:	fb0c 3202 	mla	r2, ip, r2, r3
 8011096:	460c      	mov	r4, r1
 8011098:	2001      	movs	r0, #1
 801109a:	e7a8      	b.n	8010fee <_vfiprintf_r+0xfe>
 801109c:	2300      	movs	r3, #0
 801109e:	3401      	adds	r4, #1
 80110a0:	9305      	str	r3, [sp, #20]
 80110a2:	4619      	mov	r1, r3
 80110a4:	f04f 0c0a 	mov.w	ip, #10
 80110a8:	4620      	mov	r0, r4
 80110aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110ae:	3a30      	subs	r2, #48	@ 0x30
 80110b0:	2a09      	cmp	r2, #9
 80110b2:	d903      	bls.n	80110bc <_vfiprintf_r+0x1cc>
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d0c6      	beq.n	8011046 <_vfiprintf_r+0x156>
 80110b8:	9105      	str	r1, [sp, #20]
 80110ba:	e7c4      	b.n	8011046 <_vfiprintf_r+0x156>
 80110bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80110c0:	4604      	mov	r4, r0
 80110c2:	2301      	movs	r3, #1
 80110c4:	e7f0      	b.n	80110a8 <_vfiprintf_r+0x1b8>
 80110c6:	ab03      	add	r3, sp, #12
 80110c8:	9300      	str	r3, [sp, #0]
 80110ca:	462a      	mov	r2, r5
 80110cc:	4b12      	ldr	r3, [pc, #72]	@ (8011118 <_vfiprintf_r+0x228>)
 80110ce:	a904      	add	r1, sp, #16
 80110d0:	4630      	mov	r0, r6
 80110d2:	f7fd fbd9 	bl	800e888 <_printf_float>
 80110d6:	4607      	mov	r7, r0
 80110d8:	1c78      	adds	r0, r7, #1
 80110da:	d1d6      	bne.n	801108a <_vfiprintf_r+0x19a>
 80110dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80110de:	07d9      	lsls	r1, r3, #31
 80110e0:	d405      	bmi.n	80110ee <_vfiprintf_r+0x1fe>
 80110e2:	89ab      	ldrh	r3, [r5, #12]
 80110e4:	059a      	lsls	r2, r3, #22
 80110e6:	d402      	bmi.n	80110ee <_vfiprintf_r+0x1fe>
 80110e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80110ea:	f7fe f929 	bl	800f340 <__retarget_lock_release_recursive>
 80110ee:	89ab      	ldrh	r3, [r5, #12]
 80110f0:	065b      	lsls	r3, r3, #25
 80110f2:	f53f af1f 	bmi.w	8010f34 <_vfiprintf_r+0x44>
 80110f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80110f8:	e71e      	b.n	8010f38 <_vfiprintf_r+0x48>
 80110fa:	ab03      	add	r3, sp, #12
 80110fc:	9300      	str	r3, [sp, #0]
 80110fe:	462a      	mov	r2, r5
 8011100:	4b05      	ldr	r3, [pc, #20]	@ (8011118 <_vfiprintf_r+0x228>)
 8011102:	a904      	add	r1, sp, #16
 8011104:	4630      	mov	r0, r6
 8011106:	f7fd fe57 	bl	800edb8 <_printf_i>
 801110a:	e7e4      	b.n	80110d6 <_vfiprintf_r+0x1e6>
 801110c:	080116b8 	.word	0x080116b8
 8011110:	080116c2 	.word	0x080116c2
 8011114:	0800e889 	.word	0x0800e889
 8011118:	08010ecd 	.word	0x08010ecd
 801111c:	080116be 	.word	0x080116be

08011120 <__swbuf_r>:
 8011120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011122:	460e      	mov	r6, r1
 8011124:	4614      	mov	r4, r2
 8011126:	4605      	mov	r5, r0
 8011128:	b118      	cbz	r0, 8011132 <__swbuf_r+0x12>
 801112a:	6a03      	ldr	r3, [r0, #32]
 801112c:	b90b      	cbnz	r3, 8011132 <__swbuf_r+0x12>
 801112e:	f7fd ffef 	bl	800f110 <__sinit>
 8011132:	69a3      	ldr	r3, [r4, #24]
 8011134:	60a3      	str	r3, [r4, #8]
 8011136:	89a3      	ldrh	r3, [r4, #12]
 8011138:	071a      	lsls	r2, r3, #28
 801113a:	d501      	bpl.n	8011140 <__swbuf_r+0x20>
 801113c:	6923      	ldr	r3, [r4, #16]
 801113e:	b943      	cbnz	r3, 8011152 <__swbuf_r+0x32>
 8011140:	4621      	mov	r1, r4
 8011142:	4628      	mov	r0, r5
 8011144:	f000 f82a 	bl	801119c <__swsetup_r>
 8011148:	b118      	cbz	r0, 8011152 <__swbuf_r+0x32>
 801114a:	f04f 37ff 	mov.w	r7, #4294967295
 801114e:	4638      	mov	r0, r7
 8011150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011152:	6823      	ldr	r3, [r4, #0]
 8011154:	6922      	ldr	r2, [r4, #16]
 8011156:	1a98      	subs	r0, r3, r2
 8011158:	6963      	ldr	r3, [r4, #20]
 801115a:	b2f6      	uxtb	r6, r6
 801115c:	4283      	cmp	r3, r0
 801115e:	4637      	mov	r7, r6
 8011160:	dc05      	bgt.n	801116e <__swbuf_r+0x4e>
 8011162:	4621      	mov	r1, r4
 8011164:	4628      	mov	r0, r5
 8011166:	f7ff fd99 	bl	8010c9c <_fflush_r>
 801116a:	2800      	cmp	r0, #0
 801116c:	d1ed      	bne.n	801114a <__swbuf_r+0x2a>
 801116e:	68a3      	ldr	r3, [r4, #8]
 8011170:	3b01      	subs	r3, #1
 8011172:	60a3      	str	r3, [r4, #8]
 8011174:	6823      	ldr	r3, [r4, #0]
 8011176:	1c5a      	adds	r2, r3, #1
 8011178:	6022      	str	r2, [r4, #0]
 801117a:	701e      	strb	r6, [r3, #0]
 801117c:	6962      	ldr	r2, [r4, #20]
 801117e:	1c43      	adds	r3, r0, #1
 8011180:	429a      	cmp	r2, r3
 8011182:	d004      	beq.n	801118e <__swbuf_r+0x6e>
 8011184:	89a3      	ldrh	r3, [r4, #12]
 8011186:	07db      	lsls	r3, r3, #31
 8011188:	d5e1      	bpl.n	801114e <__swbuf_r+0x2e>
 801118a:	2e0a      	cmp	r6, #10
 801118c:	d1df      	bne.n	801114e <__swbuf_r+0x2e>
 801118e:	4621      	mov	r1, r4
 8011190:	4628      	mov	r0, r5
 8011192:	f7ff fd83 	bl	8010c9c <_fflush_r>
 8011196:	2800      	cmp	r0, #0
 8011198:	d0d9      	beq.n	801114e <__swbuf_r+0x2e>
 801119a:	e7d6      	b.n	801114a <__swbuf_r+0x2a>

0801119c <__swsetup_r>:
 801119c:	b538      	push	{r3, r4, r5, lr}
 801119e:	4b29      	ldr	r3, [pc, #164]	@ (8011244 <__swsetup_r+0xa8>)
 80111a0:	4605      	mov	r5, r0
 80111a2:	6818      	ldr	r0, [r3, #0]
 80111a4:	460c      	mov	r4, r1
 80111a6:	b118      	cbz	r0, 80111b0 <__swsetup_r+0x14>
 80111a8:	6a03      	ldr	r3, [r0, #32]
 80111aa:	b90b      	cbnz	r3, 80111b0 <__swsetup_r+0x14>
 80111ac:	f7fd ffb0 	bl	800f110 <__sinit>
 80111b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111b4:	0719      	lsls	r1, r3, #28
 80111b6:	d422      	bmi.n	80111fe <__swsetup_r+0x62>
 80111b8:	06da      	lsls	r2, r3, #27
 80111ba:	d407      	bmi.n	80111cc <__swsetup_r+0x30>
 80111bc:	2209      	movs	r2, #9
 80111be:	602a      	str	r2, [r5, #0]
 80111c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80111c4:	81a3      	strh	r3, [r4, #12]
 80111c6:	f04f 30ff 	mov.w	r0, #4294967295
 80111ca:	e033      	b.n	8011234 <__swsetup_r+0x98>
 80111cc:	0758      	lsls	r0, r3, #29
 80111ce:	d512      	bpl.n	80111f6 <__swsetup_r+0x5a>
 80111d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80111d2:	b141      	cbz	r1, 80111e6 <__swsetup_r+0x4a>
 80111d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80111d8:	4299      	cmp	r1, r3
 80111da:	d002      	beq.n	80111e2 <__swsetup_r+0x46>
 80111dc:	4628      	mov	r0, r5
 80111de:	f7fe feff 	bl	800ffe0 <_free_r>
 80111e2:	2300      	movs	r3, #0
 80111e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80111e6:	89a3      	ldrh	r3, [r4, #12]
 80111e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80111ec:	81a3      	strh	r3, [r4, #12]
 80111ee:	2300      	movs	r3, #0
 80111f0:	6063      	str	r3, [r4, #4]
 80111f2:	6923      	ldr	r3, [r4, #16]
 80111f4:	6023      	str	r3, [r4, #0]
 80111f6:	89a3      	ldrh	r3, [r4, #12]
 80111f8:	f043 0308 	orr.w	r3, r3, #8
 80111fc:	81a3      	strh	r3, [r4, #12]
 80111fe:	6923      	ldr	r3, [r4, #16]
 8011200:	b94b      	cbnz	r3, 8011216 <__swsetup_r+0x7a>
 8011202:	89a3      	ldrh	r3, [r4, #12]
 8011204:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801120c:	d003      	beq.n	8011216 <__swsetup_r+0x7a>
 801120e:	4621      	mov	r1, r4
 8011210:	4628      	mov	r0, r5
 8011212:	f000 f883 	bl	801131c <__smakebuf_r>
 8011216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801121a:	f013 0201 	ands.w	r2, r3, #1
 801121e:	d00a      	beq.n	8011236 <__swsetup_r+0x9a>
 8011220:	2200      	movs	r2, #0
 8011222:	60a2      	str	r2, [r4, #8]
 8011224:	6962      	ldr	r2, [r4, #20]
 8011226:	4252      	negs	r2, r2
 8011228:	61a2      	str	r2, [r4, #24]
 801122a:	6922      	ldr	r2, [r4, #16]
 801122c:	b942      	cbnz	r2, 8011240 <__swsetup_r+0xa4>
 801122e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011232:	d1c5      	bne.n	80111c0 <__swsetup_r+0x24>
 8011234:	bd38      	pop	{r3, r4, r5, pc}
 8011236:	0799      	lsls	r1, r3, #30
 8011238:	bf58      	it	pl
 801123a:	6962      	ldrpl	r2, [r4, #20]
 801123c:	60a2      	str	r2, [r4, #8]
 801123e:	e7f4      	b.n	801122a <__swsetup_r+0x8e>
 8011240:	2000      	movs	r0, #0
 8011242:	e7f7      	b.n	8011234 <__swsetup_r+0x98>
 8011244:	20000584 	.word	0x20000584

08011248 <_raise_r>:
 8011248:	291f      	cmp	r1, #31
 801124a:	b538      	push	{r3, r4, r5, lr}
 801124c:	4605      	mov	r5, r0
 801124e:	460c      	mov	r4, r1
 8011250:	d904      	bls.n	801125c <_raise_r+0x14>
 8011252:	2316      	movs	r3, #22
 8011254:	6003      	str	r3, [r0, #0]
 8011256:	f04f 30ff 	mov.w	r0, #4294967295
 801125a:	bd38      	pop	{r3, r4, r5, pc}
 801125c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801125e:	b112      	cbz	r2, 8011266 <_raise_r+0x1e>
 8011260:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011264:	b94b      	cbnz	r3, 801127a <_raise_r+0x32>
 8011266:	4628      	mov	r0, r5
 8011268:	f000 f830 	bl	80112cc <_getpid_r>
 801126c:	4622      	mov	r2, r4
 801126e:	4601      	mov	r1, r0
 8011270:	4628      	mov	r0, r5
 8011272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011276:	f000 b817 	b.w	80112a8 <_kill_r>
 801127a:	2b01      	cmp	r3, #1
 801127c:	d00a      	beq.n	8011294 <_raise_r+0x4c>
 801127e:	1c59      	adds	r1, r3, #1
 8011280:	d103      	bne.n	801128a <_raise_r+0x42>
 8011282:	2316      	movs	r3, #22
 8011284:	6003      	str	r3, [r0, #0]
 8011286:	2001      	movs	r0, #1
 8011288:	e7e7      	b.n	801125a <_raise_r+0x12>
 801128a:	2100      	movs	r1, #0
 801128c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011290:	4620      	mov	r0, r4
 8011292:	4798      	blx	r3
 8011294:	2000      	movs	r0, #0
 8011296:	e7e0      	b.n	801125a <_raise_r+0x12>

08011298 <raise>:
 8011298:	4b02      	ldr	r3, [pc, #8]	@ (80112a4 <raise+0xc>)
 801129a:	4601      	mov	r1, r0
 801129c:	6818      	ldr	r0, [r3, #0]
 801129e:	f7ff bfd3 	b.w	8011248 <_raise_r>
 80112a2:	bf00      	nop
 80112a4:	20000584 	.word	0x20000584

080112a8 <_kill_r>:
 80112a8:	b538      	push	{r3, r4, r5, lr}
 80112aa:	4d07      	ldr	r5, [pc, #28]	@ (80112c8 <_kill_r+0x20>)
 80112ac:	2300      	movs	r3, #0
 80112ae:	4604      	mov	r4, r0
 80112b0:	4608      	mov	r0, r1
 80112b2:	4611      	mov	r1, r2
 80112b4:	602b      	str	r3, [r5, #0]
 80112b6:	f7f1 f885 	bl	80023c4 <_kill>
 80112ba:	1c43      	adds	r3, r0, #1
 80112bc:	d102      	bne.n	80112c4 <_kill_r+0x1c>
 80112be:	682b      	ldr	r3, [r5, #0]
 80112c0:	b103      	cbz	r3, 80112c4 <_kill_r+0x1c>
 80112c2:	6023      	str	r3, [r4, #0]
 80112c4:	bd38      	pop	{r3, r4, r5, pc}
 80112c6:	bf00      	nop
 80112c8:	20001dd4 	.word	0x20001dd4

080112cc <_getpid_r>:
 80112cc:	f7f1 b872 	b.w	80023b4 <_getpid>

080112d0 <__swhatbuf_r>:
 80112d0:	b570      	push	{r4, r5, r6, lr}
 80112d2:	460c      	mov	r4, r1
 80112d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112d8:	2900      	cmp	r1, #0
 80112da:	b096      	sub	sp, #88	@ 0x58
 80112dc:	4615      	mov	r5, r2
 80112de:	461e      	mov	r6, r3
 80112e0:	da0d      	bge.n	80112fe <__swhatbuf_r+0x2e>
 80112e2:	89a3      	ldrh	r3, [r4, #12]
 80112e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80112e8:	f04f 0100 	mov.w	r1, #0
 80112ec:	bf14      	ite	ne
 80112ee:	2340      	movne	r3, #64	@ 0x40
 80112f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80112f4:	2000      	movs	r0, #0
 80112f6:	6031      	str	r1, [r6, #0]
 80112f8:	602b      	str	r3, [r5, #0]
 80112fa:	b016      	add	sp, #88	@ 0x58
 80112fc:	bd70      	pop	{r4, r5, r6, pc}
 80112fe:	466a      	mov	r2, sp
 8011300:	f000 f848 	bl	8011394 <_fstat_r>
 8011304:	2800      	cmp	r0, #0
 8011306:	dbec      	blt.n	80112e2 <__swhatbuf_r+0x12>
 8011308:	9901      	ldr	r1, [sp, #4]
 801130a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801130e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011312:	4259      	negs	r1, r3
 8011314:	4159      	adcs	r1, r3
 8011316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801131a:	e7eb      	b.n	80112f4 <__swhatbuf_r+0x24>

0801131c <__smakebuf_r>:
 801131c:	898b      	ldrh	r3, [r1, #12]
 801131e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011320:	079d      	lsls	r5, r3, #30
 8011322:	4606      	mov	r6, r0
 8011324:	460c      	mov	r4, r1
 8011326:	d507      	bpl.n	8011338 <__smakebuf_r+0x1c>
 8011328:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801132c:	6023      	str	r3, [r4, #0]
 801132e:	6123      	str	r3, [r4, #16]
 8011330:	2301      	movs	r3, #1
 8011332:	6163      	str	r3, [r4, #20]
 8011334:	b003      	add	sp, #12
 8011336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011338:	ab01      	add	r3, sp, #4
 801133a:	466a      	mov	r2, sp
 801133c:	f7ff ffc8 	bl	80112d0 <__swhatbuf_r>
 8011340:	9f00      	ldr	r7, [sp, #0]
 8011342:	4605      	mov	r5, r0
 8011344:	4639      	mov	r1, r7
 8011346:	4630      	mov	r0, r6
 8011348:	f7fe febe 	bl	80100c8 <_malloc_r>
 801134c:	b948      	cbnz	r0, 8011362 <__smakebuf_r+0x46>
 801134e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011352:	059a      	lsls	r2, r3, #22
 8011354:	d4ee      	bmi.n	8011334 <__smakebuf_r+0x18>
 8011356:	f023 0303 	bic.w	r3, r3, #3
 801135a:	f043 0302 	orr.w	r3, r3, #2
 801135e:	81a3      	strh	r3, [r4, #12]
 8011360:	e7e2      	b.n	8011328 <__smakebuf_r+0xc>
 8011362:	89a3      	ldrh	r3, [r4, #12]
 8011364:	6020      	str	r0, [r4, #0]
 8011366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801136a:	81a3      	strh	r3, [r4, #12]
 801136c:	9b01      	ldr	r3, [sp, #4]
 801136e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011372:	b15b      	cbz	r3, 801138c <__smakebuf_r+0x70>
 8011374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011378:	4630      	mov	r0, r6
 801137a:	f000 f81d 	bl	80113b8 <_isatty_r>
 801137e:	b128      	cbz	r0, 801138c <__smakebuf_r+0x70>
 8011380:	89a3      	ldrh	r3, [r4, #12]
 8011382:	f023 0303 	bic.w	r3, r3, #3
 8011386:	f043 0301 	orr.w	r3, r3, #1
 801138a:	81a3      	strh	r3, [r4, #12]
 801138c:	89a3      	ldrh	r3, [r4, #12]
 801138e:	431d      	orrs	r5, r3
 8011390:	81a5      	strh	r5, [r4, #12]
 8011392:	e7cf      	b.n	8011334 <__smakebuf_r+0x18>

08011394 <_fstat_r>:
 8011394:	b538      	push	{r3, r4, r5, lr}
 8011396:	4d07      	ldr	r5, [pc, #28]	@ (80113b4 <_fstat_r+0x20>)
 8011398:	2300      	movs	r3, #0
 801139a:	4604      	mov	r4, r0
 801139c:	4608      	mov	r0, r1
 801139e:	4611      	mov	r1, r2
 80113a0:	602b      	str	r3, [r5, #0]
 80113a2:	f7f1 f86f 	bl	8002484 <_fstat>
 80113a6:	1c43      	adds	r3, r0, #1
 80113a8:	d102      	bne.n	80113b0 <_fstat_r+0x1c>
 80113aa:	682b      	ldr	r3, [r5, #0]
 80113ac:	b103      	cbz	r3, 80113b0 <_fstat_r+0x1c>
 80113ae:	6023      	str	r3, [r4, #0]
 80113b0:	bd38      	pop	{r3, r4, r5, pc}
 80113b2:	bf00      	nop
 80113b4:	20001dd4 	.word	0x20001dd4

080113b8 <_isatty_r>:
 80113b8:	b538      	push	{r3, r4, r5, lr}
 80113ba:	4d06      	ldr	r5, [pc, #24]	@ (80113d4 <_isatty_r+0x1c>)
 80113bc:	2300      	movs	r3, #0
 80113be:	4604      	mov	r4, r0
 80113c0:	4608      	mov	r0, r1
 80113c2:	602b      	str	r3, [r5, #0]
 80113c4:	f7f1 f86e 	bl	80024a4 <_isatty>
 80113c8:	1c43      	adds	r3, r0, #1
 80113ca:	d102      	bne.n	80113d2 <_isatty_r+0x1a>
 80113cc:	682b      	ldr	r3, [r5, #0]
 80113ce:	b103      	cbz	r3, 80113d2 <_isatty_r+0x1a>
 80113d0:	6023      	str	r3, [r4, #0]
 80113d2:	bd38      	pop	{r3, r4, r5, pc}
 80113d4:	20001dd4 	.word	0x20001dd4

080113d8 <_init>:
 80113d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113da:	bf00      	nop
 80113dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113de:	bc08      	pop	{r3}
 80113e0:	469e      	mov	lr, r3
 80113e2:	4770      	bx	lr

080113e4 <_fini>:
 80113e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113e6:	bf00      	nop
 80113e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113ea:	bc08      	pop	{r3}
 80113ec:	469e      	mov	lr, r3
 80113ee:	4770      	bx	lr
